<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Yarn学习笔记</title>
      <link href="/2020/02/17/yarn/"/>
      <url>/2020/02/17/yarn/</url>
      
        <content type="html"><![CDATA[<h1 id="Yarn-学习"><a href="#Yarn-学习" class="headerlink" title="Yarn 学习"></a>Yarn 学习</h1><blockquote><p>天下之事常成于困约，而败于奢靡。——陆游</p></blockquote><h2 id="这里有个前提-电脑里必须安装-Node"><a href="#这里有个前提-电脑里必须安装-Node" class="headerlink" title="这里有个前提 电脑里必须安装 Node"></a>这里有个前提 电脑里必须安装 Node</h2><h2 id="第一步安装-yarn"><a href="#第一步安装-yarn" class="headerlink" title="第一步安装 yarn"></a>第一步安装 yarn</h2><ul><li>使用 npm 方式安装 yarn</li></ul><pre class="line-numbers language-python"><code class="language-python">npm i yarn <span class="token operator">-</span>v<span class="token comment" spellcheck="true"># 要是有淘宝镜像的话也可以</span>cnpm i yarn <span class="token operator">-</span>v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第二步查看是否安装成功"><a href="#第二步查看是否安装成功" class="headerlink" title="第二步查看是否安装成功"></a>第二步查看是否安装成功</h2><pre class="line-numbers language-python"><code class="language-python">yarn <span class="token operator">-</span>v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="第三步常用命令"><a href="#第三步常用命令" class="headerlink" title="第三步常用命令"></a>第三步常用命令</h2><h3 id="初始化一个新的项目"><a href="#初始化一个新的项目" class="headerlink" title="初始化一个新的项目"></a>初始化一个新的项目</h3><pre class="line-numbers language-javascript"><code class="language-javascript">yarn init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="添加依赖包"><a href="#添加依赖包" class="headerlink" title="添加依赖包"></a>添加依赖包</h3><pre class="line-numbers language-javascript"><code class="language-javascript">yarn add <span class="token punctuation">[</span><span class="token keyword">package</span><span class="token punctuation">]</span>yarn add <span class="token punctuation">[</span><span class="token keyword">package</span><span class="token punctuation">]</span>@<span class="token punctuation">[</span>version<span class="token punctuation">]</span>yarn add <span class="token punctuation">[</span><span class="token keyword">package</span><span class="token punctuation">]</span>@<span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="将依赖项添加到不同的依赖项类别中"><a href="#将依赖项添加到不同的依赖项类别中" class="headerlink" title="将依赖项添加到不同的依赖项类别中"></a>将依赖项添加到不同的依赖项类别中</h3><ul><li>开发环境</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">yarn add <span class="token punctuation">[</span><span class="token keyword">package</span><span class="token punctuation">]</span> <span class="token operator">-</span>D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>生产环境</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">yarn add <span class="token punctuation">[</span><span class="token keyword">package</span><span class="token punctuation">]</span> <span class="token operator">-</span>S<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="升级依赖包"><a href="#升级依赖包" class="headerlink" title="升级依赖包"></a>升级依赖包</h3><pre class="line-numbers language-javascript"><code class="language-javascript">yarn upgrade <span class="token punctuation">[</span><span class="token keyword">package</span><span class="token punctuation">]</span>yarn upgrade <span class="token punctuation">[</span><span class="token keyword">package</span><span class="token punctuation">]</span>@<span class="token punctuation">[</span>version<span class="token punctuation">]</span>yarn upgrade <span class="token punctuation">[</span><span class="token keyword">package</span><span class="token punctuation">]</span>@<span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="移除依赖包"><a href="#移除依赖包" class="headerlink" title="移除依赖包"></a>移除依赖包</h3><pre class="line-numbers language-javascript"><code class="language-javascript">yarn remove <span class="token punctuation">[</span><span class="token keyword">package</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="安装项目的全部依赖"><a href="#安装项目的全部依赖" class="headerlink" title="安装项目的全部依赖"></a>安装项目的全部依赖</h3><pre class="line-numbers language-javascript"><code class="language-javascript">yarn install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> yarn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 邮件</title>
      <link href="/2020/02/16/pythonresult18/"/>
      <url>/2020/02/16/pythonresult18/</url>
      
        <content type="html"><![CDATA[<h2 id="Python-邮件"><a href="#Python-邮件" class="headerlink" title="Python 邮件"></a>Python 邮件</h2><h2 id="邮件的三种协议"><a href="#邮件的三种协议" class="headerlink" title="邮件的三种协议"></a>邮件的三种协议</h2><h3 id="POP3"><a href="#POP3" class="headerlink" title="POP3"></a>POP3</h3><p>POP3 是点在邮件的第一个离线协议标准,POP3 允许用户从服务器上把邮件存储到本地主机(即自己的计算机),POP3 协议允许电子邮件客户端下载服务器上的邮件,但是在客户端的操作(如移动邮件,标记已读 等) 不会反馈到服务器上</p><h3 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h3><p>SMTP 的全称是’Simple Mail Transfer Protocol’ 即简单邮件传输协议.它是一组用于从源地址到目的地址传输邮件的规范,通过它老控制邮件的中转方式,SMTP 协议属于 TCP/IP 协议 它帮助每台计算机在发送或中转信件时候找到下一个目的地,SMTP 服务器就是遵循 SMTP 协议的发送邮件的服务器</p><p>SMTP 简单的说就是要求必须在提供了账户名和密码之后才能登陆 SMTP 服务器这就使得那些垃圾邮件散播着无可趁之机</p><h3 id="IMAP"><a href="#IMAP" class="headerlink" title="IMAP"></a>IMAP</h3><p>它跟 POP3 类似邮件访问标准协议。不同的是开启了 IMAP 后在电子邮件客户端收取的邮件仍然保留在服务器上。同时在客户端上的操作都会反馈到服务器上比如删除邮件。标记已读等等。服务器上的邮件也会做相应的动作</p><h2 id="利用-Python-发送邮件"><a href="#利用-Python-发送邮件" class="headerlink" title="利用 Python 发送邮件"></a>利用 Python 发送邮件</h2><h3 id="第一步安装类库"><a href="#第一步安装类库" class="headerlink" title="第一步安装类库"></a>第一步安装类库</h3><pre class="line-numbers language-python"><code class="language-python">pip install yagmailpip install keyring<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第一步去设置邮箱"><a href="#第一步去设置邮箱" class="headerlink" title="第一步去设置邮箱"></a>第一步去设置邮箱</h3><p>设置你想要给别人发送的邮箱</p><ul><li><p>开启 IMAP/SMTP 或者 POP3/SMTP 服务</p></li><li><p>记录下密码。以后会用到</p></li></ul><h3 id="第二步注册密码和账号"><a href="#第二步注册密码和账号" class="headerlink" title="第二步注册密码和账号"></a>第二步注册密码和账号</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> yagmailyagmail<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'xx你的邮箱名xx'</span><span class="token punctuation">,</span> <span class="token string">'xxxx这里就是你开启SMTP后获取到的密码xxx'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 注册成功后 就没有必要在注册了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三步正式开始发送邮件"><a href="#第三步正式开始发送邮件" class="headerlink" title="第三步正式开始发送邮件"></a>第三步正式开始发送邮件</h3><blockquote><p>但是注意不要特别频繁的发送邮件,否则会当作垃圾邮件</p></blockquote><h4 id="基础版"><a href="#基础版" class="headerlink" title="基础版"></a>基础版</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> yagmailyag <span class="token operator">=</span> yagmail<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span>user<span class="token operator">=</span><span class="token string">'26650599@qq.com'</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'smtp.qq.com'</span><span class="token punctuation">)</span>contents <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'这就是正文,并且我想让你看看有没有效果'</span><span class="token punctuation">]</span>yag<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'2993222085@qq.com'</span><span class="token punctuation">,</span> <span class="token string">'练习Python指南'</span><span class="token punctuation">,</span> contents<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="发送带有-HTML-文件的-Email-和加载附件的-Email"><a href="#发送带有-HTML-文件的-Email-和加载附件的-Email" class="headerlink" title="发送带有 HTML 文件的 Email,和加载附件的 Email"></a>发送带有 HTML 文件的 Email,和加载附件的 Email</h4><ul><li>send 三个参数 目标邮箱的地址,标题,[附件的地址] 路径/变成\</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> yagmail<span class="token keyword">import</span> timeyag <span class="token operator">=</span> yagmail<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span>user<span class="token operator">=</span><span class="token string">'26650599@qq.com'</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'smtp.qq.com'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./moban.html"</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> items<span class="token punctuation">:</span>        content <span class="token operator">=</span> items<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        newresult <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> content_item <span class="token keyword">in</span> content<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"因为"</span> <span class="token keyword">in</span> content_item<span class="token punctuation">)</span><span class="token punctuation">:</span>                newresult_item <span class="token operator">=</span> content_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>                    <span class="token string">"因为"</span><span class="token punctuation">,</span> <span class="token string">"替换了因为"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 因为他不会改变原数组所以必须重新存储</span>                newresult<span class="token punctuation">.</span>append<span class="token punctuation">(</span>newresult_item<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                newresult<span class="token punctuation">.</span>append<span class="token punctuation">(</span>content_item<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 暂停一秒钟等待赋值完成</span>        yag<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'2993222085@qq.com'</span><span class="token punctuation">,</span> <span class="token string">'带有HTML的Python'</span><span class="token punctuation">,</span> newresult<span class="token punctuation">,</span> <span class="token punctuation">[</span>                 <span class="token string">'C:/Users/Administrator/Desktop/tupian.jpg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"打不开"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果 发送成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 操作图像</title>
      <link href="/2020/02/15/pythonresult17/"/>
      <url>/2020/02/15/pythonresult17/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-操作图像"><a href="#Python-操作图像" class="headerlink" title="Python 操作图像"></a>Python 操作图像</h1><blockquote><p>我的努力求学没有得到别的好处，只不过是愈来愈发觉自己的无知 ——笛卡儿</p></blockquote><h2 id="操作图像"><a href="#操作图像" class="headerlink" title="操作图像"></a>操作图像</h2><ul><li>python 要是想操作图像 必须要安装 pillow 模块</li></ul><h3 id="安装-pillow-模块"><a href="#安装-pillow-模块" class="headerlink" title="安装 pillow 模块"></a>安装 pillow 模块</h3><pre class="line-numbers language-python"><code class="language-python">pip install pillow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="解析颜色-获取图片信息-另存为图片"><a href="#解析颜色-获取图片信息-另存为图片" class="headerlink" title="解析颜色,获取图片信息,另存为图片"></a>解析颜色,获取图片信息,另存为图片</h3><ul><li>getcolor</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageColorresult <span class="token operator">=</span> ImageColor<span class="token punctuation">.</span>getcolor<span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'RGBA'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># (255, 0, 0, 255)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Pillow 函数和方法需要一个矩形元祖参数。所以 Pillow 需要一个有四个整坐标的元祖.表示图像中一个矩形区域。四个整数按顺序分别是</p></blockquote><p>1.左 该矩形的最左边的 X 坐标</p><p>2.顶 该矩形的顶边 y 坐标</p><p>3.右 该矩形的最右边右面一个像素的 X 坐标。此整数必须比左边大</p><p>4.底 该矩形的底边下面一个像素的 Y 坐标,此整数必须比顶边整数大</p><ul><li>Image.open() 打开图片</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imagepicall <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'lazyimg.jpg'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打开图片</span><span class="token keyword">print</span><span class="token punctuation">(</span>picall<span class="token punctuation">.</span>size<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 一个元祖 获取到图片的宽度和高度</span><span class="token keyword">print</span><span class="token punctuation">(</span>picall<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 宽度</span><span class="token keyword">print</span><span class="token punctuation">(</span>picall<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 高度</span><span class="token keyword">print</span><span class="token punctuation">(</span>picall<span class="token punctuation">.</span>filename<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 文件名</span><span class="token keyword">print</span><span class="token punctuation">(</span>picall<span class="token punctuation">.</span>format<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 后缀名</span><span class="token keyword">print</span><span class="token punctuation">(</span>picall<span class="token punctuation">.</span>format_description<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 描述</span>picall<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'222.jpg'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 另存为其他名字的图片</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="画图片"><a href="#画图片" class="headerlink" title="画图片"></a>画图片</h3><ul><li>画图片 new save</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imageim <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGBA'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'purple'</span><span class="token punctuation">)</span>im<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'123232.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>我们创建了一个图像 它有 100 像素宽,200 像素高,带有紫色背景</p></blockquote><h3 id="裁剪图片"><a href="#裁剪图片" class="headerlink" title="裁剪图片"></a>裁剪图片</h3><ul><li><p>裁剪图片值得是在图像里面选择一个矩形区域，删除矩形区域以外的内容</p></li><li><p>crop() 矩形元祖</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imagepicall <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'lazyimg.jpg'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打开图片</span>imgcrop <span class="token operator">=</span> picall<span class="token punctuation">.</span>crop<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">335</span><span class="token punctuation">,</span> <span class="token number">345</span><span class="token punctuation">,</span> <span class="token number">565</span><span class="token punctuation">,</span> <span class="token number">560</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 开始裁剪</span>imgcrop<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'裁剪.png'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果生成</span><span class="token comment" spellcheck="true"># 生咸新的图片</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复制和粘贴图像到其他图像"><a href="#复制和粘贴图像到其他图像" class="headerlink" title="复制和粘贴图像到其他图像"></a>复制和粘贴图像到其他图像</h3><ul><li>copy()</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imagepicall <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'lazyimg.jpg'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打开图片</span>catimgall <span class="token operator">=</span> picall<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取到拷贝</span>cropimg <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'裁剪.png'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取到裁剪的图片</span>catimgall<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>cropimg<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>catimgall<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'新的图片.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>paste()粘贴</li></ul><blockquote><p>特别注意的就是 paste 是在原图上粘贴复制 修改原图,所以使用前一定要先拷贝一份</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imagepicall <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'lazyimg.jpg'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打开图片</span>catimgall <span class="token operator">=</span> picall<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取到拷贝</span>cropimg <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'裁剪.png'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取到裁剪的图片</span>catimgall<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>cropimg<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>catimgall<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'新的图片.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="调整图片大小"><a href="#调整图片大小" class="headerlink" title="调整图片大小"></a>调整图片大小</h3><ul><li>resize() 方法 里面传递的必须是元祖</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imagepicall <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'lazyimg.jpg'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打开图片</span>width <span class="token operator">=</span> picall<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true"># 宽度</span>height <span class="token operator">=</span> picall<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 高度</span>picall_item <span class="token operator">=</span> picall<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>width<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>height<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>picall_item<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"缩小版本.png"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="旋转和翻转图像"><a href="#旋转和翻转图像" class="headerlink" title="旋转和翻转图像"></a>旋转和翻转图像</h3><ul><li>rotate()</li></ul><blockquote><p>旋转后宽度和高度肯定变了,这个时候如果需要填充像素就需要加入 expand=True</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imagepicall <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'lazyimg.jpg'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打开图片</span>picall<span class="token punctuation">.</span>rotate<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span> expand<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'lazyimg222.jpg'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 旋转 90deg</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更改单个像素"><a href="#更改单个像素" class="headerlink" title="更改单个像素"></a>更改单个像素</h3><ul><li>单个像素的颜色可以通过 getpixel()和 putpixel()方法他们都接受一个元祖.表示像素 x 和 y 的坐标</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageColorim <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGBA'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>im<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        im<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> m <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        im<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> ImageColor<span class="token punctuation">.</span>getcolor<span class="token punctuation">(</span><span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token string">'RGBA'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>im<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>im<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>im<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'画图.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程(了解)和打开其他应用程序</title>
      <link href="/2020/02/14/pythonresult16/"/>
      <url>/2020/02/14/pythonresult16/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程-了解-和打开其他应用程序"><a href="#多线程-了解-和打开其他应用程序" class="headerlink" title="多线程(了解)和打开其他应用程序"></a>多线程(了解)和打开其他应用程序</h1><blockquote><p>书籍把我们引入最美好的社会，使我们认识各个时代的伟大智者。——史美尔斯</p></blockquote><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>单线程只得是代码由上到下执行的，不能跳步执行。也就是一个卡死的话,后面都不执行.所以必须引入多线程的概念</p><ul><li><p>多线程必须引入 threading</p></li><li><p>例子</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Start of program"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">takeANap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Wake Up'</span><span class="token punctuation">)</span>threadObj <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>takeANap<span class="token punctuation">)</span>threadObj<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"End of program"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这样的话 5秒钟后执行takeANap</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># Start of program</span><span class="token comment" spellcheck="true"># End of program</span><span class="token comment" spellcheck="true"># Wake Up</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="向线程的目标函数传递参数"><a href="#向线程的目标函数传递参数" class="headerlink" title="向线程的目标函数传递参数"></a>向线程的目标函数传递参数</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Gats"</span><span class="token punctuation">,</span> <span class="token string">"Dogs"</span><span class="token punctuation">,</span> <span class="token string">"Frogs"</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span>threadObj <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>    target<span class="token operator">=</span><span class="token keyword">print</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Gats'</span><span class="token punctuation">,</span> <span class="token string">'Dogs'</span><span class="token punctuation">,</span> <span class="token string">'Frogs'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> kwargs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'sep'</span><span class="token punctuation">:</span> <span class="token string">'&amp;'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>threadObj<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># Gats&amp;Dogs&amp;Frogs</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多线程一定要小心并发问题"><a href="#多线程一定要小心并发问题" class="headerlink" title="多线程一定要小心并发问题"></a>多线程一定要小心并发问题</h3><blockquote><p>多线程 当创建一个新的 Thread 对象时 要确保其目标函数只使用该函数中的局部变量，这将避免程序中的并发问题</p></blockquote><h2 id="从-Python-中启动其他程序"><a href="#从-Python-中启动其他程序" class="headerlink" title="从 Python 中启动其他程序"></a>从 Python 中启动其他程序</h2><ul><li><p>可以利用 subprocess</p></li><li><p>可以利用 Popen() 打开别的程序</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> subprocesssubprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token string">'C:\\windows\\System32\\calc.exe'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这样就打开了计算器</span><span class="token comment" spellcheck="true"># 判断继承是否运行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="向-Popen-传递命令行参数"><a href="#向-Popen-传递命令行参数" class="headerlink" title="向 Popen()传递命令行参数"></a>向 Popen()传递命令行参数</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> subprocessjisuanqi <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token string">'D:\Tools\EDIT\EditPlus.exe'</span><span class="token punctuation">,</span> <span class="token string">'C:\\hello.txt'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>jisuanqi<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>jisuanqi<span class="token punctuation">.</span>poll<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 要是写两个的话 变成数组模式</span><span class="token comment" spellcheck="true"># 专业昂他会打开记事本,然后在打开hello.txt文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用-Python-打开网站"><a href="#用-Python-打开网站" class="headerlink" title="用 Python 打开网站"></a>用 Python 打开网站</h3><ul><li>webbrowser</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> webbrowserwebbrowser<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 打开浏览器,输入www.baidu.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间,计划任务和启动程序</title>
      <link href="/2020/02/13/pythonresult15/"/>
      <url>/2020/02/13/pythonresult15/</url>
      
        <content type="html"><![CDATA[<h1 id="时间-计划任务和启动程序"><a href="#时间-计划任务和启动程序" class="headerlink" title="时间,计划任务和启动程序"></a>时间,计划任务和启动程序</h1><blockquote><p>卓越的人一大优点是：在不利与艰难的遭遇里百折不饶。——贝多芬</p></blockquote><h2 id="time-模块"><a href="#time-模块" class="headerlink" title="time 模块"></a>time 模块</h2><blockquote><p>计算机的系统时钟设置为特定的日期,时间和时区。内置的 time 模块让 Python 程序能读取系统时钟的当前时间。在 time 模块中 time.time()和 time.sleep()函数是最有用的模块</p></blockquote><h3 id="time-time-函数"><a href="#time-time-函数" class="headerlink" title="time.time()函数"></a>time.time()函数</h3><ul><li>时间戳可以用于测试函数运行时间</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> timetime<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 时间戳</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="time-sleep-函数"><a href="#time-sleep-函数" class="headerlink" title="time.sleep() 函数"></a>time.sleep() 函数</h3><ul><li>需要让程序暂停一下,调用 time.sleep()函数 并传入让程序暂停的秒数</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始暂停'</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"暂停"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"秒"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="datetime-模块"><a href="#datetime-模块" class="headerlink" title="datetime 模块"></a>datetime 模块</h2><ul><li>datetime 模块有自己的 datetime 数据模型</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> datetimedatetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>利用模块获取到年 月 日 时 分 秒</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> datetimeresult <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果 2020-04-09 10:10:40.764899</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印出年</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>year<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印出月</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印出日期</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>day<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印出小时</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>hour<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印出分钟</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>minute<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印出秒</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>timedelta 数据模型</li></ul><blockquote><p>它获取的是一段时间 比如 18 天一共多少秒之类的。它没有月 年的单位，只有 天，秒，微秒来计算</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> datetimeresult <span class="token operator">=</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span> hours<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> minutes<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span> seconds<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 986948.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>比如要计算 1000 天后的日期</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> datetimenowdata <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>nowdata<span class="token punctuation">)</span>thounddays <span class="token operator">=</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>nowdata<span class="token operator">+</span>thounddays<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true">#  2020-04-09 10:31:57.730994</span><span class="token comment" spellcheck="true">#  2023-01-04 10:31:57.730994</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将 datetime 对象转换成字符串</li></ul><blockquote><p>必须要利用 strftime() f 表示格式</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> datetimenowdata <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>nowdata<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y/%m/%d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>strftime 指令</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">%</span>Y  带世纪的年份<span class="token punctuation">,</span>例如<span class="token string">'2014'</span><span class="token operator">%</span>y  不带世纪的年份<span class="token punctuation">,</span><span class="token string">'00'</span>至<span class="token string">'99'</span><span class="token operator">%</span>m  数字表示月份 <span class="token string">'01'</span>至<span class="token string">'12'</span><span class="token operator">%</span>B  完整的月份 <span class="token string">'November'</span><span class="token operator">%</span>b  简写的月份 例如<span class="token string">'Nov'</span><span class="token operator">%</span>d  一月中的第几天 <span class="token string">'01'</span>至 <span class="token string">'31'</span><span class="token operator">%</span>j  一年中的第几天 <span class="token string">'001'</span> 至 <span class="token string">'366'</span><span class="token operator">%</span>w  一周中的第几天 <span class="token string">'0'</span><span class="token punctuation">(</span>周日<span class="token punctuation">)</span>至<span class="token string">'6'</span> <span class="token punctuation">(</span>周六<span class="token punctuation">)</span><span class="token operator">%</span>A  完整的周几 例如 <span class="token string">'Monday'</span><span class="token operator">%</span>a  简写的周几 例如 <span class="token string">'Mon'</span><span class="token operator">%</span>H  小时<span class="token punctuation">(</span><span class="token number">24</span>小时<span class="token punctuation">)</span> <span class="token string">'00'</span> 至 <span class="token string">'23'</span><span class="token operator">%</span>I  小时<span class="token punctuation">(</span><span class="token number">12</span>小时<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'01'</span> 至 <span class="token string">'12'</span><span class="token operator">%</span>M  分 <span class="token string">'00'</span> 至 <span class="token string">'59'</span><span class="token operator">%</span>S  秒 <span class="token string">'00'</span> 至 <span class="token string">'59'</span><span class="token operator">%</span>p  <span class="token string">'AM'</span>或<span class="token string">'PM'</span><span class="token operator">%</span><span class="token operator">%</span>  就是<span class="token operator">%</span>字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="将字符串换成-datetime-对象"><a href="#将字符串换成-datetime-对象" class="headerlink" title="将字符串换成 datetime 对象"></a>将字符串换成 datetime 对象</h2><ul><li>strptime 转换时间</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> datetimeresult <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token string">'2015/10/21 16:29:00'</span><span class="token punctuation">,</span> <span class="token string">'%Y/%m/%d %H:%M:%S'</span><span class="token punctuation">)</span>result2 <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>    <span class="token string">'October 21,2015'</span><span class="token punctuation">,</span> <span class="token string">'%B %d,%Y'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>处理 PDF 和 Word 文档</title>
      <link href="/2020/02/12/pythonresult14/"/>
      <url>/2020/02/12/pythonresult14/</url>
      
        <content type="html"><![CDATA[<h1 id="处理-PDF-和-Word-文档"><a href="#处理-PDF-和-Word-文档" class="headerlink" title="处理 PDF 和 Word 文档"></a>处理 PDF 和 Word 文档</h1><blockquote><p>书到用时方恨少、事非经过不知难。——陆游</p></blockquote><h2 id="PDF-文档需要第三方类库"><a href="#PDF-文档需要第三方类库" class="headerlink" title="PDF 文档需要第三方类库"></a>PDF 文档需要第三方类库</h2><pre class="line-numbers language-python"><code class="language-python">pip install PyPDF2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><blockquote><p>PyPDF2 没有办法从文档中提取图像,图表或者其他媒体,它可以提取文本,并将文本返回 Python 字符串,加密的 PDF 不能支持</p></blockquote><h3 id="PyPDF2-包含了-PdfFileReader-PdfFileWriter-PdfFileMerger-PageObject"><a href="#PyPDF2-包含了-PdfFileReader-PdfFileWriter-PdfFileMerger-PageObject" class="headerlink" title="PyPDF2 包含了 PdfFileReader, PdfFileWriter, PdfFileMerger,PageObject"></a>PyPDF2 包含了 PdfFileReader, PdfFileWriter, PdfFileMerger,PageObject</h3><h4 id="从-PDF-读取文件"><a href="#从-PDF-读取文件" class="headerlink" title="从 PDF 读取文件"></a>从 PDF 读取文件</h4><ul><li>PdfFileReader,getPage(0),extractText(),close()</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> PyPDF2 <span class="token keyword">import</span> PdfFileReader<span class="token punctuation">,</span> PdfFileWriterreadFile <span class="token operator">=</span> <span class="token string">'./测试.pdf'</span>writeFile <span class="token operator">=</span> <span class="token string">'./写入.pdf'</span><span class="token keyword">def</span> <span class="token function">extract_information</span><span class="token punctuation">(</span>pdf_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>pdf_path<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        pdf <span class="token operator">=</span> PdfFileReader<span class="token punctuation">(</span>f<span class="token punctuation">)</span>        information <span class="token operator">=</span> pdf<span class="token punctuation">.</span>getDocumentInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(information)  # 获取信息</span>        <span class="token comment" spellcheck="true"># print(pdf.numPages)  # 获取所有页码</span>        Page <span class="token operator">=</span> pdf<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取到页面</span>        Page_content <span class="token operator">=</span> Page<span class="token punctuation">.</span>extractText<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取页面的内容</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>Page_content<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 这样就获取到了内容</span>extract_information<span class="token punctuation">(</span>readFile<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="处理解密-PDF"><a href="#处理解密-PDF" class="headerlink" title="处理解密 PDF"></a>处理解密 PDF</h3><ul><li><p>isEncrypted 判断有没有密码</p></li><li><p>decrypt 输入密码</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> PyPDF2 <span class="token keyword">import</span> PdfFileReader<span class="token punctuation">,</span> PdfFileWriterreadFile <span class="token operator">=</span> <span class="token string">'./测试.pdf'</span>writeFile <span class="token operator">=</span> <span class="token string">'./写入.pdf'</span><span class="token keyword">def</span> <span class="token function">extract_information</span><span class="token punctuation">(</span>pdf_path<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>pdf_path<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>pdf <span class="token operator">=</span> PdfFileReader<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pdf<span class="token punctuation">.</span>isEncrypted<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 要是 True 就代表加密,False 就代表不加密 # 如果要是 True</span>passwordflag <span class="token operator">=</span> pdf<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span><span class="token string">'密码'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># decrypt 就是输入的密码</span><span class="token keyword">if</span> passwordflag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 0 就表示输入错误 1 就表示输入正确</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"密码输入失败"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"密码输入对了"</span><span class="token punctuation">)</span>extract_information<span class="token punctuation">(</span>readFile<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="合并-PDF"><a href="#合并-PDF" class="headerlink" title="合并 PDF"></a>合并 PDF</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> PyPDF2 <span class="token keyword">import</span> PdfFileReader<span class="token punctuation">,</span> PdfFileWriter<span class="token keyword">def</span> <span class="token function">merge_pdfs</span><span class="token punctuation">(</span>paths<span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">:</span>    pdf_writer <span class="token operator">=</span> PdfFileWriter<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> path <span class="token keyword">in</span> paths<span class="token punctuation">:</span>        pdf_reader <span class="token operator">=</span> PdfFileReader<span class="token punctuation">(</span>path<span class="token punctuation">)</span>        <span class="token keyword">for</span> page <span class="token keyword">in</span> range<span class="token punctuation">(</span>pdf_reader<span class="token punctuation">.</span>getNumPages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                 <span class="token comment" spellcheck="true"># 将每页添加到writer对象</span>            pdf_writer<span class="token punctuation">.</span>addPage<span class="token punctuation">(</span>pdf_reader<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 写入合并的pdf</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> out<span class="token punctuation">:</span>                pdf_writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    paths <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'测试.pdf'</span><span class="token punctuation">,</span> <span class="token string">'测试2.pdf'</span><span class="token punctuation">]</span>    merge_pdfs<span class="token punctuation">(</span>paths<span class="token punctuation">,</span> output<span class="token operator">=</span><span class="token string">'merged.pdf'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拆分-PDF"><a href="#拆分-PDF" class="headerlink" title="拆分 PDF"></a>拆分 PDF</h3><ul><li>拆分</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> PyPDF2 <span class="token keyword">import</span> PdfFileReader<span class="token punctuation">,</span> PdfFileWriter<span class="token keyword">def</span> <span class="token function">split</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> name_of_split<span class="token punctuation">)</span><span class="token punctuation">:</span>    pdf <span class="token operator">=</span> PdfFileReader<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">for</span> page <span class="token keyword">in</span> range<span class="token punctuation">(</span>pdf<span class="token punctuation">.</span>getNumPages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pdf_writer <span class="token operator">=</span> PdfFileWriter<span class="token punctuation">(</span><span class="token punctuation">)</span>        pdf_writer<span class="token punctuation">.</span>addPage<span class="token punctuation">(</span>pdf<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> f<span class="token string">'{name_of_split}{page}.pdf'</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> output_pdf<span class="token punctuation">:</span>        pdf_writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>output_pdf<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    path <span class="token operator">=</span> <span class="token string">'./merged.pdf'</span>    split<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'jupyter_page'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"失败了"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>处理 Excel 电子表格</title>
      <link href="/2020/02/11/pythonresult13/"/>
      <url>/2020/02/11/pythonresult13/</url>
      
        <content type="html"><![CDATA[<h1 id="处理-Excel-电子表格"><a href="#处理-Excel-电子表格" class="headerlink" title="处理 Excel 电子表格"></a>处理 Excel 电子表格</h1><blockquote><p>卓越的人一大优点是：在不利与艰难的遭遇里百折不饶。——贝多芬</p></blockquote><h2 id="将-xls-格式的文档转换成-xlsx-格式这样后面才能读取"><a href="#将-xls-格式的文档转换成-xlsx-格式这样后面才能读取" class="headerlink" title="将 xls 格式的文档转换成 xlsx 格式这样后面才能读取"></a>将 xls 格式的文档转换成 xlsx 格式这样后面才能读取</h2><blockquote><p>利用 pandas 模块 还有 xlrd 模块</p></blockquote><h3 id="1-安装-pandas-模块"><a href="#1-安装-pandas-模块" class="headerlink" title="(1) 安装 pandas 模块"></a>(1) 安装 pandas 模块</h3><pre class="line-numbers language-python"><code class="language-python">pip install pandaspip install xlrd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用模块"><a href="#2-使用模块" class="headerlink" title="(2) 使用模块"></a>(2) 使用模块</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-转换"><a href="#3-转换" class="headerlink" title="(3) 转换"></a>(3) 转换</h3><ul><li>要是只有一个 sheet 这样可以</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> osurl <span class="token operator">=</span> <span class="token string">"./xml/测试数据.xls"</span>result_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result_path<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取到最后的文件名</span>result <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'./xml/测试数据.xls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>result<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'./xml/'</span> <span class="token operator">+</span> result_path<span class="token operator">+</span><span class="token string">'x'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 最后结果</span><span class="token comment" spellcheck="true"># 测试数据.xls变成测试数据.xlsx</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一个文件多个 sheet 必须用到循环</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> osurl <span class="token operator">=</span> <span class="token string">"./xml/测试数据.xls"</span>result_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result_path<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 字符串或者int类型可以</span>result <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'./xml/测试数据.xls'</span><span class="token punctuation">,</span> sheet_name<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个空的文件</span>final_path <span class="token operator">=</span> <span class="token string">'./xml/'</span> <span class="token operator">+</span> result_path <span class="token operator">+</span> <span class="token string">'x'</span>  <span class="token comment" spellcheck="true"># 设置路径和文件名</span>result <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>result<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>final_path<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 开始打开写入模式</span><span class="token comment" spellcheck="true"># 开启写句柄 否则后面的会覆盖</span><span class="token comment" spellcheck="true"># 下面这句必须有表示取消规则检查</span><span class="token comment" spellcheck="true"># pylint: disable=abstract-class-instantiated</span><span class="token keyword">with</span> pd<span class="token punctuation">.</span>ExcelWriter<span class="token punctuation">(</span><span class="token string">'./xml/'</span> <span class="token operator">+</span> result_path <span class="token operator">+</span> <span class="token string">'x'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> writer<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 要是全部表比如None或[0,1]多表的它返回的就是个字典选哟这样做</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            result <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>                <span class="token string">'./xml/测试数据.xls'</span><span class="token punctuation">,</span> sheet_name<span class="token operator">=</span>int<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>            result<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>writer<span class="token punctuation">,</span> sheet_name<span class="token operator">=</span><span class="token string">'Sheet'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'有问题'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装-openpyxl-模块"><a href="#安装-openpyxl-模块" class="headerlink" title="安装 openpyxl 模块"></a>安装 openpyxl 模块</h2><blockquote><p>openpyxl 只支持读取 xlsx 所以在使用前一定要确保用户名。可以通过 pandas 转化</p></blockquote><ul><li>安装模块</li></ul><pre class="line-numbers language-python"><code class="language-python">pip install openpyxl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="读取-Excel-文档"><a href="#读取-Excel-文档" class="headerlink" title="读取 Excel 文档"></a>读取 Excel 文档</h3><h4 id="1-用-openpyxl-模块-打开-Excel-文档"><a href="#1-用-openpyxl-模块-打开-Excel-文档" class="headerlink" title="(1) 用 openpyxl 模块 打开 Excel 文档"></a>(1) 用 openpyxl 模块 打开 Excel 文档</h4><ul><li>load_workbook()</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> openpyxlresult <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'./xml/测试数据.xlsx'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取到最终要操作的对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># &lt;class 'openpyxl.workbook.workbook.Workbook'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-获取到-Sheet"><a href="#2-获取到-Sheet" class="headerlink" title="(2) 获取到 Sheet"></a>(2) 获取到 Sheet</h4><ul><li><p>xxx.sheetnames 获取到所有 sheet 名字合集,他返回的是一个 list</p></li><li><p>xxx[‘Sheet1’] 这里特别强调的就是[]就是指定的 Sheet 名称,它返回的就是 ‘&lt;Worksheet “Sheet1”&gt;’</p></li><li><p>xxx.active 这里就是获取到活跃的 Sheet</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> openpyxlresult <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'./xml/测试数据.xlsx'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取到最终要操作的对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>sheetnames<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取到Excel所有的sheet名称</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token string">'Sheet1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取到Excel里面指定的Sheet内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>active<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取到活跃的Sheet内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>active<span class="token punctuation">.</span>title<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取到活跃的Sheet内容的title</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-从表中获取到单元格"><a href="#3-从表中获取到单元格" class="headerlink" title="(3) 从表中获取到单元格"></a>(3) 从表中获取到单元格</h4><ul><li>获取到一个单元格的数据</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> openpyxlresult <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'./xml/测试2.xlsx'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取到最终要操作的对象</span>Sheet_content <span class="token operator">=</span> result<span class="token punctuation">.</span>active  <span class="token comment" spellcheck="true"># 获取到活动的Sheet</span>Cell_content <span class="token operator">=</span> Sheet_content<span class="token punctuation">[</span><span class="token string">'K2'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 获取到单元格K2 指定的位置</span><span class="token keyword">print</span><span class="token punctuation">(</span>Cell_content<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取到单元格K2的内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>有的时候你不知道单元格 但是你知道行或者列, 这样也可以</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> openpyxlresult <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'./xml/测试数据.xlsx'</span><span class="token punctuation">)</span>Sheet <span class="token operator">=</span> result<span class="token punctuation">.</span>activeCell_content <span class="token operator">=</span> Sheet<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Cell_content<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 结果就是找到第二行列是12列的单元格数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>有的时候你需要获取特定的数据</li></ul><blockquote><p>比如我想获取到所有第 2 行,第 4 行，第 6 行,第 8 行匹配第 12 列的数据</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> openpyxlresult <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'./xml/测试数据.xlsx'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 加载XLSX</span>Sheet <span class="token operator">=</span> result<span class="token punctuation">.</span>active  <span class="token comment" spellcheck="true"># 获取到Sheet</span>result_content <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 空列表</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Cell_content <span class="token operator">=</span> Sheet<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>i<span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>    result_content<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Cell_content<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result_content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 结果就是找到第 2,4,6,8,行匹配第5列的数据</span><span class="token comment" spellcheck="true"># [4.8773, 4.9222, 5.0121, 4.8998]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>获取最大行和最大列</li></ul><blockquote><p>max_row 和 max_column</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> openpyxlresult <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'./xml/测试数据.xlsx'</span><span class="token punctuation">)</span>Sheet <span class="token operator">=</span> result<span class="token punctuation">.</span>activemaxrownum <span class="token operator">=</span> Sheet<span class="token punctuation">.</span>max_row  <span class="token comment" spellcheck="true"># 最大行</span>minrownum <span class="token operator">=</span> Sheet<span class="token punctuation">.</span>min_row  <span class="token comment" spellcheck="true"># 最小行</span>maxcolumnnum <span class="token operator">=</span> Sheet<span class="token punctuation">.</span>max_column <span class="token comment" spellcheck="true"># 最大列</span>mincolumnnum <span class="token operator">=</span> Sheet<span class="token punctuation">.</span>min_column  <span class="token comment" spellcheck="true"># 最小列</span><span class="token keyword">print</span><span class="token punctuation">(</span>maxrownum<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>minrownum<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>maxcolumnnum<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mincolumnnum<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-列字母和数字之间的转换"><a href="#4-列字母和数字之间的转换" class="headerlink" title="(4) 列字母和数字之间的转换"></a>(4) 列字母和数字之间的转换</h4><ul><li><p>要从字母转换到数字,就需要用 column_index_from_string()</p></li><li><p>要从数字转换到字母,就需要用 get_column_letter()函数</p></li><li><p>举个例子它自动帮你把 13 变成 M,也可以帮你把 M 变成 13</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> openpyxl<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>utils <span class="token keyword">import</span> get_column_letter<span class="token punctuation">,</span> column_index_from_stringcell_result <span class="token operator">=</span> <span class="token number">13</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>cell_result<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 它的类型是int</span>cell_result_str <span class="token operator">=</span> get_column_letter<span class="token punctuation">(</span>cell_result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cell_result_str<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 结果M</span>cell_str <span class="token operator">=</span> <span class="token string">'AA'</span>cell_result_num <span class="token operator">=</span> column_index_from_string<span class="token punctuation">(</span>cell_str<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cell_result_num<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># M</span><span class="token comment" spellcheck="true"># 27</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-读取-Excel-中每一行和列"><a href="#5-读取-Excel-中每一行和列" class="headerlink" title="(5)读取 Excel 中每一行和列"></a>(5)读取 Excel 中每一行和列</h4><ul><li>获取列的内容</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> openpyxlresult <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">"./xml/测试数据.xlsx"</span><span class="token punctuation">)</span>Sheet <span class="token operator">=</span> result<span class="token punctuation">.</span>active  <span class="token comment" spellcheck="true"># 获取到活跃的Sheet</span><span class="token keyword">print</span><span class="token punctuation">(</span>Sheet<span class="token punctuation">)</span>Column_content <span class="token operator">=</span> list<span class="token punctuation">(</span>Sheet<span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 必须要加入list 因为返回的是生成器,第一列从0开始</span><span class="token keyword">for</span> content <span class="token keyword">in</span> Column_content<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取到第一列所有的数据</span><span class="token comment" spellcheck="true"># 这样第一列的内容就出来了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>获取行的内容</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> openpyxlresult <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">"./xml/测试数据.xlsx"</span><span class="token punctuation">)</span>Sheet <span class="token operator">=</span> result<span class="token punctuation">.</span>active  <span class="token comment" spellcheck="true"># 获取到活跃的Sheet</span><span class="token keyword">print</span><span class="token punctuation">(</span>Sheet<span class="token punctuation">)</span>Row_content <span class="token operator">=</span> list<span class="token punctuation">(</span>Sheet<span class="token punctuation">.</span>rows<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 必须要加入list 因为返回的是生成器,第一列从0开始</span><span class="token keyword">for</span> content <span class="token keyword">in</span> Row_content<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取到第一列所有的数据</span><span class="token comment" spellcheck="true"># 这样第一行的内容都出来了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="写入-Excel-模块"><a href="#写入-Excel-模块" class="headerlink" title="写入 Excel 模块"></a>写入 Excel 模块</h3><h4 id="创建并保存-Excel-文档"><a href="#创建并保存-Excel-文档" class="headerlink" title="创建并保存 Excel 文档"></a>创建并保存 Excel 文档</h4><ul><li>openpyxl.Workbook()</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> openpyxlwb <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span>activesheet<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"第一页"</span>  <span class="token comment" spellcheck="true"># 给Sheet起了名字</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'./第一次测试.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建和删除-sheet"><a href="#创建和删除-sheet" class="headerlink" title="创建和删除 sheet"></a>创建和删除 sheet</h4><ul><li><p>create_sheet() 创建</p></li><li><p>remove() 删除</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> openpyxlwb <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建</span>wb<span class="token punctuation">.</span>create_sheet<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"第一页"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建第一个sheet</span>wb<span class="token punctuation">.</span>create_sheet<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"第二页"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建第二个sheet</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'./第一次测试.xlsx'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 创建了一个Excel 2个sheet</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> openpyxlwb <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建</span>wb<span class="token punctuation">.</span>create_sheet<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"第一页"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建第一个sheet</span>wb<span class="token punctuation">.</span>create_sheet<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"第二页"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建第二个sheet</span><span class="token comment" spellcheck="true"># 删除</span>wb<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>wb<span class="token punctuation">[</span><span class="token string">'第二页'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'./第一次测试.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建一个-excel-文件-并写入不同的内容"><a href="#创建一个-excel-文件-并写入不同的内容" class="headerlink" title="创建一个 excel 文件,并写入不同的内容"></a>创建一个 excel 文件,并写入不同的内容</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> datetime<span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbookwb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建文件对象</span><span class="token comment" spellcheck="true"># grab the active worksheet</span>ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>active  <span class="token comment" spellcheck="true"># 获取第一个sheet</span><span class="token comment" spellcheck="true"># Data can be assigned directly to cells</span>ws<span class="token punctuation">[</span><span class="token string">'A1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">42</span>  <span class="token comment" spellcheck="true"># 写入数字</span>ws<span class="token punctuation">[</span><span class="token string">'B1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"你好"</span><span class="token operator">+</span><span class="token string">"automation test"</span>  <span class="token comment" spellcheck="true"># 写入中文（unicode中文也可）</span><span class="token comment" spellcheck="true"># Rows can also be appended</span>ws<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 写入多个单元格</span><span class="token comment" spellcheck="true"># Python types will automatically be converted</span>ws<span class="token punctuation">[</span><span class="token string">'A2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 写入一个当前时间</span><span class="token comment" spellcheck="true"># 写入一个自定义的时间格式</span>ws<span class="token punctuation">[</span><span class="token string">'A3'</span><span class="token punctuation">]</span> <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y{y}%m{m}%d{d} %H{h}%M{f}%S{s}'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>    y<span class="token operator">=</span><span class="token string">'年'</span><span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token string">'月'</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token string">'日'</span><span class="token punctuation">,</span> h<span class="token operator">=</span><span class="token string">'时'</span><span class="token punctuation">,</span> f<span class="token operator">=</span><span class="token string">'分'</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token string">'秒'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Save the file</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"./example.xlsx"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建-sheet"><a href="#创建-sheet" class="headerlink" title="创建 sheet"></a>创建 sheet</h4><ul><li><p>create_sheet(名字,位置)</p></li><li><p>ws1.sheet_properties.tabColor 设置 tab 颜色</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbookwb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>ws1 <span class="token operator">=</span> wb<span class="token punctuation">.</span>create_sheet<span class="token punctuation">(</span><span class="token string">"Mysheet"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建一个sheet</span>ws1<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"New Title"</span>  <span class="token comment" spellcheck="true"># 设定一个sheet的名字</span>ws2 <span class="token operator">=</span> wb<span class="token punctuation">.</span>create_sheet<span class="token punctuation">(</span><span class="token string">"Mysheet"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 设定sheet的插入位置 默认插在后面</span>ws2<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"你好"</span>  <span class="token comment" spellcheck="true"># 设定一个sheet的名字 必须是Unicode</span>ws1<span class="token punctuation">.</span>sheet_properties<span class="token punctuation">.</span>tabColor <span class="token operator">=</span> <span class="token string">"1072BA"</span>  <span class="token comment" spellcheck="true"># 设定sheet的标签的背景颜色</span><span class="token comment" spellcheck="true"># 获取全部sheet 的名字，遍历sheet名字</span><span class="token keyword">for</span> content <span class="token keyword">in</span> wb<span class="token punctuation">.</span>sheetnames<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">for</span> sheet <span class="token keyword">in</span> wb<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sheet<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 复制一个sheet</span>wb<span class="token punctuation">[</span><span class="token string">"New Title"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"A1"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"zeke"</span>source <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">"New Title"</span><span class="token punctuation">]</span>target <span class="token operator">=</span> wb<span class="token punctuation">.</span>copy_worksheet<span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># w3 = wb.copy_worksheet(wb['new title'])</span><span class="token comment" spellcheck="true"># ws3.title = 'new2'</span><span class="token comment" spellcheck="true"># wb.copy_worksheet(wb['new title']).title = 'hello'</span><span class="token comment" spellcheck="true"># Save the file</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"./example.xlsx"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="操作单元格"><a href="#操作单元格" class="headerlink" title="操作单元格"></a>操作单元格</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbookwb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>ws1 <span class="token operator">=</span> wb<span class="token punctuation">.</span>create_sheet<span class="token punctuation">(</span><span class="token string">"Mysheet"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建一个sheet</span>ws1<span class="token punctuation">[</span><span class="token string">"A1"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123.11</span>ws1<span class="token punctuation">[</span><span class="token string">"B2"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"你好"</span>d <span class="token operator">=</span> ws1<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ws1<span class="token punctuation">[</span><span class="token string">"A1"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ws1<span class="token punctuation">[</span><span class="token string">"B2"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Save the file</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"./example.xlsx"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="操作批量的单元格"><a href="#操作批量的单元格" class="headerlink" title="操作批量的单元格"></a>操作批量的单元格</h4><ul><li>xxx[“A:C”] 操作多列</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbookwb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>ws1 <span class="token operator">=</span> wb<span class="token punctuation">.</span>create_sheet<span class="token punctuation">(</span><span class="token string">"Mysheet"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建一个sheet</span>ws1<span class="token punctuation">[</span><span class="token string">"A1"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>ws1<span class="token punctuation">[</span><span class="token string">"A2"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>ws1<span class="token punctuation">[</span><span class="token string">"A3"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>ws1<span class="token punctuation">[</span><span class="token string">"B1"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>ws1<span class="token punctuation">[</span><span class="token string">"B2"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span>ws1<span class="token punctuation">[</span><span class="token string">"B3"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span>ws1<span class="token punctuation">[</span><span class="token string">"C1"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span>ws1<span class="token punctuation">[</span><span class="token string">"C2"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span>ws1<span class="token punctuation">[</span><span class="token string">"C3"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token comment" spellcheck="true"># 操作单列</span><span class="token keyword">print</span><span class="token punctuation">(</span>ws1<span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> cell <span class="token keyword">in</span> ws1<span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 操作多列,获取每一个值</span><span class="token keyword">print</span><span class="token punctuation">(</span>ws1<span class="token punctuation">[</span><span class="token string">"A:C"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> column <span class="token keyword">in</span> ws1<span class="token punctuation">[</span><span class="token string">"A:C"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> cell <span class="token keyword">in</span> column<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 操作多行</span>row_range <span class="token operator">=</span> ws1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>row_range<span class="token punctuation">)</span><span class="token keyword">for</span> row <span class="token keyword">in</span> row_range<span class="token punctuation">:</span>    <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">for</span> row <span class="token keyword">in</span> ws1<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> min_col<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> max_col<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> max_row<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取所有行</span><span class="token keyword">print</span><span class="token punctuation">(</span>ws1<span class="token punctuation">.</span>rows<span class="token punctuation">)</span><span class="token keyword">for</span> row <span class="token keyword">in</span> ws1<span class="token punctuation">.</span>rows<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取所有列</span><span class="token keyword">print</span><span class="token punctuation">(</span>ws1<span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token keyword">for</span> col <span class="token keyword">in</span> ws1<span class="token punctuation">.</span>columns<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"./example.xlsx"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="操作已经存在的文件"><a href="#操作已经存在的文件" class="headerlink" title="操作已经存在的文件"></a>操作已经存在的文件</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook<span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbookwb <span class="token operator">=</span> load_workbook<span class="token punctuation">(</span><span class="token string">"./example.xlsx"</span><span class="token punctuation">)</span>wb<span class="token punctuation">.</span>guess_types <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token comment" spellcheck="true"># 猜测格式类型</span>ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>activews<span class="token punctuation">[</span><span class="token string">"D1"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"12%"</span><span class="token keyword">print</span><span class="token punctuation">(</span>ws<span class="token punctuation">[</span><span class="token string">"D1"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Save the file</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"./example.xlsx"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 注意如果原文件有一些图片或者图标，则保存的时候可能会导致图片丢失</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="单元格类型"><a href="#单元格类型" class="headerlink" title="单元格类型"></a>单元格类型</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook<span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook<span class="token keyword">import</span> datetimewb <span class="token operator">=</span> load_workbook<span class="token punctuation">(</span><span class="token string">'./example.xlsx'</span><span class="token punctuation">)</span>ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>activewb<span class="token punctuation">.</span>guess_types <span class="token operator">=</span> <span class="token boolean">True</span>ws<span class="token punctuation">[</span><span class="token string">"A1"</span><span class="token punctuation">]</span> <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2010</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ws<span class="token punctuation">[</span><span class="token string">"A1"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>number_format<span class="token punctuation">)</span>ws<span class="token punctuation">[</span><span class="token string">"A2"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"12%"</span><span class="token keyword">print</span><span class="token punctuation">(</span>ws<span class="token punctuation">[</span><span class="token string">"A2"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>number_format<span class="token punctuation">)</span>ws<span class="token punctuation">[</span><span class="token string">"A3"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.1</span><span class="token keyword">print</span><span class="token punctuation">(</span>ws<span class="token punctuation">[</span><span class="token string">"A4"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>number_format<span class="token punctuation">)</span>ws<span class="token punctuation">[</span><span class="token string">"A4"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"中国"</span><span class="token keyword">print</span><span class="token punctuation">(</span>ws<span class="token punctuation">[</span><span class="token string">"A5"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>number_format<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Save the file</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"./example.xlsx"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果是常规，显示general,如果是数字，显示'0.00_ '，如果是百分数显示0%</span><span class="token comment" spellcheck="true"># 数字需要在Excel中设置数字类型，直接写入的数字是常规类型</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># yyyy-mm-dd h:mm:ss</span><span class="token comment" spellcheck="true"># General</span><span class="token comment" spellcheck="true"># General</span><span class="token comment" spellcheck="true"># General</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用公式"><a href="#使用公式" class="headerlink" title="使用公式"></a>使用公式</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook<span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbookwb <span class="token operator">=</span> load_workbook<span class="token punctuation">(</span><span class="token string">'./example.xlsx'</span><span class="token punctuation">)</span>ws1 <span class="token operator">=</span> wb<span class="token punctuation">.</span>activews1<span class="token punctuation">[</span><span class="token string">"A1"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>ws1<span class="token punctuation">[</span><span class="token string">"A2"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>ws1<span class="token punctuation">[</span><span class="token string">"A3"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>ws1<span class="token punctuation">[</span><span class="token string">"A4"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"=SUM(1, 1)"</span>ws1<span class="token punctuation">[</span><span class="token string">"A5"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"=SUM(A1:A3)"</span><span class="token keyword">print</span><span class="token punctuation">(</span>ws1<span class="token punctuation">[</span><span class="token string">"A4"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印的是公式内容，不是公式计算后的值,程序无法取到计算后的值</span><span class="token keyword">print</span><span class="token punctuation">(</span>ws1<span class="token punctuation">[</span><span class="token string">"A5"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印的是公式内容，不是公式计算后的值,程序无法取到计算后的值</span><span class="token comment" spellcheck="true"># Save the file</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"./example.xlsx"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h4><ul><li><p>合并单元格 merge_cells</p></li><li><p>拆分单元格 unmerge_cells</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook<span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbookwb <span class="token operator">=</span> load_workbook<span class="token punctuation">(</span><span class="token string">'./example.xlsx'</span><span class="token punctuation">)</span>ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>active<span class="token comment" spellcheck="true"># ws.merge_cells('A2:D2')</span><span class="token comment" spellcheck="true"># ws.unmerge_cells('A2:D2')  # 合并后的单元格，脚本单独执行拆分操作会报错，需要重新执行合并操作再拆分</span><span class="token comment" spellcheck="true"># or equivalently</span>ws<span class="token punctuation">.</span>merge_cells<span class="token punctuation">(</span>start_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> start_column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> end_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> end_column<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>ws<span class="token punctuation">.</span>unmerge_cells<span class="token punctuation">(</span>start_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> start_column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> end_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> end_column<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Save the file</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"./example.xlsx"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="插入一个图片"><a href="#插入一个图片" class="headerlink" title="插入一个图片"></a>插入一个图片</h4><ul><li><p>插入之前必须安装 pip install pillow</p></li><li><p>add_image</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>drawing<span class="token punctuation">.</span>image <span class="token keyword">import</span> Imagewb <span class="token operator">=</span> load_workbook<span class="token punctuation">(</span><span class="token string">'./example.xlsx'</span><span class="token punctuation">)</span>ws1 <span class="token operator">=</span> wb<span class="token punctuation">.</span>activeimg <span class="token operator">=</span> Image<span class="token punctuation">(</span><span class="token string">'./img/1.jpg'</span><span class="token punctuation">)</span>ws1<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">'A1'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Save the file</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"./example.xlsx"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="隐藏单元格"><a href="#隐藏单元格" class="headerlink" title="隐藏单元格"></a>隐藏单元格</h4><ul><li>ws1.column_dimensions.group(‘A’, ‘D’, hidden=True) # 隐藏 a 到 d 列范围内的列</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>drawing<span class="token punctuation">.</span>image <span class="token keyword">import</span> Imagewb <span class="token operator">=</span> load_workbook<span class="token punctuation">(</span><span class="token string">'./example.xlsx'</span><span class="token punctuation">)</span>ws1 <span class="token operator">=</span> wb<span class="token punctuation">.</span>activews1<span class="token punctuation">.</span>column_dimensions<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> hidden<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 隐藏a到d列范围内的列</span><span class="token comment" spellcheck="true"># ws1.row_dimensions 无group方法</span><span class="token comment" spellcheck="true"># Save the file</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"./example.xlsx"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设定一个表格区域-并设定表格的形式"><a href="#设定一个表格区域-并设定表格的形式" class="headerlink" title="设定一个表格区域,并设定表格的形式"></a>设定一个表格区域,并设定表格的形式</h4><ul><li>Table</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook<span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>worksheet<span class="token punctuation">.</span>table <span class="token keyword">import</span> Table<span class="token punctuation">,</span> TableStyleInfowb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>activedata <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'Apples'</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'Pears'</span><span class="token punctuation">,</span>   <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'Bananas'</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">,</span> <span class="token number">6500</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'Oranges'</span><span class="token punctuation">,</span>  <span class="token number">500</span><span class="token punctuation">,</span>  <span class="token number">300</span><span class="token punctuation">,</span>  <span class="token number">200</span><span class="token punctuation">,</span>  <span class="token number">700</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># add column headings. NB. these must be strings</span>ws<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"Fruit"</span><span class="token punctuation">,</span> <span class="token string">"2011"</span><span class="token punctuation">,</span> <span class="token string">"2012"</span><span class="token punctuation">,</span> <span class="token string">"2013"</span><span class="token punctuation">,</span> <span class="token string">"2014"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> row <span class="token keyword">in</span> data<span class="token punctuation">:</span>    ws<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">)</span>tab <span class="token operator">=</span> Table<span class="token punctuation">(</span>displayName<span class="token operator">=</span><span class="token string">"Table1"</span><span class="token punctuation">,</span> ref<span class="token operator">=</span><span class="token string">"A1:E5"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Add a default style with striped rows and banded columns</span>style <span class="token operator">=</span> TableStyleInfo<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"TableStyleMedium9"</span><span class="token punctuation">,</span> showFirstColumn<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                       showLastColumn<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> showRowStripes<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> showColumnStripes<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第一列是否和样式第一行颜色一行，第二列是否···</span><span class="token comment" spellcheck="true"># 是否隔行换色，是否隔列换色</span>tab<span class="token punctuation">.</span>tableStyleInfo <span class="token operator">=</span> stylews<span class="token punctuation">.</span>add_table<span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Save the file</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"./example.xlsx"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="给单元格设置样式"><a href="#给单元格设置样式" class="headerlink" title="给单元格设置样式"></a>给单元格设置样式</h4><ul><li>Font</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>styles <span class="token keyword">import</span> colors<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>styles <span class="token keyword">import</span> Fontwb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>activea1 <span class="token operator">=</span> ws<span class="token punctuation">[</span><span class="token string">'A1'</span><span class="token punctuation">]</span>d4 <span class="token operator">=</span> ws<span class="token punctuation">[</span><span class="token string">'D4'</span><span class="token punctuation">]</span>ft <span class="token operator">=</span> Font<span class="token punctuation">(</span>color<span class="token operator">=</span>colors<span class="token punctuation">.</span>RED<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># color="FFBB00"，颜色编码也可以设定颜色</span>a1<span class="token punctuation">.</span>font <span class="token operator">=</span> ftd4<span class="token punctuation">.</span>font <span class="token operator">=</span> ft<span class="token comment" spellcheck="true"># If you want to change the color of a Font, you need to reassign it::</span><span class="token comment" spellcheck="true"># italic 倾斜字体</span>a1<span class="token punctuation">.</span>font <span class="token operator">=</span> Font<span class="token punctuation">(</span>color<span class="token operator">=</span>colors<span class="token punctuation">.</span>RED<span class="token punctuation">,</span> italic<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># the change only affects A1</span>a1<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token comment" spellcheck="true"># Save the file</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"./example.xlsx"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设定字体和大小"><a href="#设定字体和大小" class="headerlink" title="设定字体和大小"></a>设定字体和大小</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> copy <span class="token keyword">import</span> copy<span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>styles <span class="token keyword">import</span> colors<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>styles <span class="token keyword">import</span> Fontwb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>activea1 <span class="token operator">=</span> ws<span class="token punctuation">[</span><span class="token string">'A1'</span><span class="token punctuation">]</span>d4 <span class="token operator">=</span> ws<span class="token punctuation">[</span><span class="token string">'D4'</span><span class="token punctuation">]</span>a1<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"abc"</span>ft1 <span class="token operator">=</span> Font<span class="token punctuation">(</span>name<span class="token operator">=</span>u<span class="token string">'宋体'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span>ft2 <span class="token operator">=</span> copy<span class="token punctuation">(</span>ft1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 复制字体对象</span>ft2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tahoma"</span><span class="token keyword">print</span><span class="token punctuation">(</span>ft1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ft2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ft2<span class="token punctuation">.</span>size<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># copied from the</span>a1<span class="token punctuation">.</span>font <span class="token operator">=</span> ft1<span class="token comment" spellcheck="true"># Save the file</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"./example.xlsx"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置行和列的字体"><a href="#设置行和列的字体" class="headerlink" title="设置行和列的字体"></a>设置行和列的字体</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>styles <span class="token keyword">import</span> Fontwb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>activecol <span class="token operator">=</span> ws<span class="token punctuation">.</span>column_dimensions<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span>col<span class="token punctuation">.</span>font <span class="token operator">=</span> Font<span class="token punctuation">(</span>bold<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将A列设定为粗体</span>row <span class="token operator">=</span> ws<span class="token punctuation">.</span>row_dimensions<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>row<span class="token punctuation">.</span>font <span class="token operator">=</span> Font<span class="token punctuation">(</span>underline<span class="token operator">=</span><span class="token string">"single"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将第一行设定为下划线格式</span><span class="token comment" spellcheck="true"># 有的时候行和列在一行比如A1 那么后写的会覆盖前面的样式</span><span class="token comment" spellcheck="true"># Save the file</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"./example.xlsx"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置单元格的边框-字体-颜色-大小-和边框背景色"><a href="#设置单元格的边框-字体-颜色-大小-和边框背景色" class="headerlink" title="设置单元格的边框 字体 颜色 大小 和边框背景色"></a>设置单元格的边框 字体 颜色 大小 和边框背景色</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>styles <span class="token keyword">import</span> Font<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>styles <span class="token keyword">import</span> NamedStyle<span class="token punctuation">,</span> Font<span class="token punctuation">,</span> Border<span class="token punctuation">,</span> Side<span class="token punctuation">,</span> PatternFillwb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>activehighlight <span class="token operator">=</span> NamedStyle<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"highlight"</span><span class="token punctuation">)</span>highlight<span class="token punctuation">.</span>font <span class="token operator">=</span> Font<span class="token punctuation">(</span>bold<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">"ff0100"</span><span class="token punctuation">)</span>highlight<span class="token punctuation">.</span>fill <span class="token operator">=</span> PatternFill<span class="token punctuation">(</span><span class="token string">"solid"</span><span class="token punctuation">,</span> fgColor<span class="token operator">=</span><span class="token string">"DDDDDD"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 背景填充</span>bd <span class="token operator">=</span> Side<span class="token punctuation">(</span>style<span class="token operator">=</span><span class="token string">'thick'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">"000000"</span><span class="token punctuation">)</span>highlight<span class="token punctuation">.</span>border <span class="token operator">=</span> Border<span class="token punctuation">(</span>left<span class="token operator">=</span>bd<span class="token punctuation">,</span> top<span class="token operator">=</span>bd<span class="token punctuation">,</span> right<span class="token operator">=</span>bd<span class="token punctuation">,</span> bottom<span class="token operator">=</span>bd<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dir<span class="token punctuation">(</span>ws<span class="token punctuation">[</span><span class="token string">"A1"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ws<span class="token punctuation">[</span><span class="token string">"A1"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style <span class="token operator">=</span> highlight<span class="token comment" spellcheck="true"># Save the file</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"./example.xlsx"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用的样式和属性"><a href="#常用的样式和属性" class="headerlink" title="常用的样式和属性"></a>常用的样式和属性</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>styles <span class="token keyword">import</span> Font<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>styles <span class="token keyword">import</span> NamedStyle<span class="token punctuation">,</span> Font<span class="token punctuation">,</span> Border<span class="token punctuation">,</span> Side<span class="token punctuation">,</span> PatternFill<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>styles <span class="token keyword">import</span> PatternFill<span class="token punctuation">,</span> Border<span class="token punctuation">,</span> Side<span class="token punctuation">,</span> Alignment<span class="token punctuation">,</span> Protection<span class="token punctuation">,</span> Fontwb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>activeft <span class="token operator">=</span> Font<span class="token punctuation">(</span>name<span class="token operator">=</span>u<span class="token string">'微软雅黑'</span><span class="token punctuation">,</span>          size<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span>          bold<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>          italic<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>          vertAlign<span class="token operator">=</span>None<span class="token punctuation">,</span>          underline<span class="token operator">=</span><span class="token string">'none'</span><span class="token punctuation">,</span>          strike<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>          color<span class="token operator">=</span><span class="token string">'FF000000'</span><span class="token punctuation">)</span>fill <span class="token operator">=</span> PatternFill<span class="token punctuation">(</span>fill_type<span class="token operator">=</span><span class="token string">"solid"</span><span class="token punctuation">,</span>                   start_color<span class="token operator">=</span><span class="token string">'FFEEFFFF'</span><span class="token punctuation">,</span>                   end_color<span class="token operator">=</span><span class="token string">'FF001100'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 边框可以选择的值为：'hair', 'medium', 'dashDot', 'dotted', 'mediumDashDot', 'dashed', 'mediumDashed', 'mediumDashDotDot', 'dashDotDot', 'slantDashDot', 'double', 'thick', 'thin']</span><span class="token comment" spellcheck="true"># diagonal 表示对角线</span>bd <span class="token operator">=</span> Border<span class="token punctuation">(</span>left<span class="token operator">=</span>Side<span class="token punctuation">(</span>border_style<span class="token operator">=</span><span class="token string">"thin"</span><span class="token punctuation">,</span>                      color<span class="token operator">=</span><span class="token string">'FF001000'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            right<span class="token operator">=</span>Side<span class="token punctuation">(</span>border_style<span class="token operator">=</span><span class="token string">"thin"</span><span class="token punctuation">,</span>                       color<span class="token operator">=</span><span class="token string">'FF110000'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            top<span class="token operator">=</span>Side<span class="token punctuation">(</span>border_style<span class="token operator">=</span><span class="token string">"thin"</span><span class="token punctuation">,</span>                     color<span class="token operator">=</span><span class="token string">'FF110000'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            bottom<span class="token operator">=</span>Side<span class="token punctuation">(</span>border_style<span class="token operator">=</span><span class="token string">"thin"</span><span class="token punctuation">,</span>                        color<span class="token operator">=</span><span class="token string">'FF110000'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            diagonal<span class="token operator">=</span>Side<span class="token punctuation">(</span>border_style<span class="token operator">=</span>None<span class="token punctuation">,</span>                          color<span class="token operator">=</span><span class="token string">'FF000000'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            diagonal_direction<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>            outline<span class="token operator">=</span>Side<span class="token punctuation">(</span>border_style<span class="token operator">=</span>None<span class="token punctuation">,</span>                         color<span class="token operator">=</span><span class="token string">'FF000000'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            vertical<span class="token operator">=</span>Side<span class="token punctuation">(</span>border_style<span class="token operator">=</span>None<span class="token punctuation">,</span>                          color<span class="token operator">=</span><span class="token string">'FF000000'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            horizontal<span class="token operator">=</span>Side<span class="token punctuation">(</span>border_style<span class="token operator">=</span>None<span class="token punctuation">,</span>                            color<span class="token operator">=</span><span class="token string">'FF110000'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>alignment <span class="token operator">=</span> Alignment<span class="token punctuation">(</span>horizontal<span class="token operator">=</span><span class="token string">'general'</span><span class="token punctuation">,</span>                      vertical<span class="token operator">=</span><span class="token string">'bottom'</span><span class="token punctuation">,</span>                      text_rotation<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>                      wrap_text<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                      shrink_to_fit<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                      indent<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>number_format <span class="token operator">=</span> <span class="token string">'General'</span>protection <span class="token operator">=</span> Protection<span class="token punctuation">(</span>locked<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                        hidden<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>ws<span class="token punctuation">[</span><span class="token string">"B5"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>font <span class="token operator">=</span> ftws<span class="token punctuation">[</span><span class="token string">"B5"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fill <span class="token operator">=</span> fillws<span class="token punctuation">[</span><span class="token string">"B5"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>border <span class="token operator">=</span> bdws<span class="token punctuation">[</span><span class="token string">"B5"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>alignment <span class="token operator">=</span> alignmentws<span class="token punctuation">[</span><span class="token string">"B5"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>number_format <span class="token operator">=</span> number_formatws<span class="token punctuation">[</span><span class="token string">"B5"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"zeke"</span><span class="token comment" spellcheck="true"># Save the file</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"./example.xlsx"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从 Web 中抓取信息</title>
      <link href="/2020/02/10/pythonresult12/"/>
      <url>/2020/02/10/pythonresult12/</url>
      
        <content type="html"><![CDATA[<h1 id="从-Web-中抓取信息"><a href="#从-Web-中抓取信息" class="headerlink" title="从 Web 中抓取信息"></a>从 Web 中抓取信息</h1><blockquote><p>重复别人所说的话，只需要教育；而要挑战别人所说的话，则需要头脑。——玛丽·佩蒂博恩·普尔</p></blockquote><h2 id="利用-webbrowser-模块-访问页面"><a href="#利用-webbrowser-模块-访问页面" class="headerlink" title="利用 webbrowser 模块 访问页面"></a>利用 webbrowser 模块 访问页面</h2><ul><li><p>必须利用 webbrowser 模块 提供的函数 open(地址)</p></li><li><p>这样他就会自动帮你访问百度网址</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> webbrowserwebbrowser<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="利用-request-模块从-web-下载文件"><a href="#利用-request-模块从-web-下载文件" class="headerlink" title="利用 request 模块从 web 下载文件"></a>利用 request 模块从 web 下载文件</h3><ul><li>request 模块让你很容易从 Web 上下载文件,不必担心链接问题等等。request 必须安装</li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre class="line-numbers language-python"><code class="language-python">pip install requests<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="使用-requests-模块"><a href="#使用-requests-模块" class="headerlink" title="使用 requests 模块"></a>使用 requests 模块</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="使用-requests-函数下载一个网页"><a href="#使用-requests-函数下载一个网页" class="headerlink" title="使用 requests() 函数下载一个网页"></a>使用 requests() 函数下载一个网页</h4><ul><li>成功 res.status_code</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requestsres <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://jsopy.gitee.io/medias/banner/1.jpg'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># if (res.status_code == requests.codes.ok):</span><span class="token comment" spellcheck="true">#     print("对了")</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 状态码 请求成功就是200 失败就是404</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>失败的时候最稳妥的是调用 raise_for_status()这样就会抛出异常,不会让程序崩溃</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requestsres <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://jsopy.gitee.io/medias/banner3/1.jpg'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    res<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有请求到"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="将下载的文件保存到硬盘"><a href="#将下载的文件保存到硬盘" class="headerlink" title="将下载的文件保存到硬盘"></a>将下载的文件保存到硬盘</h4><ul><li>需要利用 with open 必须是 wb 形式 和 requests 模块 和 res.iter_content</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requestsres <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.gutenberg.org/cache/epub/1112/pg1112.txt'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    res<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./downland.txt"</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> item<span class="token punctuation">:</span>        <span class="token keyword">for</span> chunk <span class="token keyword">in</span> res<span class="token punctuation">.</span>iter_content<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            item<span class="token punctuation">.</span>write<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有请求到"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果就是请求到文件 存到downland.txt里面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用-BeautifulSoup-模块解析-HTML"><a href="#用-BeautifulSoup-模块解析-HTML" class="headerlink" title="用 BeautifulSoup 模块解析 HTML"></a>用 BeautifulSoup 模块解析 HTML</h3><h4 id="BeautifulSoup-安装"><a href="#BeautifulSoup-安装" class="headerlink" title="BeautifulSoup 安装"></a>BeautifulSoup 安装</h4><pre class="line-numbers language-python"><code class="language-python">pip install beautifulsoup4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="从-HTML-创建一个-BeautifulSoup-对象"><a href="#从-HTML-创建一个-BeautifulSoup-对象" class="headerlink" title="从 HTML 创建一个 BeautifulSoup 对象"></a>从 HTML 创建一个 BeautifulSoup 对象</h4><ul><li>从网页中</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> bs4res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.17cry.com/'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    res<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>    example <span class="token operator">=</span> bs4<span class="token punctuation">.</span>BeautifulSoup<span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># BeautifulSoup 对象</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有请求到"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果 &lt;class 'bs4.BeautifulSoup'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>也可以从文件中</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> bs4<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'./index.html'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> item<span class="token punctuation">:</span>        result <span class="token operator">=</span> bs4<span class="token punctuation">.</span>BeautifulSoup<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有请求到"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="用-select-方法寻找元素"><a href="#用-select-方法寻找元素" class="headerlink" title="用 select 方法寻找元素"></a>用 select 方法寻找元素</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> bs4res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.17cry.com/'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    res<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>    example <span class="token operator">=</span> bs4<span class="token punctuation">.</span>BeautifulSoup<span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># BeautifulSoup 对象</span>    result <span class="token operator">=</span> example<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 找到ul元素</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有请求到"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果 找到ul的元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>选择器属性类似 css 选择器</li></ul><table><thead><tr><th>选择器</th><th>匹配</th></tr></thead><tbody><tr><td>soup.select(‘div’)</td><td>找到名为 div 的元素</td></tr><tr><td>soup.select(‘#haha’)</td><td>找到 id 是 haha 的元素</td></tr><tr><td>soup.select(‘.haha’)</td><td>找到类是 haha 的元素</td></tr><tr><td>soup.select(‘div span’)</td><td>找到所在 div 元素之内的的 span 元素</td></tr><tr><td>soup.select(‘div&gt;span’)</td><td>找到直接在 div 元素之内的 span 元素,中间没有其他的元素</td></tr></tbody></table><ul><li>这个时候你想要获取到的是中国字就需要转码实现</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> bs4res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.17cry.com/'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    res<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf8"</span>  <span class="token comment" spellcheck="true"># 或者gb18030</span>    example <span class="token operator">=</span> bs4<span class="token punctuation">.</span>BeautifulSoup<span class="token punctuation">(</span>        res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># BeautifulSoup 对象</span>    result <span class="token operator">=</span> example<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 找到a元素</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>getText<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取到内容</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有请求到"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># [&lt;li>后续敬请期待&lt;/li>, &lt;li>&lt;a href="http://www.beian.miit.gov.cn" style="width:100%;height:100%;display:block;" target="_blank">网站备案号:津ICP备15001525号&lt;/a>&lt;/li>]</span><span class="token comment" spellcheck="true"># 后续敬请期待</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出元素的属性"><a href="#输出元素的属性" class="headerlink" title="输出元素的属性"></a>输出元素的属性</h4><ul><li><p>get(属性)</p></li><li><p>attrs 全部属性</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> bs4res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.17cry.com/'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    res<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf8"</span>  <span class="token comment" spellcheck="true"># 或者gb18030</span>    example <span class="token operator">=</span> bs4<span class="token punctuation">.</span>BeautifulSoup<span class="token punctuation">(</span>        res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># BeautifulSoup 对象</span>    result <span class="token operator">=</span> example<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 找到a元素</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>attrs<span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有请求到"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># width:100%;height:100%;display:block;</span><span class="token comment" spellcheck="true"># {'href': 'http://www.beian.miit.gov.cn', 'target': '_blank', 'style': 'width:100%;height:100%;display:block;'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="下载网页上所有图片"><a href="#下载网页上所有图片" class="headerlink" title="下载网页上所有图片"></a>下载网页上所有图片</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> bs4<span class="token keyword">import</span> osurl <span class="token operator">=</span> <span class="token string">'https://jsopy.gitee.io/'</span>res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    res<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf8'</span>    result <span class="token operator">=</span> bs4<span class="token punctuation">.</span>BeautifulSoup<span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    result_img <span class="token operator">=</span> result<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取到页面上所有图片的地址</span>    os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> content <span class="token keyword">in</span> result_img<span class="token punctuation">:</span>        imgurl <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取到单个图片的地址</span>        name <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>imgurl<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 只返回文件的最后名字 例如logo2.png</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>imgurl<span class="token punctuation">)</span>        result_img_item <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> imgurl<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取到图片信息</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'./img/'</span> <span class="token operator">+</span> name<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> item<span class="token punctuation">:</span>            <span class="token keyword">for</span> chunk <span class="token keyword">in</span> result_img_item<span class="token punctuation">:</span>                item<span class="token punctuation">.</span>write<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over"</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有请求到"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调试</title>
      <link href="/2020/02/09/pythonresult11/"/>
      <url>/2020/02/09/pythonresult11/</url>
      
        <content type="html"><![CDATA[<h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><blockquote><p>学问是异常珍贵的东西，从任何源泉吸收都不可耻。——阿卜·日·法拉兹</p></blockquote><h2 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h2><ul><li><p>有的时候调试过程中你希望在某个位置抛出异常,方便调试</p></li><li><p>这个时候就需求用到 raise</p></li></ul><h3 id="1-raise-人为的抛出异常"><a href="#1-raise-人为的抛出异常" class="headerlink" title="(1) raise 人为的抛出异常"></a>(1) raise 人为的抛出异常</h3><ul><li><p>raise 关键字</p></li><li><p>对 Exception 函数的调用</p></li><li><p>传递给 Exception 函数的字符串,包含有用的出错信息</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"这里有问题"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-必须使用-try-except-来接住异常-否则就会直接爆错误"><a href="#2-必须使用-try-except-来接住异常-否则就会直接爆错误" class="headerlink" title="(2) 必须使用 try except 来接住异常,否则就会直接爆错误"></a>(2) 必须使用 try except 来接住异常,否则就会直接爆错误</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">tryexcept</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"这里有问题"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这里没有问题"</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    tryexcept<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"捕捉到异常了"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="取得反向跟踪的字符串-然后写入日志"><a href="#取得反向跟踪的字符串-然后写入日志" class="headerlink" title="取得反向跟踪的字符串,然后写入日志"></a>取得反向跟踪的字符串,然后写入日志</h2><ul><li>traceback 利用 traceback.format_exc()</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> traceback<span class="token keyword">def</span> <span class="token function">bacon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"这里有问题"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">zhixing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    bacon<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    zhixing<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./error.txt"</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> item<span class="token punctuation">:</span>        item<span class="token punctuation">.</span>write<span class="token punctuation">(</span>traceback<span class="token punctuation">.</span>format_exc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结束了"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果就是把错误信息写入了错误日志里面</li></ul><pre class="line-numbers language-python"><code class="language-python">Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"g:/练习/Python/index.py"</span><span class="token punctuation">,</span> line <span class="token number">13</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    zhixing<span class="token punctuation">(</span><span class="token punctuation">)</span>  File <span class="token string">"g:/练习/Python/index.py"</span><span class="token punctuation">,</span> line <span class="token number">9</span><span class="token punctuation">,</span> <span class="token keyword">in</span> zhixing    bacon<span class="token punctuation">(</span><span class="token punctuation">)</span>  File <span class="token string">"g:/练习/Python/index.py"</span><span class="token punctuation">,</span> line <span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">in</span> bacon    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"这里有问题"</span><span class="token punctuation">)</span>Exception<span class="token punctuation">:</span> 这里有问题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><blockquote><p>断言是一个心智正常的检查,确保代码没有做什么明显错误的事情。这些检查由 assert 语句执行,检查失败抛出异常</p></blockquote><ul><li><p>assert 关键字:</p></li><li><p>条件(即求值为 True 或者 False)</p></li><li><p>逗号</p></li><li><p>当条件为 False 的时候显示的字符串</p></li><li><p>一般开发的时候用，这样他就不会抛出异常 而是直接挂掉</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">designnum</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'这里num必须是1'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不是1的情况"</span><span class="token punctuation">)</span>designnum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>designnum<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 当为1的时候 才打印出 不是1的情况</span><span class="token comment" spellcheck="true"># 当为2的时候 直接就爆错误 这里的num必须是1</span><span class="token triple-quoted-string string">'''Traceback (most recent call last):  File "g:/练习/Python/index.py", line 7, in &lt;module>    designnum(3)  File "g:/练习/Python/index.py", line 2, in designnum    assert num == 1, '这里num必须是1'AssertionError: 这里num必须是1'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="日志模块"><a href="#日志模块" class="headerlink" title="日志模块"></a>日志模块</h2><ul><li><p>要使用日志模块 就要启用 loggin 模块</p></li><li><p>基本方法</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'debug message'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 最低级别</span>logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'info message'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 用于记录程序中一般事件的信息,或确认一切工作正常</span>logging<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">'warning message'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 用于表示可能的问题,它不会阻止程序的工作,但是相当会</span>logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'Error message'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 用于记录错误,它导致程序做某事失败</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用的时候把日志保存到文件</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span>                    format<span class="token operator">=</span><span class="token string">'%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s'</span><span class="token punctuation">,</span>                    datefmt<span class="token operator">=</span><span class="token string">'%a, %d %b %Y %H:%M:%S'</span><span class="token punctuation">,</span>                    filename<span class="token operator">=</span><span class="token string">'./test.log'</span><span class="token punctuation">,</span>                    filemode<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'debug message'</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'info message'</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">'warning message'</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'error message'</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">'critical message'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果在当前目录下生成一个 test.log 文件,里面是日志信息</li></ul><pre class="line-numbers language-python"><code class="language-python">Mon<span class="token punctuation">,</span> <span class="token number">06</span> Apr <span class="token number">2020</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">:</span><span class="token number">29</span> index<span class="token punctuation">.</span>py<span class="token punctuation">[</span>line<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span> DEBUG debug messageMon<span class="token punctuation">,</span> <span class="token number">06</span> Apr <span class="token number">2020</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">:</span><span class="token number">29</span> index<span class="token punctuation">.</span>py<span class="token punctuation">[</span>line<span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span> INFO info messageMon<span class="token punctuation">,</span> <span class="token number">06</span> Apr <span class="token number">2020</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">:</span><span class="token number">29</span> index<span class="token punctuation">.</span>py<span class="token punctuation">[</span>line<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span> WARNING warning messageMon<span class="token punctuation">,</span> <span class="token number">06</span> Apr <span class="token number">2020</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">:</span><span class="token number">29</span> index<span class="token punctuation">.</span>py<span class="token punctuation">[</span>line<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">]</span> ERROR error messageMon<span class="token punctuation">,</span> <span class="token number">06</span> Apr <span class="token number">2020</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">:</span><span class="token number">29</span> index<span class="token punctuation">.</span>py<span class="token punctuation">[</span>line<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span> CRITICAL critical message<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="禁用日志"><a href="#禁用日志" class="headerlink" title="禁用日志"></a>禁用日志</h2><ul><li>logging.disable()函数 禁用了这些消息</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>disable<span class="token punctuation">(</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'debug message'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 最低级别</span>logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'info message'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 用于记录程序中一般事件的信息,或确认一切工作正常</span>logging<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">'warning message'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 用于表示可能的问题,它不会阻止程序的工作,但是相当会</span>logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'Error message'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 用于记录错误,它导致程序做某事失败</span><span class="token comment" spellcheck="true"># 这样的话它后面根本不会输入信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="VSCODE-插入断点"><a href="#VSCODE-插入断点" class="headerlink" title="VSCODE 插入断点"></a>VSCODE 插入断点</h2><h3 id="1-点击左边蜘蛛，然后点击上方的设置按钮"><a href="#1-点击左边蜘蛛，然后点击上方的设置按钮" class="headerlink" title="(1) 点击左边蜘蛛，然后点击上方的设置按钮"></a>(1) 点击左边蜘蛛，然后点击上方的设置按钮</h3><h3 id="2-它页面上有个蓝色的方框叫-Add-Configuration-之类的"><a href="#2-它页面上有个蓝色的方框叫-Add-Configuration-之类的" class="headerlink" title="(2) 它页面上有个蓝色的方框叫 Add Configuration 之类的"></a>(2) 它页面上有个蓝色的方框叫 Add Configuration 之类的</h3><h3 id="3-选择后里面选择-Python-点击-Python-后它里面有"><a href="#3-选择后里面选择-Python-点击-Python-后它里面有" class="headerlink" title="(3) 选择后里面选择 Python,点击 Python 后它里面有"></a>(3) 选择后里面选择 Python,点击 Python 后它里面有</h3><ul><li><p>Python File</p></li><li><p>Module</p></li><li><p>Remote Attach</p></li><li><p>Attach using Process ID</p></li><li><p>Django</p></li><li><p>Flask</p></li><li><p>Pyramid</p></li></ul><h3 id="4-选择-Python-File-点击"><a href="#4-选择-Python-File-点击" class="headerlink" title="(4) 选择 Python File(点击)"></a>(4) 选择 Python File(点击)</h3><h3 id="5-然后他会自动生成一段代码-保存后关闭文件-回到执行的文件"><a href="#5-然后他会自动生成一段代码-保存后关闭文件-回到执行的文件" class="headerlink" title="(5) 然后他会自动生成一段代码,保存后关闭文件,回到执行的文件"></a>(5) 然后他会自动生成一段代码,保存后关闭文件,回到执行的文件</h3><h3 id="6-在左边有数字那列点击一下-会有一个小红点出来-这就表示插入了断点"><a href="#6-在左边有数字那列点击一下-会有一个小红点出来-这就表示插入了断点" class="headerlink" title="(6) 在左边有数字那列点击一下,会有一个小红点出来.这就表示插入了断点"></a>(6) 在左边有数字那列点击一下,会有一个小红点出来.这就表示插入了断点</h3><h3 id="7-按下-F5-这个时候会出现一个选框-里面有单步跳入，跳出之类的。就可以调试了"><a href="#7-按下-F5-这个时候会出现一个选框-里面有单步跳入，跳出之类的。就可以调试了" class="headerlink" title="(7) 按下 F5 这个时候会出现一个选框 里面有单步跳入，跳出之类的。就可以调试了"></a>(7) 按下 F5 这个时候会出现一个选框 里面有单步跳入，跳出之类的。就可以调试了</h3>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组织文件</title>
      <link href="/2020/02/08/pythonresult10/"/>
      <url>/2020/02/08/pythonresult10/</url>
      
        <content type="html"><![CDATA[<h1 id="组织文件"><a href="#组织文件" class="headerlink" title="组织文件"></a>组织文件</h1><blockquote><p>我这个人走得很慢，但是我从不后退。——亚伯拉罕·林肯</p></blockquote><h2 id="学习重点"><a href="#学习重点" class="headerlink" title="学习重点"></a>学习重点</h2><ul><li><p>复制文件 和文件夹</p></li><li><p>文件和文件夹的移动与改名</p></li><li><p>永久删除文件和文件夹</p></li><li><p>用 send2trash 模块安全的删除</p></li><li><p>遍历目录树 os.walk()</p></li><li><p>用 zipfile 模块压缩文件</p></li><li><p>读取 zip</p></li><li><p>从 zip 文件中解压缩</p></li><li><p>创建和添加到 zip</p></li></ul><h2 id="shutil-模块"><a href="#shutil-模块" class="headerlink" title="shutil 模块"></a>shutil 模块</h2><p>shutil(或称为 shell 工具)包含一些函数,可以让你在 Python 中复制,移动,改名和删除文件.</p><h3 id="开山篇必须引入-shutil-模块"><a href="#开山篇必须引入-shutil-模块" class="headerlink" title="开山篇必须引入 shutil 模块"></a>开山篇必须引入 shutil 模块</h3><ul><li>引入 shutil</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> shutil<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="复制文件和文件夹"><a href="#复制文件和文件夹" class="headerlink" title="复制文件和文件夹"></a>复制文件和文件夹</h3><ul><li><p>shutil.copy(原路径,目标路径) 将原路径 source 处的文件复制到目标路径的文件处</p></li><li><p>该函数返回一个字符串,表示被复制文件的路径</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> shutil<span class="token keyword">import</span> osos<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">'./copy'</span><span class="token punctuation">)</span>shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token string">'C:/Users/Administrator/Desktop/个人简历.doc'</span><span class="token punctuation">,</span> <span class="token string">'./copy/index.doc'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果就是把这个原目录下的文件复制到我的文件夹下</span><span class="token comment" spellcheck="true"># 注意结果就是反斜杠</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件和文件夹的移动与改名"><a href="#文件和文件夹的移动与改名" class="headerlink" title="文件和文件夹的移动与改名"></a>文件和文件夹的移动与改名</h3><ul><li>shutil.move(源路径,新路径)</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> shutilshutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token string">'./copy/index.doc'</span><span class="token punctuation">,</span> <span class="token string">'./哈哈.doc'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="永久删除文件和文件夹"><a href="#永久删除文件和文件夹" class="headerlink" title="永久删除文件和文件夹"></a>永久删除文件和文件夹</h3><ul><li><p>利用 os 模块中的函数,可以删除一个文件或一个空文件夹</p></li><li><p>利用 shutil 模块可以删除一个文件夹及其所有的内容</p></li></ul><h4 id="删除单个文件"><a href="#删除单个文件" class="headerlink" title="删除单个文件"></a>删除单个文件</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>unlink<span class="token punctuation">(</span><span class="token string">"./doc.txt"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 删除单个文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除单个文件夹-该文件夹必须为空"><a href="#删除单个文件夹-该文件夹必须为空" class="headerlink" title="删除单个文件夹,该文件夹必须为空"></a>删除单个文件夹,该文件夹必须为空</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span><span class="token string">'./copy'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除文件夹它里面的所有内容和文件都删除-慎重使用不可恢复"><a href="#删除文件夹它里面的所有内容和文件都删除-慎重使用不可恢复" class="headerlink" title="删除文件夹它里面的所有内容和文件都删除(慎重使用不可恢复)"></a>删除文件夹它里面的所有内容和文件都删除(慎重使用不可恢复)</h4><ul><li>shutil.rmtree</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> shutilshutil<span class="token punctuation">.</span>rmtree<span class="token punctuation">(</span><span class="token string">'./copy'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用-send2trash-模块安全的删除-推荐使用"><a href="#用-send2trash-模块安全的删除-推荐使用" class="headerlink" title="用 send2trash 模块安全的删除(推荐使用)"></a>用 send2trash 模块安全的删除(推荐使用)</h3><ul><li>这个模块相当于把文件扔到了回收站，你可以直接还原他而 shutil.rmtree 是直接删除</li></ul><h4 id="第一步安装模块"><a href="#第一步安装模块" class="headerlink" title="第一步安装模块"></a>第一步安装模块</h4><pre class="line-numbers language-python"><code class="language-python">pip install send2trash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="第二步-删除"><a href="#第二步-删除" class="headerlink" title="第二步 删除"></a>第二步 删除</h4><ul><li>send2trash.send2trash</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> send2trashsend2trash<span class="token punctuation">.</span>send2trash<span class="token punctuation">(</span><span class="token string">"./copy"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历目录树"><a href="#遍历目录树" class="headerlink" title="遍历目录树"></a>遍历目录树</h3><ul><li>要是想遍历一个文件夹下面所有子文件夹 和子文件夹文件等等 必须使用 os.walk()</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">for</span> folderName<span class="token punctuation">,</span> subfolders<span class="token punctuation">,</span> filenames <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token string">'./all'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"当前目录是"</span> <span class="token operator">+</span> folderName<span class="token punctuation">)</span>    <span class="token keyword">for</span> subfolder <span class="token keyword">in</span> subfolders<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子文件目录'</span> <span class="token operator">+</span> subfolder<span class="token punctuation">)</span>    <span class="token keyword">for</span> filename <span class="token keyword">in</span> filenames<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'文件名称'</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用-zipfile-模块"><a href="#用-zipfile-模块" class="headerlink" title="用 zipfile 模块"></a>用 zipfile 模块</h3><h4 id="1-读取-zip-文件"><a href="#1-读取-zip-文件" class="headerlink" title="(1) 读取 zip 文件"></a>(1) 读取 zip 文件</h4><ul><li>zipfile.Zipfile(路径)</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> zipfileresult <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'./zip.zip'</span><span class="token punctuation">)</span>listname <span class="token operator">=</span> result<span class="token punctuation">.</span>namelist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>listname<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># ['zip/', 'zip/1.txt', 'zip/2.txt', 'zip/3.txt', 'zip/4.txt']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-获取压缩包里面的内容"><a href="#2-获取压缩包里面的内容" class="headerlink" title="(2) 获取压缩包里面的内容"></a>(2) 获取压缩包里面的内容</h4><ul><li>namelist(), getinfo(), file_size</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> zipfileresult <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'./zip.zip'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 读取压缩包</span>listname <span class="token operator">=</span> result<span class="token punctuation">.</span>namelist<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取到名称集合</span>item <span class="token operator">=</span> result<span class="token punctuation">.</span>getinfo<span class="token punctuation">(</span>listname<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取到文件信息</span>size <span class="token operator">=</span> item<span class="token punctuation">.</span>file_size  <span class="token comment" spellcheck="true"># 获取到文件大小</span><span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-解压缩"><a href="#3-解压缩" class="headerlink" title="(3)解压缩"></a>(3)解压缩</h4><ul><li>extractall()方法 解压缩所有文件和文件夹</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> zipfileresult <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'./zip.zip'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 读取压缩包</span>result<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 解压缩全部</span>result<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 关闭</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>要是只想解压缩单个文件也可以</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> zipfilezipall <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'./zip.zip'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 读取压缩包</span>result <span class="token operator">=</span> zipall<span class="token punctuation">.</span>namelist<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取到文件列表</span>zipall<span class="token punctuation">.</span>extract<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 解压缩其中的一个文件</span>zipall<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 关闭</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-创建和添加到-zip-文件"><a href="#4-创建和添加到-zip-文件" class="headerlink" title="(4) 创建和添加到 zip 文件"></a>(4) 创建和添加到 zip 文件</h4><ul><li><p>必须以写入的模式打开 ZipFile 对象,即传入’w’作为第二个参数,传入’a’ 就代表继续写入 。</p></li><li><p>类似以写模式打开一个文本文件 他这个只能到第一层,里面要是有嵌套的则没有办法压缩</p></li><li><p>write()方法第一个参数是一个字符串,代表要压缩的文件名,第二个参数是压缩类型的参数</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> zipfilezipall <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'./new.zip'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 写入压缩包</span>zipall<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'./all'</span><span class="token punctuation">,</span> compress_type<span class="token operator">=</span>zipfile<span class="token punctuation">.</span>ZIP_DEFLATED<span class="token punctuation">)</span>zipall<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读写文件</title>
      <link href="/2020/02/07/pythonresult9/"/>
      <url>/2020/02/07/pythonresult9/</url>
      
        <content type="html"><![CDATA[<h1 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h1><blockquote><p>我们唯一不会改正的缺点是软弱。——拉罗什福科</p></blockquote><h2 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h2><ul><li>检查路径有效性: os.path.exists()</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> ospath <span class="token operator">=</span> <span class="token string">'E:\TextCode\mdall\PythonBasic1.md'</span>result <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>拼接路径 os.path.join</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> osresult <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token string">'bin'</span><span class="token punctuation">,</span> <span class="token string">'spanm'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># user\bin\spanm</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看文件大小 os.path.getsize(路径)</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> ospath <span class="token operator">=</span> <span class="token string">'E:\TextCode\mdall\PythonBasic1.md'</span>result <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建新的文件夹 makedirs</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">'./haha'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 相对路径</span><span class="token comment" spellcheck="true"># 结果就是在当前目录下创建一个haha的文件夹</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>获取当前路径 getcwd()</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> osresult <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># E:\TextCode\Python\Python4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>切换为包含数据文件的文件夹 chdir(路径)</p></li><li><p>路径一定是反斜杠 ‘/‘</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'E:/TextCode/files'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 改变路径</span>result <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取当前路径</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># E:\TextCode\files</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件打开和读写"><a href="#文件打开和读写" class="headerlink" title="文件打开和读写"></a>文件打开和读写</h2><h3 id="文件读"><a href="#文件读" class="headerlink" title="文件读"></a>文件读</h3><ul><li>基本语法</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span>路径<span class="token punctuation">,</span><span class="token string">'读(r)或写(w)或后面插入(a)'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 变量名  <span class="token comment" spellcheck="true"># readline 仅仅只读1行</span>  <span class="token comment" spellcheck="true"># readlines 一行一行读,也可以换成read()那它是一个一个读</span>  <span class="token comment" spellcheck="true">#  xxx = 变量名.read()</span>  xxx <span class="token operator">=</span> 变量名<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#一般情况里面跟for 循环</span>   <span class="token keyword">for</span> item <span class="token keyword">in</span> xxx<span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>xxx<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 取消掉\r\n</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>具体的写法</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'text1.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> data<span class="token punctuation">:</span>    content <span class="token operator">=</span> data<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 结果就是list</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>逐行读,readlines()</li></ul><pre class="line-numbers language-python"><code class="language-python">result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'text1.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> data<span class="token punctuation">:</span>    content <span class="token operator">=</span> data<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 结果就是list</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"--------------\r\n"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> content<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#取消掉右边的\r\n</span>    result<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 会多出一个\n所以去掉</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>若是 JSON 文件 可以使用 json.load 直接读</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'data.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> data<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这样读取出来就是个json文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h3><ul><li>基本语法</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span>路径<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> data<span class="token punctuation">:</span>     data<span class="token punctuation">.</span>write<span class="token punctuation">(</span>xxxxx<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>用到例子上</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"text3.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> data<span class="token punctuation">:</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        data<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"测试写了"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"次"</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>附加模式,已经有文件 从后面加入</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"text3.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> data<span class="token punctuation">:</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        data<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"测试写了"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"次"</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 他就是在文件的最后加入数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JSON-模块"><a href="#JSON-模块" class="headerlink" title="JSON 模块"></a>JSON 模块</h2><ul><li><p>json.dumps() 将对象变成字符串</p></li><li><p>json.loads() 将字符串变成对象</p></li></ul><p>———文件不需要加 S——–</p><ul><li><p>json.dump() 将对象编程字符串,并写入文件中去</p></li><li><p>json.load() 用户从 JSON 文件中读取数据</p></li></ul><h3 id="json-dump-和-json-load"><a href="#json-dump-和-json-load" class="headerlink" title="json.dump 和 json.load"></a>json.dump 和 json.load</h3><ul><li><p>从文件中读取数据后写入文件</p></li><li><p>ensure_ascii=False 表示不要把 asc 码转换</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'data.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> data<span class="token punctuation">:</span>    content <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'text4.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> data2<span class="token punctuation">:</span>        json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>content<span class="token punctuation">,</span> data2<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="json-dumps-和-json-loads"><a href="#json-dumps-和-json-loads" class="headerlink" title="json.dumps 和 json.loads"></a>json.dumps 和 json.loads</h3><ul><li>json.dump</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> jsonobj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"哈哈哈"</span><span class="token punctuation">,</span>    <span class="token string">"Sex"</span><span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">}</span>result <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果就是string</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>json.loads</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> jsonobj <span class="token operator">=</span> <span class="token string">'{"name": "哈哈哈","Sex": "男"}'</span>result <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果就是dict</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模式匹配和正则表达式</title>
      <link href="/2020/02/06/pythonresult8/"/>
      <url>/2020/02/06/pythonresult8/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则表达式自己有一套规则,他可以通过一些规则来筛选出正确的结果</p><blockquote><p>学到很多东西的诀窍，就是一下子不要学很多。——洛克</p></blockquote><h2 id="流程概述"><a href="#流程概述" class="headerlink" title="流程概述"></a>流程概述</h2><h3 id="1-创建正则表达式对象"><a href="#1-创建正则表达式对象" class="headerlink" title="(1) 创建正则表达式对象"></a>(1) 创建正则表达式对象</h3><ul><li>使用正则表达式之前,必须借助 re 模块,否则在 Python 中使用不了正则表达式</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-匹配-Regex-对象"><a href="#2-匹配-Regex-对象" class="headerlink" title="(2) 匹配 Regex 对象"></a>(2) 匹配 Regex 对象</h3><ul><li>必须使用 compile(r’规则’) 设定规则</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> reregex <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"Python"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-通过规则来找到结果"><a href="#3-通过规则来找到结果" class="headerlink" title="(3)通过规则来找到结果"></a>(3)通过规则来找到结果</h3><ul><li>必须使用 search()</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> restr <span class="token operator">=</span> <span class="token string">"今天我开始学习Python222222222"</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"Python"</span><span class="token punctuation">)</span>match <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 找不到的话就是None</span><span class="token comment" spellcheck="true"># 找的到的话就是类型就是 &lt;class 're.Match'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-找到结果的时候通过-group-来输出结果"><a href="#4-找到结果的时候通过-group-来输出结果" class="headerlink" title="(4) 找到结果的时候通过 group()来输出结果"></a>(4) 找到结果的时候通过 group()来输出结果</h3><ul><li>group() 来输出结果</li></ul><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> <span class="token string">"今天我开始学习Python222222222"</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"Python"</span><span class="token punctuation">)</span>match <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>str<span class="token punctuation">)</span>result <span class="token operator">=</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="完整版"><a href="#完整版" class="headerlink" title="完整版"></a>完整版</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> restr <span class="token operator">=</span> <span class="token string">"今天我开始学习Python222222222"</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"Python"</span><span class="token punctuation">)</span>match <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 找不到就是None</span><span class="token keyword">if</span> match<span class="token punctuation">:</span>    result <span class="token operator">=</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有筛选到"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>使用 import re 引入正则模块</p></li><li><p>使用 re.compile() 设定规则</p></li><li><p>向 Regex 对象的 search()方法传入想要找的字符串,它返回一个 Match 对象</p></li><li><p>调用 Match 对象的 group()方法 返回实际匹配文本的字符串</p></li></ul><h2 id="用正则表达式匹配更多模式"><a href="#用正则表达式匹配更多模式" class="headerlink" title="用正则表达式匹配更多模式"></a>用正则表达式匹配更多模式</h2><h3 id="利用括号分组"><a href="#利用括号分组" class="headerlink" title="利用括号分组"></a>利用括号分组</h3><ul><li>举例子 \d 表示查找数字 加了括号他的顺序就是从 1 开始</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> restr <span class="token operator">=</span> <span class="token string">'My number is 415-555-4242'</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'(\d\d\d)-(\d\d\d-\d\d\d\d)'</span><span class="token punctuation">)</span>match <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>str<span class="token punctuation">)</span>result0 <span class="token operator">=</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>result1 <span class="token operator">=</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>result2 <span class="token operator">=</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result0<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 415-555-4242</span><span class="token comment" spellcheck="true"># 415</span><span class="token comment" spellcheck="true"># 555-4242</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用管道匹配多个分组"><a href="#用管道匹配多个分组" class="headerlink" title="用管道匹配多个分组"></a>用管道匹配多个分组</h3><blockquote><p>字符 | 称为 管道 希望匹配许多表达式中的一个时 就可以用它</p></blockquote><ul><li>他是条件满足一个就行,谁写在前面就满足谁</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> restr <span class="token operator">=</span> <span class="token string">'Black and White'</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'Black|White'</span><span class="token punctuation">)</span>match <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>str<span class="token punctuation">)</span>result <span class="token operator">=</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>result2 <span class="token operator">=</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果就是Black</span><span class="token comment" spellcheck="true"># 要是把White 写在前面的话</span><span class="token comment" spellcheck="true"># 结果就是White</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用问号可以实现选配"><a href="#用问号可以实现选配" class="headerlink" title="用问号可以实现选配"></a>用问号可以实现选配</h3><ul><li>用问号可以实现选配 就是无论满足不满足 正则都会认为满足</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> restr <span class="token operator">=</span> <span class="token string">'Blackwoman'</span>str2 <span class="token operator">=</span> <span class="token string">'Blackman'</span><span class="token keyword">def</span> <span class="token function">reg</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>    regex <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'Black(wo)?man'</span><span class="token punctuation">)</span>    match <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>str<span class="token punctuation">)</span>    result <span class="token operator">=</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>reg<span class="token punctuation">(</span>str<span class="token punctuation">)</span>reg<span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># Blackwoman</span><span class="token comment" spellcheck="true"># Blackman</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用星号匹配零次或者多次-找不到也没关系"><a href="#用星号匹配零次或者多次-找不到也没关系" class="headerlink" title="用星号匹配零次或者多次(找不到也没关系)"></a>用星号匹配零次或者多次(找不到也没关系)</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> restr <span class="token operator">=</span> <span class="token string">'Blackman'</span>str2 <span class="token operator">=</span> <span class="token string">'Blackwowowowowoman'</span><span class="token keyword">def</span> <span class="token function">reg</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>    regex <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'Black(wo)*man'</span><span class="token punctuation">)</span>    match <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>str<span class="token punctuation">)</span>    result <span class="token operator">=</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>reg<span class="token punctuation">(</span>str<span class="token punctuation">)</span>reg<span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># Blackman</span><span class="token comment" spellcheck="true"># Blackwowowowowoman</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用加号匹配-1-次或者多次"><a href="#用加号匹配-1-次或者多次" class="headerlink" title="用加号匹配 1 次或者多次"></a>用加号匹配 1 次或者多次</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> restr <span class="token operator">=</span> <span class="token string">'Blackman'</span>str2 <span class="token operator">=</span> <span class="token string">'Blackwowowowowoman'</span><span class="token keyword">def</span> <span class="token function">reg</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>    regex <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'Black(wo)+man'</span><span class="token punctuation">)</span>    match <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>str<span class="token punctuation">)</span>    <span class="token keyword">if</span> match<span class="token punctuation">:</span>        result <span class="token operator">=</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有结果"</span><span class="token punctuation">)</span>reg<span class="token punctuation">(</span>str<span class="token punctuation">)</span>reg<span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 没有结果</span><span class="token comment" spellcheck="true"># Blackwowowowowoman</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用花括号匹配特定的次数"><a href="#用花括号匹配特定的次数" class="headerlink" title="用花括号匹配特定的次数"></a>用花括号匹配特定的次数</h3><ul><li><p>如果一个分组想要重复特定的次数,就在正则表达式中该分组的后面,跟上花括号包围的数字例如(Ha){3} 就表示 HaHaHa 但是它不会匹配’HaHa’</p></li><li><p>除了一个数字,还可以指定一个范围,即在花括号中写下一个最小值,一个逗号和一个最大值,例如(Ha){1,3} 它就会匹配 ‘Ha’, ‘HaHa’,’HaHaHa’</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> restr <span class="token operator">=</span> <span class="token string">'Ha'</span>str2 <span class="token operator">=</span> <span class="token string">'HaHaHa'</span>str3 <span class="token operator">=</span> <span class="token string">'HaHaHaHaHa'</span><span class="token keyword">def</span> <span class="token function">reg</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>    regex <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'(Ha){1,5}'</span><span class="token punctuation">)</span>    match <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>str<span class="token punctuation">)</span>    <span class="token keyword">if</span> match<span class="token punctuation">:</span>        result <span class="token operator">=</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有结果"</span><span class="token punctuation">)</span>reg<span class="token punctuation">(</span>str<span class="token punctuation">)</span>reg<span class="token punctuation">(</span>str2<span class="token punctuation">)</span>reg<span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># Ha</span><span class="token comment" spellcheck="true"># HaHaHa</span><span class="token comment" spellcheck="true"># HaHaHaHaHa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="贪心和非贪心模式"><a href="#贪心和非贪心模式" class="headerlink" title="贪心和非贪心模式"></a>贪心和非贪心模式</h3><ul><li>在 Python 中正则表达式默认是贪心的,也就是他会找出来最多的比如(Ha){3,5} 他会找出了符合最长的而不是最短的</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> restr3 <span class="token operator">=</span> <span class="token string">'HaHaHaHaHa'</span><span class="token keyword">def</span> <span class="token function">reg</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>    regex <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'(Ha){1,5}'</span><span class="token punctuation">)</span>    match <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>str<span class="token punctuation">)</span>    <span class="token keyword">if</span> match<span class="token punctuation">:</span>        result <span class="token operator">=</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有结果"</span><span class="token punctuation">)</span>reg<span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># HaHaHaHaHa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果你不想进贪心模式,你就想找到最短的,只有?来解决</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> restr3 <span class="token operator">=</span> <span class="token string">'HaHaHaHaHa'</span><span class="token keyword">def</span> <span class="token function">reg</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>    regex <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'(Ha){1,5}?'</span><span class="token punctuation">)</span>    match <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>str<span class="token punctuation">)</span>    <span class="token keyword">if</span> match<span class="token punctuation">:</span>        result <span class="token operator">=</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有结果"</span><span class="token punctuation">)</span>reg<span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># Ha</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>所以在 Python 正则表达式中,问号有两种含义 生命表示可选的分组 或者 声明非贪心模式</p></blockquote><h3 id="findall-方法"><a href="#findall-方法" class="headerlink" title="findall() 方法"></a>findall() 方法</h3><ul><li><p>除了 search()方法还有一个 findall()方法.search()返回的是一个 Match()对象,而 findall()返回的是一组字符串,包含被查找字符串中的所有匹配</p></li><li><p>findall 就三步 没有 group,结果是个数组</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> restr3 <span class="token operator">=</span> <span class="token string">'HaHaHaHaHa'</span><span class="token keyword">def</span> <span class="token function">reg</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>    regex <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'(Ha){1,5}?'</span><span class="token punctuation">)</span>    match <span class="token operator">=</span> regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>str<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>reg<span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># ['Ha', 'Ha', 'Ha', 'Ha', 'Ha']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="规则分类"><a href="#规则分类" class="headerlink" title="规则分类"></a>规则分类</h3><pre class="line-numbers language-mysql"><code class="language-mysql">\d 0到9的数字\D 除0到9的数字以外的任何字符\w 任何字母,数字,下划线\W 除任何字母，数字，下划线以外的任何字符\s 空格 制表符 换行符(可以认为匹配空白字符)\S 除空格 制表符 或换行符以外的任意字符> 大写就表示取反<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入字符和美元字符"><a href="#插入字符和美元字符" class="headerlink" title="插入字符和美元字符"></a>插入字符和美元字符</h3><ul><li><p>^ 表示以什么开头的</p></li><li><p>$ 表示以什么结尾的</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> restr3 <span class="token operator">=</span> <span class="token string">'12121212121'</span><span class="token keyword">def</span> <span class="token function">reg</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>    regex <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'^\d+$'</span><span class="token punctuation">)</span>    match <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>str<span class="token punctuation">)</span>    result <span class="token operator">=</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>reg<span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 12121212121</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通配字符"><a href="#通配字符" class="headerlink" title="通配字符"></a>通配字符</h3><ul><li><p>python 中 (.)句号 代表通配符,它匹配除了换行之外的所有字符</p></li><li><p>要是匹配真正的.前面需要加转义\</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> restr3 <span class="token operator">=</span> <span class="token string">'Hellodada'</span><span class="token keyword">def</span> <span class="token function">reg</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>    regex <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'.d'</span><span class="token punctuation">)</span>    match <span class="token operator">=</span> regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>str<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>reg<span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># ['od','ad']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用点-星匹配所有字符"><a href="#用点-星匹配所有字符" class="headerlink" title="用点-星匹配所有字符"></a>用点-星匹配所有字符</h3><ul><li>有的时候匹配所有字符(.*) 表示任意文本</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> restr3 <span class="token operator">=</span> <span class="token string">'Hello dada'</span><span class="token keyword">def</span> <span class="token function">reg</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>    regex <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'(.*) (.*)'</span><span class="token punctuation">)</span>    match <span class="token operator">=</span> regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>str<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>reg<span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># [('Hello', 'dada')]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>re.DOTALL 匹配所有字符,包括换行符,全部匹配</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> restr3 <span class="token operator">=</span> <span class="token string">'Server the public trust .\nprotect the woman .\nUpload the law'</span><span class="token keyword">def</span> <span class="token function">reg</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>    regex <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'.*'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>DOTALL<span class="token punctuation">)</span>    match <span class="token operator">=</span> regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>str<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>reg<span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 'Server the public trust .\nprotect the woman .\nUpload the law'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="替换-sub"><a href="#替换-sub" class="headerlink" title="替换 sub()"></a>替换 sub()</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> restr3 <span class="token operator">=</span> <span class="token string">'Server the public woman'</span><span class="token keyword">def</span> <span class="token function">reg</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>    regex <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'woman'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>DOTALL<span class="token punctuation">)</span>    result <span class="token operator">=</span> regex<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'女人'</span><span class="token punctuation">,</span> str3<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>reg<span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># Server the public 女人</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="忽略字符串中的空白符和注释"><a href="#忽略字符串中的空白符和注释" class="headerlink" title="忽略字符串中的空白符和注释"></a>忽略字符串中的空白符和注释</h3><ul><li><p>r 后面必须有 3 个引号 结尾也必须 3 个引号</p></li><li><p>传入第二个参数 re.VERBOSE</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> restr3 <span class="token operator">=</span> <span class="token string">'Server the public woman'</span><span class="token keyword">def</span> <span class="token function">reg</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>    regex <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token triple-quoted-string string">'''(woman)#忽略注释'''</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>VERBOSE<span class="token punctuation">)</span>    match <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>str3<span class="token punctuation">)</span>    result <span class="token operator">=</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>reg<span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># woman</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组合版本"><a href="#组合版本" class="headerlink" title="组合版本"></a>组合版本</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> restr3 <span class="token operator">=</span> <span class="token string">'Server the public woman'</span><span class="token keyword">def</span> <span class="token function">reg</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>    regex <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token triple-quoted-string string">'''(woman)#忽略注释'''</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>VERBOSE<span class="token operator">|</span>re<span class="token punctuation">.</span>DOTALL<span class="token punctuation">)</span>    match <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>str3<span class="token punctuation">)</span>    result <span class="token operator">=</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>reg<span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># woman</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字典和结构化数据</title>
      <link href="/2020/02/05/pythonresult7/"/>
      <url>/2020/02/05/pythonresult7/</url>
      
        <content type="html"><![CDATA[<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><ul><li><p>简单来说 字典类似对象。字典是一系列 键值对，每个键都对应一个值</p></li><li><p>例如</p></li></ul><pre class="line-numbers language-python"><code class="language-python">alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token string">"points"</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien<span class="token punctuation">[</span><span class="token string">"color"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span>green<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="访问字典中的值"><a href="#访问字典中的值" class="headerlink" title="访问字典中的值"></a>访问字典中的值</h3><ul><li>通过[‘属性名’]</li></ul><pre class="line-numbers language-python"><code class="language-python">alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token string">"points"</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien<span class="token punctuation">[</span><span class="token string">"color"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span>green<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加键值对"><a href="#添加键值对" class="headerlink" title="添加键值对"></a>添加键值对</h3><ul><li>可以通过属性:值 来添加</li></ul><pre class="line-numbers language-python"><code class="language-python">alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"points"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span>alien<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"颜色"</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'points'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'颜色'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加一个空字典"><a href="#添加一个空字典" class="headerlink" title="添加一个空字典"></a>添加一个空字典</h3><ul><li>可以用一个{}表示字典</li></ul><pre class="line-numbers language-python"><code class="language-python"> alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> alien<span class="token punctuation">[</span><span class="token string">"color"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"red"</span> <span class="token keyword">print</span><span class="token punctuation">(</span>alien<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#结果</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改字典中的值"><a href="#修改字典中的值" class="headerlink" title="修改字典中的值"></a>修改字典中的值</h3><pre class="line-numbers language-python"><code class="language-python">alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The alien is "</span> <span class="token operator">+</span> alien<span class="token punctuation">[</span><span class="token string">"color"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#结果</span>The alien <span class="token keyword">is</span> green<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除字典中值-del"><a href="#删除字典中值-del" class="headerlink" title="删除字典中值 del"></a>删除字典中值 del</h3><pre class="line-numbers language-python"><code class="language-python">alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"姓名"</span><span class="token punctuation">}</span><span class="token keyword">del</span> alien<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="get-方法就是当取不到值的时候-返回备用值"><a href="#get-方法就是当取不到值的时候-返回备用值" class="headerlink" title="get 方法就是当取不到值的时候 返回备用值"></a>get 方法就是当取不到值的时候 返回备用值</h3><pre class="line-numbers language-python"><code class="language-python">arrobj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"red"</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>arrobj<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"有值"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arrobj<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"名字"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># red</span><span class="token comment" spellcheck="true"># 名字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="setdefault-设置默认值"><a href="#setdefault-设置默认值" class="headerlink" title="setdefault()设置默认值"></a>setdefault()设置默认值</h3><ul><li>第一个参数 就是要检查的键。第二个键就是该键不存在的时候，要设置的值</li></ul><pre class="line-numbers language-python"><code class="language-python">arrobj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>arrobj<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arrobj<span class="token punctuation">)</span>arrobj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">}</span>arrobj2<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arrobj2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># {'color': 'red'}  第一次是没有属性,所以起作用</span><span class="token comment" spellcheck="true"># {'color': 'green'} 第二次是有属性 所以不起作用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h3><ul><li><p>通过 for in 循环来做</p></li><li><p>必须有:</p></li><li><p>循环的要是列表 必须要有 xxx.items()</p></li></ul><pre class="line-numbers language-python"><code class="language-python">alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"姓名"</span><span class="token punctuation">}</span><span class="token keyword">for</span> content <span class="token keyword">in</span> alien<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'姓名'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>要是想获取到里面值可以这样</li></ul><pre class="line-numbers language-python"><code class="language-python">alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"姓名"</span><span class="token punctuation">}</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> val <span class="token keyword">in</span> alien<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token string">"color"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span>green<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历字典里面所有的键"><a href="#遍历字典里面所有的键" class="headerlink" title="遍历字典里面所有的键"></a>遍历字典里面所有的键</h3><ul><li>方法同上 就是把 xxx.items() 变成 xxx.keys()</li></ul><pre class="line-numbers language-python"><code class="language-python">alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"姓名"</span><span class="token punctuation">}</span><span class="token keyword">for</span> name <span class="token keyword">in</span> alien<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span>colorname<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>按照顺序遍历字典中所有的键,sorted 排序</li></ul><pre class="line-numbers language-python"><code class="language-python">alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> <span class="token string">"alien"</span><span class="token punctuation">:</span> <span class="token string">"开始"</span><span class="token punctuation">}</span><span class="token keyword">for</span> name <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>alien<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span>aliencolorname<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历字典中所有的值"><a href="#遍历字典中所有的值" class="headerlink" title="遍历字典中所有的值"></a>遍历字典中所有的值</h3><ul><li>方法同上 就是把 xxx.items()变成 xx.values()</li></ul><pre class="line-numbers language-python"><code class="language-python">alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> <span class="token string">"alien"</span><span class="token punctuation">:</span> <span class="token string">"开始"</span><span class="token punctuation">}</span><span class="token keyword">for</span> content <span class="token keyword">in</span> alien<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#结果</span>green姓名开始<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字典嵌套"><a href="#字典嵌套" class="headerlink" title="字典嵌套"></a>字典嵌套</h3><ul><li>字典里嵌套字典</li></ul><pre class="line-numbers language-python"><code class="language-python">alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> <span class="token string">"alien"</span><span class="token punctuation">:</span> <span class="token string">"开始"</span><span class="token punctuation">}</span>alien2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> <span class="token string">"alien"</span><span class="token punctuation">:</span> <span class="token string">"开始"</span><span class="token punctuation">}</span>alien3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> <span class="token string">"alien"</span><span class="token punctuation">:</span> <span class="token string">"开始"</span><span class="token punctuation">}</span>aliens <span class="token operator">=</span> <span class="token punctuation">[</span>alien<span class="token punctuation">,</span> alien2<span class="token punctuation">,</span> alien3<span class="token punctuation">]</span><span class="token keyword">for</span> alien <span class="token keyword">in</span> aliens<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>alien<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 最后结果</span><span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'alien'</span><span class="token punctuation">:</span> <span class="token string">'开始'</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'alien'</span><span class="token punctuation">:</span> <span class="token string">'开始'</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'alien'</span><span class="token punctuation">:</span> <span class="token string">'开始'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建 10 个对象组合</li></ul><pre class="line-numbers language-python"><code class="language-python">alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> <span class="token string">"alien"</span><span class="token punctuation">:</span> <span class="token string">"开始"</span><span class="token punctuation">}</span>aliens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    aliens<span class="token punctuation">.</span>append<span class="token punctuation">(</span>alien<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>aliens<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token punctuation">[</span>  <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'alien'</span><span class="token punctuation">:</span> <span class="token string">'开始'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'alien'</span><span class="token punctuation">:</span> <span class="token string">'开始'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'alien'</span><span class="token punctuation">:</span> <span class="token string">'开始'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'alien'</span><span class="token punctuation">:</span> <span class="token string">'开始'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'alien'</span><span class="token punctuation">:</span> <span class="token string">'开始'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'alien'</span><span class="token punctuation">:</span> <span class="token string">'开始'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'alien'</span><span class="token punctuation">:</span> <span class="token string">'开始'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'alien'</span><span class="token punctuation">:</span> <span class="token string">'开始'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'alien'</span><span class="token punctuation">:</span> <span class="token string">'开始'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'alien'</span><span class="token punctuation">:</span> <span class="token string">'开始'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>字典里嵌套列表</li></ul><pre class="line-numbers language-python"><code class="language-python"> person <span class="token operator">=</span> <span class="token punctuation">{</span>   name<span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>   aihao<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"篮球"</span><span class="token punctuation">,</span><span class="token string">"足球"</span><span class="token punctuation">,</span><span class="token string">"橄榄球"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>字典里面嵌套字典</li></ul><pre class="line-numbers language-python"><code class="language-python"> person <span class="token operator">=</span> <span class="token punctuation">{</span>   name<span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>   aihao<span class="token punctuation">:</span><span class="token punctuation">{</span>     name<span class="token punctuation">:</span><span class="token string">"足球"</span><span class="token punctuation">,</span>     score<span class="token punctuation">:</span><span class="token string">"80"</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>列表和元组</title>
      <link href="/2020/02/04/pythonresult6/"/>
      <url>/2020/02/04/pythonresult6/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-———-列表"><a href="#Python-———-列表" class="headerlink" title="Python ——— 列表"></a>Python ——— 列表</h1><blockquote><p>我这个人走得很慢，但是我从不后退。——亚伯拉罕·林肯</p></blockquote><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li>列表是由一系列按照特定顺序排列的元素组成。你可以创建任何元素，其中的元素之间可以没有任何关系.鉴于列表通常包含多个元素,我们可以随便起一个表示复数的名称</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后的结果<span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h3><ul><li>可以通过序号来访问列表元素</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>结果hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过-index-方法在列表中查找值"><a href="#通过-index-方法在列表中查找值" class="headerlink" title="通过 index()方法在列表中查找值"></a>通过 index()方法在列表中查找值</h3><ul><li>index()方法</li><li>arr.index(‘hello’)</li></ul><pre class="line-numbers language-python"><code class="language-python">spanm <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"11"</span><span class="token punctuation">,</span> <span class="token string">'22'</span><span class="token punctuation">,</span> <span class="token string">'33'</span><span class="token punctuation">,</span> <span class="token string">'44'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>spanm<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"22"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取列表元素"><a href="#获取列表元素" class="headerlink" title="获取列表元素"></a>获取列表元素</h3><ul><li>在 Python 中 第一个列表元素的索引为 0,而不是 1</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>结果就是<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Python 提供了一个新的特性 就是索引要是-1 他会返回列表最后一个元素,-2 就是倒数第二个</li></ul><pre class="line-numbers language-python"><code class="language-python"> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第一个"</span><span class="token punctuation">,</span><span class="token string">"第二个"</span><span class="token punctuation">,</span><span class="token string">"第三个"</span><span class="token punctuation">]</span> <span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>结果就是 第三个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>练习</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第一名"</span><span class="token punctuation">,</span> <span class="token string">"第二名"</span><span class="token punctuation">,</span> <span class="token string">"第三名"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这次小明获得了"</span><span class="token operator">+</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"小红获得了"</span><span class="token operator">+</span>arr<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"小兰获得了"</span><span class="token operator">+</span>arr<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="修改列表元素"><a href="#修改列表元素" class="headerlink" title="修改列表元素"></a>修改列表元素</h3><ul><li>重新赋值</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第0个"</span><span class="token punctuation">,</span><span class="token string">"第二个"</span><span class="token punctuation">,</span><span class="token string">"第三个"</span><span class="token punctuation">]</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"第一个"</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在列表中添加元素"><a href="#在列表中添加元素" class="headerlink" title="在列表中添加元素"></a>在列表中添加元素</h3><ul><li>在列表中末尾添加元素，必须使用 append</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第一个"</span><span class="token punctuation">,</span><span class="token string">"第二个"</span><span class="token punctuation">,</span><span class="token string">"第三个"</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"第四个"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">,</span> <span class="token string">'第四个'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在列表中任何位置插入新元素 insert 他接受两个参数 第一个参数是位置 第二个参数是内容</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第一个"</span><span class="token punctuation">,</span> <span class="token string">"第三个"</span><span class="token punctuation">,</span> <span class="token string">"第四个"</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"第二个"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">,</span> <span class="token string">'第四个'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表中删除元素"><a href="#列表中删除元素" class="headerlink" title="列表中删除元素"></a>列表中删除元素</h3><ul><li>使用 del 语句来删除元素(必须知道要删除的位置)</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">,</span> <span class="token string">'第四个'</span><span class="token punctuation">]</span><span class="token keyword">del</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果 <span class="token punctuation">[</span><span class="token string">"第一个"</span><span class="token punctuation">,</span> <span class="token string">"第三个"</span><span class="token punctuation">,</span> <span class="token string">"第四个"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用 pop()来删除元素,不加序号只能删除列表最后的元素</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">,</span> <span class="token string">'第四个'</span><span class="token punctuation">]</span>result <span class="token operator">=</span> arr<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">]</span>第四个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>加了序号，删除任意位置</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">,</span> <span class="token string">'第四个'</span><span class="token punctuation">]</span>result <span class="token operator">=</span> arr<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第四个'</span><span class="token punctuation">]</span>第三个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>pop()获取最后一个元素以后，改变原列表</li></ul><h3 id="根据值删除元素"><a href="#根据值删除元素" class="headerlink" title="根据值删除元素"></a>根据值删除元素</h3><ul><li>remove 他接受一个参数,要删除的值找到第一个匹配的值</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"第二个"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>要是内部有相同的数据，他只删除第一个</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">,</span> <span class="token string">"第二个"</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"第二个"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">,</span><span class="token string">"第二个"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="使用方法-sort-由小到大"><a href="#使用方法-sort-由小到大" class="headerlink" title="使用方法 sort() 由小到大"></a>使用方法 sort() 由小到大</h4><ul><li>使用 sort()能让你对列表排序,这个操作是永久性的无法回退</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="要是想反向排列只需要-reverse-True-由大到小"><a href="#要是想反向排列只需要-reverse-True-由大到小" class="headerlink" title="要是想反向排列只需要 reverse=True 由大到小"></a>要是想反向排列只需要 reverse=True 由大到小</h4><ul><li>reverse=True T 必须要大写</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="临时排序，不改变原列表-sorted-放在开头-sorted-xxx"><a href="#临时排序，不改变原列表-sorted-放在开头-sorted-xxx" class="headerlink" title="临时排序，不改变原列表 sorted 放在开头 sorted(xxx)"></a>临时排序，不改变原列表 sorted 放在开头 sorted(xxx)</h4><ul><li>正向排列</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span>arr2 <span class="token operator">=</span> sorted<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>要是反向排列</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span>arr2 <span class="token operator">=</span> sorted<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="反转顺序"><a href="#反转顺序" class="headerlink" title="反转顺序"></a>反转顺序</h4><ul><li>reverse<br>反转顺序</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="确定列表的长度-len-xxx-放在开头"><a href="#确定列表的长度-len-xxx-放在开头" class="headerlink" title="确定列表的长度 len(xxx) 放在开头"></a>确定列表的长度 len(xxx) 放在开头</h3><ul><li>len() 获取到列表的长度</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="用-list-和-tuple-来转换类型"><a href="#用-list-和-tuple-来转换类型" class="headerlink" title="用 list()和 tuple()来转换类型"></a>用 list()和 tuple()来转换类型</h3><ul><li>tuple 将 类型变成元祖</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>tuple<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># ('h', 'e', 'l', 'l', 'o')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>list 将类型变成数组</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span><span class="token string">'hello2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># ['h', 'e', 'l', 'l', 'o', '2']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="引入-copy-模块和-deepcopy"><a href="#引入-copy-模块和-deepcopy" class="headerlink" title="引入 copy 模块和 deepcopy()"></a>引入 copy 模块和 deepcopy()</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> copyresult <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span>cheese <span class="token operator">=</span> copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>result<span class="token punctuation">)</span>cheese<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'42'</span><span class="token keyword">print</span><span class="token punctuation">(</span>cheese<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># ['A', '42', 'C', 'D']</span><span class="token comment" spellcheck="true"># ['A', 'B', 'C', 'D']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>deepcopy 就是复制的列表中包含了列表,这个时候就必须用 deepcopy</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> copyresult <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span>cheese <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>result<span class="token punctuation">)</span>cheese<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>cheese<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># ['A', [5, 6, 7], 'C', 'D']</span><span class="token comment" spellcheck="true"># ['A', [2, 3, 4], 'C', 'D']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="循环出来-Python-一个数组"><a href="#循环出来-Python-一个数组" class="headerlink" title="循环出来 Python 一个数组"></a>循环出来 Python 一个数组</h2><ul><li>Python 中 for 循环没有{}而是:</li><li>注意 For 循环语句前面的空格</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token keyword">for</span> index <span class="token keyword">in</span> arr<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后的结果dcab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环语句内部可以嵌套"><a href="#循环语句内部可以嵌套" class="headerlink" title="循环语句内部可以嵌套"></a>循环语句内部可以嵌套</h3><ul><li>有缩进就是循环体内部语句,没有缩进就是循环体外部</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"小明第一名"</span><span class="token punctuation">,</span> <span class="token string">'小红第二名'</span><span class="token punctuation">,</span> <span class="token string">'小黄第三名'</span><span class="token punctuation">,</span> <span class="token string">'小黑第四名'</span><span class="token punctuation">]</span><span class="token keyword">for</span> index <span class="token keyword">in</span> arr<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----------"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过序号来循环"><a href="#通过序号来循环" class="headerlink" title="通过序号来循环"></a>通过序号来循环</h3><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第一次"</span><span class="token punctuation">,</span> <span class="token string">"第二次"</span><span class="token punctuation">,</span> <span class="token string">"第三次"</span><span class="token punctuation">,</span> <span class="token string">"第四次"</span><span class="token punctuation">]</span><span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"确实有"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>        arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"第三次的结果我修改了"</span>    <span class="token keyword">elif</span> index <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第四次确实有"</span><span class="token punctuation">)</span>        arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"第四次的结果我修改了"</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"打出最后的结果"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结束了"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#结果</span>打出最后的结果打出最后的结果确实有<span class="token number">2</span>第四次确实有结束了<span class="token punctuation">[</span><span class="token string">'第一次'</span><span class="token punctuation">,</span> <span class="token string">'第二次'</span><span class="token punctuation">,</span> <span class="token string">'第三次的结果我修改了'</span><span class="token punctuation">,</span> <span class="token string">'第四次的结果我修改了'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结束循环"><a href="#结束循环" class="headerlink" title="结束循环"></a>结束循环</h3><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"小明第一名"</span><span class="token punctuation">,</span> <span class="token string">'小红第二名'</span><span class="token punctuation">,</span> <span class="token string">'小黄第三名'</span><span class="token punctuation">,</span> <span class="token string">'小黑第四名'</span><span class="token punctuation">]</span><span class="token keyword">for</span> index <span class="token keyword">in</span> arr<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token string">"\r"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----------"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"循环结束"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h3><ul><li><p>前面的代码包含三四行,而列表解析让你仅仅只需要 1 行代码就生成这样的列表</p></li><li><p>列表解析将 for 循环和创建的元素合并为一行。并用[]包括</p></li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span>value<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> value <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果就是<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数-range"><a href="#函数-range" class="headerlink" title="函数 range()"></a>函数 range()</h2><h3 id="range-就是随机的生成与一系列的数字。他包前不包后"><a href="#range-就是随机的生成与一系列的数字。他包前不包后" class="headerlink" title="range 就是随机的生成与一系列的数字。他包前不包后"></a>range 就是随机的生成与一系列的数字。他包前不包后</h3><ul><li>它支持三个参数(起始,结束,步长) 例如(2,11,2)</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结束了"</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span>结束了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>要是想创建数字列表的话可以用 list 将 range()的结果直接转为列表</li></ul><p>输出结果</p><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打印出-list-这个列表"><a href="#打印出-list-这个列表" class="headerlink" title="打印出 list 这个列表"></a>打印出 list 这个列表</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> item <span class="token keyword">in</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结束了"</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token number">2</span><span class="token number">4</span><span class="token number">6</span><span class="token number">8</span><span class="token number">10</span>结束了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="利用-range-特性-创建一个空的列表"><a href="#利用-range-特性-创建一个空的列表" class="headerlink" title="利用 range 特性 创建一个空的列表"></a>利用 range 特性 创建一个空的列表</h3><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> item <span class="token keyword">in</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    content1 <span class="token operator">=</span> item<span class="token operator">**</span><span class="token number">2</span>    arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span>content1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对数字进行执行简单的统计计算"><a href="#对数字进行执行简单的统计计算" class="headerlink" title="对数字进行执行简单的统计计算"></a>对数字进行执行简单的统计计算</h3><ul><li><p>min 最小</p></li><li><p>max 最大</p></li><li><p>sum 求和</p></li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span>min_arr <span class="token operator">=</span> min<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>max_arr <span class="token operator">=</span> max<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>sum_arr <span class="token operator">=</span> sum<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>min_arr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>max_arr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum_arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token number">1</span><span class="token number">109</span><span class="token number">455</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="针对列表的一系列操作"><a href="#针对列表的一系列操作" class="headerlink" title="针对列表的一系列操作"></a>针对列表的一系列操作</h2><h3 id="截取-开头-结束"><a href="#截取-开头-结束" class="headerlink" title="截取 [开头:结束]"></a>截取 [开头:结束]</h3><ul><li>[开头:结束] 包前不包后</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第一个"</span><span class="token punctuation">,</span> <span class="token string">"第二个"</span><span class="token punctuation">,</span> <span class="token string">"第三个"</span><span class="token punctuation">,</span> <span class="token string">"第四个"</span><span class="token punctuation">,</span> <span class="token string">"第五个"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后的结果<span class="token punctuation">[</span><span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>[:结束] 没指定开头的话他会从头部开始截取</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第一个"</span><span class="token punctuation">,</span> <span class="token string">"第二个"</span><span class="token punctuation">,</span> <span class="token string">"第三个"</span><span class="token punctuation">,</span> <span class="token string">"第四个"</span><span class="token punctuation">,</span> <span class="token string">"第五个"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后的结果<span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">,</span> <span class="token string">'第四个'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>[2:]没指定结尾的话 他会从截取的位置到最后</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第一个"</span><span class="token punctuation">,</span> <span class="token string">"第二个"</span><span class="token punctuation">,</span> <span class="token string">"第三个"</span><span class="token punctuation">,</span> <span class="token string">"第四个"</span><span class="token punctuation">,</span> <span class="token string">"第五个"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后的结果<span class="token punctuation">[</span><span class="token string">'第三个'</span><span class="token punctuation">,</span> <span class="token string">'第四个'</span><span class="token punctuation">,</span> <span class="token string">'第五个'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>[-3:] 这就表示截取后三位</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第一个"</span><span class="token punctuation">,</span> <span class="token string">"第二个"</span><span class="token punctuation">,</span> <span class="token string">"第三个"</span><span class="token punctuation">,</span> <span class="token string">"第四个"</span><span class="token punctuation">,</span> <span class="token string">"第五个"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token string">'第三个'</span><span class="token punctuation">,</span> <span class="token string">'第四个'</span><span class="token punctuation">,</span> <span class="token string">'第五个'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第一个"</span><span class="token punctuation">,</span> <span class="token string">"第二个"</span><span class="token punctuation">,</span> <span class="token string">"第三个"</span><span class="token punctuation">,</span> <span class="token string">"第四个"</span><span class="token punctuation">,</span> <span class="token string">"第五个"</span><span class="token punctuation">]</span><span class="token keyword">for</span> item <span class="token keyword">in</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结束了"</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果第二个第三个第四个结束了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复制列表"><a href="#复制列表" class="headerlink" title="复制列表"></a>复制列表</h3><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第一个"</span><span class="token punctuation">,</span> <span class="token string">"第二个"</span><span class="token punctuation">,</span> <span class="token string">"第三个"</span><span class="token punctuation">,</span> <span class="token string">"第四个"</span><span class="token punctuation">,</span> <span class="token string">"第五个"</span><span class="token punctuation">]</span>arr2 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后的结果<span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">,</span> <span class="token string">'第四个'</span><span class="token punctuation">,</span> <span class="token string">'第五个'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="元祖"><a href="#元祖" class="headerlink" title="元祖"></a>元祖</h2><blockquote><p>Python 将不能修改的值称为不可变的,而不可变的列表称为元祖</p></blockquote><h3 id="元素的定义"><a href="#元素的定义" class="headerlink" title="元素的定义"></a>元素的定义</h3><ul><li>元祖看上去和列表差不多,但是元祖使用的是圆括号()而不是方括号,定义元祖后,我们也可以使用索引来访问其他元素</li></ul><pre class="line-numbers language-python"><code class="language-python">message <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token number">200</span>要是使用message<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">300</span> 会直接报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历元祖中所有的值"><a href="#遍历元祖中所有的值" class="headerlink" title="遍历元祖中所有的值"></a>遍历元祖中所有的值</h3><pre class="line-numbers language-python"><code class="language-python">message <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> message<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token number">200</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="元祖中的单个元素不能修改-但是整个元祖可以替换"><a href="#元祖中的单个元素不能修改-但是整个元祖可以替换" class="headerlink" title="元祖中的单个元素不能修改,但是整个元祖可以替换"></a>元祖中的单个元素不能修改,但是整个元祖可以替换</h3><pre class="line-numbers language-python"><code class="language-python">message <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>message <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul><li><p>list() 变成列表</p></li><li><p>tuple() 变成元组</p></li><li><p>set() 变成集合</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常</title>
      <link href="/2020/02/03/pythonresult5/"/>
      <url>/2020/02/03/pythonresult5/</url>
      
        <content type="html"><![CDATA[<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><blockquote><p>形成天才的决定因素应该是勤奋。——郭沫若</p></blockquote><p>异常就是代码出问题的时候 Python 解释器会显示一个 traceback，后面会跟着一个错误消息</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>   <span class="token punctuation">(</span>有可能导致错误的代码<span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token punctuation">(</span>当出现错误的时候要至执行的代码<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>具体使用</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Wrong"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数</title>
      <link href="/2020/02/02/pythonresult4/"/>
      <url>/2020/02/02/pythonresult4/</url>
      
        <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>希望是人生的乳母。—— 科策布</p><h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><p>函数相当于把代码封装到了一个区域里,这样每次使用的时候提高了代码的复用性</p><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><ul><li>基本语法</li></ul><p>在 Python 中函数必须是以 def 开头</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> 函数名<span class="token punctuation">:</span>   xxxx要执行的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="返回值和-return-语句"><a href="#返回值和-return-语句" class="headerlink" title="返回值和 return 语句"></a>返回值和 return 语句</h3><ul><li><p>return 是一个关键字</p></li><li><p>函数应该返回的值或者表达式</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">returnValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> value<span class="token keyword">print</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">(</span><span class="token string">'haha'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># haha</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在-Python-中有一个值为-None-他表示没有值-JS-中称为-null"><a href="#在-Python-中有一个值为-None-他表示没有值-JS-中称为-null" class="headerlink" title="在 Python 中有一个值为 None,他表示没有值(JS 中称为 null)"></a>在 Python 中有一个值为 None,他表示没有值(JS 中称为 null)</h3><h4 id="重点首字母必须大写"><a href="#重点首字母必须大写" class="headerlink" title="重点首字母必须大写"></a>重点首字母必须大写</h4><ul><li>None</li></ul><p>他的意思就是没有值</p><h3 id="Global-语句-用来在局部变量中修改全局变量"><a href="#Global-语句-用来在局部变量中修改全局变量" class="headerlink" title="Global 语句 (用来在局部变量中修改全局变量)"></a>Global 语句 (用来在局部变量中修改全局变量)</h3><blockquote><p>如果需要在一个函数内修改全局变量,就使用 global 语句.如果函数顶部有 global eggs 这样的代码,他相当于告诉 Python 在这个函数中 eggs 就是全局变量,不要用这个名称创建一个局部变量</p></blockquote><ul><li>错误示范 这样局部变量改变不了全局变量,最后结果还是今天开始</li></ul><blockquote><p>他只不过就是起了一个和全局变量同名的局部变量而已</p></blockquote><pre class="line-numbers language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">"今天开始"</span><span class="token keyword">def</span> <span class="token function">re</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    str1 <span class="token operator">=</span> <span class="token string">'哈哈哈'</span>re<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 今天开始</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>正确示范</li></ul><p>必须使用 global 才能修改全局变量</p><pre class="line-numbers language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">"今天开始"</span><span class="token keyword">def</span> <span class="token function">re</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> str1    str1 <span class="token operator">=</span> <span class="token string">'哈哈哈'</span>re<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 哈哈哈</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模块</title>
      <link href="/2020/02/01/pythonresult3/"/>
      <url>/2020/02/01/pythonresult3/</url>
      
        <content type="html"><![CDATA[<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><blockquote><p>要使整个人生都过得舒适、愉快，这是不可能的，因为人类必须具备一种能应付逆境的态度。——卢梭</p></blockquote><h2 id="代码复用性"><a href="#代码复用性" class="headerlink" title="代码复用性"></a>代码复用性</h2><ul><li><p>模块允许你合理组织代码来实现最优共享</p></li><li><p>发布工具允许你向全世界共享你的模块</p></li></ul><h2 id="模块-外置模块"><a href="#模块-外置模块" class="headerlink" title="模块(外置模块)"></a>模块(外置模块)</h2><h3 id="Python-大部分的模块-类库-都放到了-pypi-上面-需要什么直接搜索-网址https-pypi-org"><a href="#Python-大部分的模块-类库-都放到了-pypi-上面-需要什么直接搜索-网址https-pypi-org" class="headerlink" title="Python 大部分的模块(类库) 都放到了 pypi 上面 需要什么直接搜索.网址https://pypi.org/"></a>Python 大部分的模块(类库) 都放到了 pypi 上面 需要什么直接搜索.网址<a href="https://pypi.org/" target="_blank" rel="noopener">https://pypi.org/</a></h3><h3 id="函数转换为模块"><a href="#函数转换为模块" class="headerlink" title="函数转换为模块"></a>函数转换为模块</h3><ul><li><p>模块解释一个包含 Python 代码的文本文件,对模块的主要需求就是文件名必须以.py 结尾,他要你把函数转换一个模块,需要把代码保存到一个适当命名的文件中</p></li><li><p>拿上单元的递归函数举例子,我们可以把这个函数单独放到一个 py 文件里,取名 util.py</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">''' 作者:雾烟云 时间:2020年 功能:打印出数组里面每一个数组,要是没有就打印出第一个值'''</span><span class="token keyword">def</span> <span class="token function">printresult</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> item <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> type<span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token keyword">is</span> list<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>            printresult<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            count <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> count <span class="token operator">==</span> len<span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"一切都结束了"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li>单行注释</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 这就是单行注释</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>多行注释就是 ‘’’</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''这就是多行注释'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><h4 id="建立模块"><a href="#建立模块" class="headerlink" title="建立模块"></a>建立模块</h4><ul><li>为这个模块创建一个文件夹,起名字 nester 文件夹(名字可以随便设置),然后把模块文件(刚才写好的)放到文件夹下</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">printresult</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> item <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> type<span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token keyword">is</span> list<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>            printresult<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            count <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> count <span class="token operator">==</span> len<span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"一切都结束了"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在新文件夹中创建一个 setup.py 的文件,增加如下代码</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> distutils<span class="token punctuation">.</span>core <span class="token keyword">import</span> setupsetup<span class="token punctuation">(</span>    name<span class="token operator">=</span><span class="token string">'CheckOutArr'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 名称</span>    version<span class="token operator">=</span><span class="token string">'1.0.0'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 版本号</span>    py_modules<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'nester'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 那个模块python文件的名称</span>    author<span class="token operator">=</span><span class="token string">'YJ'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 作者姓名</span>    author_email<span class="token operator">=</span><span class="token string">'2993222085@qq.com'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 作者邮箱</span>    url<span class="token operator">=</span><span class="token string">'https://jsopy.gitee.io/'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 作者网址</span>    description<span class="token operator">=</span><span class="token string">'这就是利用递归找出元素'</span>  <span class="token comment" spellcheck="true"># 描述</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>然后在这个文件夹下 打开终端端口,键入一个命令</li></ul><pre class="line-numbers language-python"><code class="language-python">python setup<span class="token punctuation">.</span>py sdist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样 执行完毕以后 他会在文件夹下面看到 dist 文件夹,setup.py,模块文件.py,还有一个 manifest</p><h4 id="安装类库"><a href="#安装类库" class="headerlink" title="安装类库"></a>安装类库</h4><ul><li>我们进入这个文件夹 执行 python setup.py install 命令安装</li></ul><pre class="line-numbers language-python"><code class="language-python">python setup<span class="token punctuation">.</span>py install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样在本地安装好了。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><h5 id="安装前"><a href="#安装前" class="headerlink" title="安装前"></a>安装前</h5><p>nester 文件夹下面只有两个文件,一个是 nester.py 另外那个是 setup.py</p><h5 id="安装后"><a href="#安装后" class="headerlink" title="安装后"></a>安装后</h5><p>nester 文件夹下面有两个文件夹</p><ul><li><p>build 下面有个文件夹 lib 里面就是模块文件的源代码</p></li><li><p>dist 里面有文件 就是发布包</p></li><li><p>模块文件源代码</p></li><li><p>xxx.pyc(可能有)编译版本的代码</p></li><li><p>setup.py (配置文件)</p></li><li><p>MANIFST 发布的文件列表</p></li></ul><h3 id="导入模块并使用"><a href="#导入模块并使用" class="headerlink" title="导入模块并使用"></a>导入模块并使用</h3><ul><li>导入模块使用,利用 import 语句</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> 包名称<span class="token punctuation">(</span>要是包的名称和模块起始文件不对应<span class="token punctuation">,</span>那就写模块起始文件文件名<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者直接写引入方法可以</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> 方法名 <span class="token keyword">import</span> 包名称<span class="token punctuation">(</span>要是包的名称和模块起始文件不对应<span class="token punctuation">,</span>那就写模块起始文件文件名<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>使用</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 调用模块封装好的方法</span><span class="token keyword">import</span> index2<span class="token comment" spellcheck="true"># 也可以 from index2 import printresult</span><span class="token comment" spellcheck="true"># 调用的时候就是 printresult(arr2)</span>arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'这个杀手不太冷'</span><span class="token punctuation">,</span> <span class="token number">1978</span><span class="token punctuation">,</span> <span class="token string">'唐人街探案'</span><span class="token punctuation">,</span> <span class="token number">1983</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>    <span class="token string">'囧妈'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'杀死比尔'</span><span class="token punctuation">,</span> <span class="token string">'蓝色生死恋'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"终结者"</span><span class="token punctuation">,</span> <span class="token string">'复仇者联盟'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>index2<span class="token punctuation">.</span>printresult<span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token triple-quoted-string string">'''['囧妈', ['杀死比尔', '蓝色生死恋', ['终结者', '复仇者联盟']]]['杀死比尔', '蓝色生死恋', ['终结者', '复仇者联盟']]['终结者', '复仇者联盟']终结者一切都结束了'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="发布到-PYPI-网站"><a href="#发布到-PYPI-网站" class="headerlink" title="发布到 PYPI 网站"></a>发布到 PYPI 网站</h3><ul><li><p>去 pypi 上面注册账号</p></li><li><p>上传代码</p></li></ul><ol><li>还是在刚才那个包文件目录下 打开终端输入命令:</li></ol><pre class="line-numbers language-python"><code class="language-python">python setup<span class="token punctuation">.</span>py register<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>依据提示输入</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span>Username<span class="token punctuation">:</span> xxxxPassword<span class="token punctuation">:</span> xxxxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>上传</li></ol><pre class="line-numbers language-mysql"><code class="language-mysql">setup.py  sdist upload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="不同路径怎么引入模块"><a href="#不同路径怎么引入模块" class="headerlink" title="不同路径怎么引入模块"></a>不同路径怎么引入模块</h3><ul><li>模块引入不是同级别的目录</li></ul><blockquote><p>比如要引入的文件位置在 son 文件夹那必须要在 son 文件夹下面新建一个文件,</p></blockquote><ul><li><p>名字叫 __init__.py,空文件即可</p></li><li><p>主模块就是 PyBasic2 里面有个方法叫 daoru</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> son<span class="token punctuation">.</span>PyBasic2son<span class="token punctuation">.</span>PyBasic2<span class="token punctuation">.</span>daoru<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"第一个"</span><span class="token punctuation">,</span> <span class="token string">"第二个"</span><span class="token punctuation">,</span> <span class="token string">"第三个"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 第一个</span><span class="token comment" spellcheck="true"># 第二个</span><span class="token comment" spellcheck="true"># 第三个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Python-提供的内置模块"><a href="#Python-提供的内置模块" class="headerlink" title="Python 提供的内置模块"></a>Python 提供的内置模块</h2><blockquote><p>Python 提供了很多内置模块比如 os sys random ,math 等等</p></blockquote><ul><li>这里拿 random 举例子</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> randomrandom<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 产生一个1到10的整数型随机数</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 产生一个0到1之间的随机数</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">,</span><span class="token number">5.4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 产生一个1.1到5,4之间的随机浮点数</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token string">'tommrow'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 从序列中随机选取一个元素</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 产生一个1到10 间隔为2的随机整数</span><span class="token keyword">import</span> randomitems <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>items<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 将items的顺序随机顺序打乱</span><span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中的if和循环</title>
      <link href="/2020/01/31/pythonresult2/"/>
      <url>/2020/01/31/pythonresult2/</url>
      
        <content type="html"><![CDATA[<h1 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h1><blockquote><p>希望的灯一旦熄灭，生活刹那间变成了一片黑暗。——普列姆昌德</p></blockquote><h2 id="控制流必须用到一个基础类型布尔值"><a href="#控制流必须用到一个基础类型布尔值" class="headerlink" title="控制流必须用到一个基础类型布尔值"></a>控制流必须用到一个基础类型布尔值</h2><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><ul><li><p>在 Python 中布尔类型的首字母必须大写,值就两个 True 和 False</p></li><li><p>True 就表示真 False 就表示假</p></li></ul><blockquote><p>像其他值一样 布尔值也用在表达式中，并且可以保存在变量中,如果大小写不正确 或者试图用 True 或者 False 作为变量名，程序就会报错</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token boolean">True</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token comment" spellcheck="true"># 错误</span><span class="token comment" spellcheck="true"># 下面也是错误</span><span class="token keyword">if</span> true<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"对"</span><span class="token punctuation">)</span><span class="token keyword">else</span> <span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"错误"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h3><ul><li>比较操作符有六种</li></ul><blockquote><p>== ,!=,&lt;,&gt;,&lt;=,&gt;=</p></blockquote><h4 id="相等或者不相等"><a href="#相等或者不相等" class="headerlink" title="相等或者不相等"></a>相等或者不相等</h4><pre class="line-numbers language-python"><code class="language-python">num1 <span class="token operator">=</span> <span class="token number">42</span>num2 <span class="token operator">=</span> <span class="token string">'42'</span><span class="token keyword">if</span> num1 <span class="token operator">==</span> num2<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"对了"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"错误"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 错误</span><span class="token comment" spellcheck="true"># 在Python中它首先判断的是类型,然后才是值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不相等</li></ul><pre class="line-numbers language-python"><code class="language-python">num1 <span class="token operator">=</span> <span class="token number">42</span>num2 <span class="token operator">=</span> <span class="token string">'42'</span><span class="token keyword">if</span> num1 <span class="token operator">!=</span> num2<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"对了"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"错误"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 对了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="其他比较"><a href="#其他比较" class="headerlink" title="其他比较"></a>其他比较</h4><p>剩下的以此类推</p><ul><li>&lt;=</li></ul><pre class="line-numbers language-python"><code class="language-python">num1 <span class="token operator">=</span> <span class="token number">42</span>num2 <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token string">'43'</span><span class="token punctuation">)</span><span class="token keyword">if</span> num1 <span class="token operator">&lt;=</span> num2<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"对了"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"错误"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 对了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><blockquote><p>=</p></blockquote></li></ul><pre class="line-numbers language-python"><code class="language-python">num1 <span class="token operator">=</span> <span class="token number">42</span>num2 <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token string">'43'</span><span class="token punctuation">)</span><span class="token keyword">if</span> num1 <span class="token operator">>=</span> num2<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"对了"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"错误"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="判断多个条件的时候"><a href="#判断多个条件的时候" class="headerlink" title="判断多个条件的时候"></a>判断多个条件的时候</h3><h4 id="and-条件必须同时满足-少一个都不行"><a href="#and-条件必须同时满足-少一个都不行" class="headerlink" title="and 条件必须同时满足,少一个都不行"></a>and 条件必须同时满足,少一个都不行</h4><pre class="line-numbers language-python"><code class="language-python">num1 <span class="token operator">=</span> <span class="token number">42</span>num2 <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token string">'43'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num1 <span class="token operator">&lt;</span> num2<span class="token punctuation">)</span> <span class="token operator">and</span> num2 <span class="token operator">></span> <span class="token number">40</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'结果正确'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'结果错误'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 结果</span> <span class="token comment" spellcheck="true"># 结果正确</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="or-条件只有一个满足就行"><a href="#or-条件只有一个满足就行" class="headerlink" title="or 条件只有一个满足就行"></a>or 条件只有一个满足就行</h4><pre class="line-numbers language-python"><code class="language-python">num1 <span class="token operator">=</span> <span class="token number">42</span>num2 <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token string">'43'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num1 <span class="token operator">&lt;</span> num2<span class="token punctuation">)</span> <span class="token operator">or</span> num2 <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'结果正确'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'结果错误'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 结果正确 因为有一个条件满足了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="not-简单只作用于一个布尔值-或者表达式-他的意义就是求反"><a href="#not-简单只作用于一个布尔值-或者表达式-他的意义就是求反" class="headerlink" title="not 简单只作用于一个布尔值(或者表达式) 他的意义就是求反"></a>not 简单只作用于一个布尔值(或者表达式) 他的意义就是求反</h4><pre class="line-numbers language-python"><code class="language-python">result <span class="token operator">=</span> <span class="token boolean">True</span>result2 <span class="token operator">=</span> <span class="token operator">not</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="控制流语句"><a href="#控制流语句" class="headerlink" title="控制流语句"></a>控制流语句</h3><blockquote><p>控制流最常见的语句是 if,if 语句的自居(也就是紧跟着 if 语句的语句块)将在语句的条件为 True 的时候执行,如果条件是 False 则跳过</p></blockquote><h4 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h4><ul><li><p>if 关键字</p></li><li><p>条件</p></li><li><p>冒号:</p></li><li><p>在下一行开始,缩进的代码块(if 子句)</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token number">42</span> <span class="token operator">></span> <span class="token number">40</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"对的"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"错的"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 对的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="当条件很多的时候就需要-if-elif"><a href="#当条件很多的时候就需要-if-elif" class="headerlink" title="当条件很多的时候就需要 if elif"></a>当条件很多的时候就需要 if elif</h4><pre class="line-numbers language-python"><code class="language-python">result <span class="token operator">=</span> <span class="token number">22</span><span class="token keyword">if</span> result <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"他大于50"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> result <span class="token operator">></span> <span class="token number">40</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"他大于40"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> result <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"他大于30"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"以上结果都不对"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="while-循环语句"><a href="#while-循环语句" class="headerlink" title="while 循环语句"></a>while 循环语句</h3><blockquote><p>while 语句可以让一个代码块一遍又一遍的执行。只要 while 语句的条件为 True，while 子句中的代码就会执行.</p></blockquote><h4 id="重点-1"><a href="#重点-1" class="headerlink" title="重点"></a>重点</h4><ul><li><p>关键字:</p></li><li><p>条件(求值为 True 或 False)</p></li><li><p>冒号:</p></li><li><p>从新行开始,缩进的代码块(称为 while 子块)</p></li><li><p>while 循环必须有结束条件 否则无限循环下去</p></li><li><p>跳出循环可以用 break</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你的名字"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你刚才输入的就是:"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a>continue 语句</h4><ul><li>continue 语句 表示跳回循坏开始处,但是不会中断循环</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你的名字"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你刚才输入的就是:"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>    <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><ul><li>基本语法</li></ul><h4 id="重点-2"><a href="#重点-2" class="headerlink" title="重点"></a>重点</h4><ul><li><p>for 关键字</p></li><li><p>一个变量名</p></li><li><p>in 关键字</p></li><li><p>冒号</p></li><li><p>从下一行开始,缩退的代码块</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> xxx <span class="token keyword">in</span> xxx<span class="token punctuation">:</span>   要执行的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="第一种只需要输出值就行"><a href="#第一种只需要输出值就行" class="headerlink" title="第一种只需要输出值就行"></a>第一种只需要输出值就行</h5><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">for</span> content <span class="token keyword">in</span> arr<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 1,2,3,4,5,6,7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="第二种需要输出值和序号"><a href="#第二种需要输出值和序号" class="headerlink" title="第二种需要输出值和序号"></a>第二种需要输出值和序号</h5><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"今天"</span><span class="token punctuation">,</span> <span class="token string">"TOM"</span><span class="token punctuation">,</span> <span class="token string">"Tonny"</span><span class="token punctuation">,</span> <span class="token string">"Marry"</span><span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"Good"</span><span class="token punctuation">,</span> <span class="token string">"Perfect"</span><span class="token punctuation">]</span><span class="token keyword">for</span> content <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>content<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'序号是'</span><span class="token operator">+</span> str<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 今天 TOM Tonny Marry Hello Good Perfect</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="第三种转换-enumerate"><a href="#第三种转换-enumerate" class="headerlink" title="第三种转换 enumerate"></a>第三种转换 enumerate</h5><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"今天"</span><span class="token punctuation">,</span> <span class="token string">"TOM"</span><span class="token punctuation">,</span> <span class="token string">"Tonny"</span><span class="token punctuation">,</span> <span class="token string">"Marry"</span><span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"Good"</span><span class="token punctuation">,</span> <span class="token string">"Perfect"</span><span class="token punctuation">]</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> content <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"序号是"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结果是"</span> <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 序号是0</span><span class="token comment" spellcheck="true"># 结果是今天</span><span class="token comment" spellcheck="true"># 序号是1</span><span class="token comment" spellcheck="true"># 结果是TOM</span><span class="token comment" spellcheck="true"># 序号是2</span><span class="token comment" spellcheck="true"># 结果是Tonny</span><span class="token comment" spellcheck="true"># 序号是3</span><span class="token comment" spellcheck="true"># 结果是Marry</span><span class="token comment" spellcheck="true"># 序号是4</span><span class="token comment" spellcheck="true"># 结果是Hello</span><span class="token comment" spellcheck="true"># 序号是5</span><span class="token comment" spellcheck="true"># 结果是Good</span><span class="token comment" spellcheck="true"># 序号是6</span><span class="token comment" spellcheck="true"># 结果是Perfect</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="终止程序"><a href="#终止程序" class="headerlink" title="终止程序"></a>终止程序</h3><ul><li>sys.exit() 终止退出</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> syssys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 退出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据类型</title>
      <link href="/2020/01/30/pythonresult1/"/>
      <url>/2020/01/30/pythonresult1/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-基础"><a href="#Python-基础" class="headerlink" title="Python 基础"></a>Python 基础</h1><blockquote><p>只有永远躺在泥坑里的人，才不会再掉进坑里。——黑格尔</p></blockquote><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><blockquote><p>在 Python 中有八种数据类型</p></blockquote><ul><li>数字</li><li>字符串</li><li>布尔</li><li>None</li><li>元祖</li><li>列表</li><li>字典</li><li>集合</li></ul><blockquote><p>前四组都是简单类型,后四组都是复杂类型.本节讲述简单类型</p></blockquote><h2 id="判断数据类型-type"><a href="#判断数据类型-type" class="headerlink" title="判断数据类型 type"></a>判断数据类型 type</h2><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>result <span class="token operator">=</span> type<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token keyword">if</span> result <span class="token keyword">is</span> list<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"格式正确"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># class &lt;list></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><ul><li><p>整型</p></li><li><p>浮点型</p></li></ul><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul><li>把字符串变成整型 int()</li></ul><pre class="line-numbers language-python"><code class="language-python">num1 <span class="token operator">=</span> <span class="token number">42.000</span>result <span class="token operator">=</span> int<span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 42</span>num3 <span class="token operator">=</span> <span class="token string">'42'</span>result3 <span class="token operator">=</span> int<span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result3<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 42</span><span class="token comment" spellcheck="true"># 这种会报错</span>num2 <span class="token operator">=</span> <span class="token string">'42.000'</span>result2 <span class="token operator">=</span> int<span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果报错</span><span class="token comment" spellcheck="true"># 下一种也报错</span>num4 <span class="token operator">=</span> <span class="token string">'00aaa42'</span>result4 <span class="token operator">=</span> int<span class="token punctuation">(</span>num4<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result4<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>转换成 float()</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 分隔</span>num2 <span class="token operator">=</span> <span class="token string">'42.000'</span>result2 <span class="token operator">=</span> float<span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 42.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>python 整数相除 结果是 float,要是想变成整型 必须双// ,另外两个** 代表幂指数</li></ul><pre class="line-numbers language-python"><code class="language-python">result <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 1.0</span><span class="token comment" spellcheck="true"># float</span>result2 <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 1</span><span class="token comment" spellcheck="true"># int</span>result3 <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">**</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>result3<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一些数学函数 min,max,round,sum</li></ul><p>max 最大值</p><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>result <span class="token operator">=</span> max<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>min 最小值</p><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>result <span class="token operator">=</span> min<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>round 四舍五入</p><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> <span class="token number">43.609</span>result <span class="token operator">=</span> round<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 44</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串链接和复制"><a href="#字符串链接和复制" class="headerlink" title="字符串链接和复制"></a>字符串链接和复制</h2><ul><li>字符串转换 str()</li></ul><pre class="line-numbers language-python"><code class="language-python">result <span class="token operator">=</span> <span class="token number">45.00232</span>result2 <span class="token operator">=</span> str<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true">#&lt;class 'str'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>字符串拼接 +</li></ul><pre class="line-numbers language-python"><code class="language-python">result <span class="token operator">=</span> <span class="token string">"Hello"</span>result2 <span class="token operator">=</span> <span class="token string">"Job"</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token operator">+</span>result2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># HelloJob</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>全部大写 upper()</li></ul><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> <span class="token string">"hello"</span>result <span class="token operator">=</span> str<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># HELLO</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>全部小写 lower()</li></ul><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> <span class="token string">"HELLO"</span>result <span class="token operator">=</span> str<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首字母大写</li></ul><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> <span class="token string">"hello this is a new day"</span>result <span class="token operator">=</span> str<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># Hello This Is A New Day</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>以 startswith 开头</li></ul><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> <span class="token string">"hello this is a new day"</span>result <span class="token operator">=</span> str<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>以 endswith 结束</li></ul><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> <span class="token string">"hello this is a new day"</span>result <span class="token operator">=</span> str<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'day'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>去掉左右两边空格</li></ul><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> <span class="token string">"  hello this is a new day  "</span>result <span class="token operator">=</span> str<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># hello this is a new day</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>去掉左边的空格</li></ul><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> <span class="token string">"  hello this is a new day  "</span>result <span class="token operator">=</span> str<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># hello this is a new day</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>去掉右边的空格</li></ul><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> <span class="token string">"  hello this is a new day  "</span>result <span class="token operator">=</span> str<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true">#  hello this is a new day</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>字符串分割</li></ul><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> <span class="token string">"hello this is a new day"</span>result <span class="token operator">=</span> str<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 按照空格截取</span><span class="token comment" spellcheck="true"># ['hello', 'this', 'is', 'a', 'new', 'day']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者比如要是想拆分单个字符(拆分单个字符必须变成数组)</p><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> <span class="token string">"hello"</span>result <span class="token operator">=</span> list<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 最后结果</span><span class="token comment" spellcheck="true"># ['h', 'e', 'l', 'l', 'o']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>find()搜索指定字符串,有就返回序号,没有就返回-1</li></ul><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> <span class="token string">"hello"</span>result <span class="token operator">=</span> str<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>个数 len()统计出字符串个数</li></ul><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> <span class="token string">"hello"</span>result <span class="token operator">=</span> len<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 最后结果</span><span class="token comment" spellcheck="true"># 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>替换 replace() 两个参数 第一个参数要替换的值 第二个参数替换成什么值, 这里特别注意的就是 replace 不改变原字符串,它只改变新的字符串</li></ul><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> <span class="token string">"hello"</span>result <span class="token operator">=</span> str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># hwllo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>range 生成一个整数的序列,一般配套 list 使用</p></li><li><p>它接收 3 个参数(起始,结束,步长) 包前不包后</p></li></ul><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> <span class="token string">"hello"</span>result <span class="token operator">=</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>result2 <span class="token operator">=</span> list<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># [0,1,2,3,4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-python"><code class="language-python">result <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">for</span> content <span class="token keyword">in</span> list<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 2,4,6,8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>地址需要转义字符\ 也可以前面加个 r 这样就不是一个普通字符串而是一个原始字符串</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token string">'c:\windows\webbrowers'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># c:\windows\webbrowers</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h2><blockquote><p>在 Python 里面 布尔类型其实也属于数字类型的一种,True 就是 1 False 就是 0</p></blockquote><pre class="line-numbers language-python"><code class="language-python">result <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>result2 <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 1</span><span class="token comment" spellcheck="true"># 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在 Python 中布尔值首字母需要大写比如 True 和 False</li></ul><pre class="line-numbers language-python"><code class="language-python">result <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">if</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是对的"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是错的"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果这是对的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>布尔类型的其他也可以当作 True 或者 False</li></ul><pre class="line-numbers language-python"><code class="language-python">result <span class="token operator">=</span> <span class="token number">60</span><span class="token operator">/</span><span class="token number">1</span><span class="token keyword">if</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是对的"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是错的"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这种也是可以的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>特别强调的是这里与 JS 不一样,Python 中{}[]它的布尔类型为 False</li></ul><pre class="line-numbers language-python"><code class="language-python">result <span class="token operator">=</span> bool<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果False</span>result2 <span class="token operator">=</span> bool<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果False</span>result3 <span class="token operator">=</span> bool<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果 False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="变量名和赋值语句"><a href="#变量名和赋值语句" class="headerlink" title="变量名和赋值语句"></a>变量名和赋值语句</h2><h3 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h3><ul><li><p>只能包含字母,数字和下划线</p></li><li><p>只能一个词，不能是关键字比如 class ,print 之类的</p></li><li><p>不能以数字开头</p></li></ul><p>变量名是区分大小写的.</p><h3 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h3><ul><li>用”赋值语句”将值保存在变量中,赋值语句包含一个变量名，一个等号(称为赋值操作)以及要存储的值。如果输入赋值语句 result = 42 那么名叫 result 的变量就保存了类型是整型的值 42</li></ul><pre class="line-numbers language-python"><code class="language-python">result <span class="token operator">=</span> <span class="token number">42</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在 python 中值要是做四则运算必须赋值,否则不成立</li></ul><pre class="line-numbers language-python"><code class="language-python">num1 <span class="token operator">=</span> <span class="token number">23</span>num1 <span class="token operator">+</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果还是 23</span><span class="token comment" spellcheck="true"># 所以必须赋值</span>num2 <span class="token operator">=</span> <span class="token number">23</span>num2 <span class="token operator">+=</span> <span class="token number">10</span><span class="token comment" spellcheck="true"># num2 = num2 +10</span><span class="token keyword">print</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果 33</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>拼接的时候数字必须要变成字符串,否则 Python 会直接报错</li></ul><pre class="line-numbers language-python"><code class="language-python">result2 <span class="token operator">=</span> <span class="token string">"今天是"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"号"</span><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>同理使用数字求运算的时候必须</li></ul><pre class="line-numbers language-python"><code class="language-python">num1 <span class="token operator">=</span> <span class="token number">23</span>num2 <span class="token operator">=</span> <span class="token string">'28'</span><span class="token keyword">print</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> int<span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 51</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最常用的几个函数"><a href="#最常用的几个函数" class="headerlink" title="最常用的几个函数"></a>最常用的几个函数</h3><ul><li>print() 将括号内的字符串显示在屏幕上</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># Hello World</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要是后面设置了 end 参数表示后面的数据取消了换行</p><pre class="line-numbers language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">"今天开始"</span>str2 <span class="token operator">=</span> <span class="token string">"明天结束"</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 今天开始明天结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>input()函数 获取到用户输入的内容,里面的参数就是提示用户输入的</li></ul><pre class="line-numbers language-python"><code class="language-python">myName <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入名称'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>myName<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 输出用户自己输入的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>len() 获取到个数</li></ul><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span><span class="token string">'今天开始'</span>myName <span class="token operator">=</span> len<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>myName<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习汇总版本笔记</title>
      <link href="/2020/01/29/pythonresultall/"/>
      <url>/2020/01/29/pythonresultall/</url>
      
        <content type="html"><![CDATA[<h2 id="目录分类"><a href="#目录分类" class="headerlink" title="目录分类"></a>目录分类</h2><h3 id="python-数据类型-一"><a href="#python-数据类型-一" class="headerlink" title="python 数据类型(一)"></a><a href="https://jsopy.gitee.io/2020/01/30/pythonresult1/">python 数据类型(一)</a></h3><h3 id="python-中的-if-和循环-二"><a href="#python-中的-if-和循环-二" class="headerlink" title="python 中的 if 和循环(二)"></a><a href="https://jsopy.gitee.io/2020/01/31/pythonresult2/">python 中的 if 和循环(二)</a></h3><h3 id="模块-三"><a href="#模块-三" class="headerlink" title="模块(三)"></a><a href="https://jsopy.gitee.io/2020/02/01/pythonresult3/">模块(三)</a></h3><h3 id="函数-四"><a href="#函数-四" class="headerlink" title="函数(四)"></a><a href="https://jsopy.gitee.io/2020/02/02/pythonresult4/">函数(四)</a></h3><h3 id="异常-五"><a href="#异常-五" class="headerlink" title="异常(五)"></a><a href="https://jsopy.gitee.io/2020/02/03/pythonresult5/">异常(五)</a></h3><h3 id="列表和元组-六"><a href="#列表和元组-六" class="headerlink" title="列表和元组(六)"></a><a href="https://jsopy.gitee.io/2020/02/04/pythonresult6/">列表和元组(六)</a></h3><h3 id="字典和结构化数据-七"><a href="#字典和结构化数据-七" class="headerlink" title="字典和结构化数据(七)"></a><a href="https://jsopy.gitee.io/2020/02/05/pythonresult7/">字典和结构化数据(七)</a></h3><h3 id="模式匹配和正则表达式-八"><a href="#模式匹配和正则表达式-八" class="headerlink" title="模式匹配和正则表达式(八)"></a><a href="https://jsopy.gitee.io/2020/02/06/pythonresult8/">模式匹配和正则表达式(八)</a></h3><h3 id="读写文件-九"><a href="#读写文件-九" class="headerlink" title="读写文件(九)"></a><a href="https://jsopy.gitee.io/2020/02/07/pythonresult9/">读写文件(九)</a></h3><h3 id="组织文件-十"><a href="#组织文件-十" class="headerlink" title="组织文件(十)"></a><a href="https://jsopy.gitee.io/2020/02/08/pythonresult10/">组织文件(十)</a></h3><h3 id="调试-十一"><a href="#调试-十一" class="headerlink" title="调试(十一)"></a><a href="https://jsopy.gitee.io/2020/02/09/pythonresult11/">调试(十一)</a></h3><h3 id="从-Web-中抓取信息-十二"><a href="#从-Web-中抓取信息-十二" class="headerlink" title="从 Web 中抓取信息(十二)"></a><a href="https://jsopy.gitee.io/2020/02/10/pythonresult12/">从 Web 中抓取信息(十二)</a></h3><h3 id="处理-Excel-电子表格-十三"><a href="#处理-Excel-电子表格-十三" class="headerlink" title="处理 Excel 电子表格(十三)"></a><a href="https://jsopy.gitee.io/2020/02/11/pythonresult13/">处理 Excel 电子表格(十三)</a></h3><h3 id="处理-PDF-和-Word-文档-十四"><a href="#处理-PDF-和-Word-文档-十四" class="headerlink" title="处理 PDF 和 Word 文档(十四)"></a><a href="https://jsopy.gitee.io/2020/02/12/pythonresult14/">处理 PDF 和 Word 文档(十四)</a></h3><h3 id="时间-计划任务和启动程序-十五"><a href="#时间-计划任务和启动程序-十五" class="headerlink" title="时间,计划任务和启动程序(十五)"></a><a href="https://jsopy.gitee.io/2020/02/13/pythonresult15/">时间,计划任务和启动程序(十五)</a></h3><h3 id="多线程-了解-和打开其他应用程序-十六"><a href="#多线程-了解-和打开其他应用程序-十六" class="headerlink" title="多线程(了解)和打开其他应用程序(十六)"></a><a href="https://jsopy.gitee.io/2020/02/14/pythonresult16/">多线程(了解)和打开其他应用程序(十六)</a></h3><h3 id="Python-操作图像-十七"><a href="#Python-操作图像-十七" class="headerlink" title="Python 操作图像(十七)"></a><a href="https://jsopy.gitee.io/2020/02/15/pythonresult17/">Python 操作图像(十七)</a></h3><h3 id="Python-邮件-十八"><a href="#Python-邮件-十八" class="headerlink" title="Python 邮件(十八)"></a><a href="https://jsopy.gitee.io/2020/02/16/pythonresult18/">Python 邮件(十八)</a></h3>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合 和推倒数据,处理数据</title>
      <link href="/2020/01/28/headinpython5/"/>
      <url>/2020/01/28/headinpython5/</url>
      
        <content type="html"><![CDATA[<h1 id="推倒数据-处理数据"><a href="#推倒数据-处理数据" class="headerlink" title="推倒数据,处理数据"></a>推倒数据,处理数据</h1><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>体育老师需要检测 4 个学生最好的数据</p><p>数据格式如下</p><p>One.txt</p><pre class="line-numbers language-mysql"><code class="language-mysql">2-34,3:21,2.34,2.45,3.01,3:41,2:01,3:10,2-22<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Two.txt</p><pre class="line-numbers language-mysql"><code class="language-mysql">2.59,2.11,2:11,2:23,3-10,2-23,3:10,3.21,3-21<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Three.txt</p><pre class="line-numbers language-mysql"><code class="language-mysql">2:58,2.58,2:39,2-25,2-55,2:54,2.18,2:55,2:55<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Four.txt</p><pre class="line-numbers language-mysql"><code class="language-mysql">2:22,3.01,3:01,3.02,3:02,3.02,3:22,2.49,2:38<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>下面就是统计数据 然后分析数据</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 引入正则模块</span><span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">printresult</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> result<span class="token punctuation">:</span>        content <span class="token operator">=</span> result<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> content<span class="token punctuation">:</span>            splitestr<span class="token punctuation">(</span>item<span class="token punctuation">,</span> arr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># arr变化了</span>        findbetter<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 最后的结果</span><span class="token keyword">def</span> <span class="token function">splitestr</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    resultall <span class="token operator">=</span> item<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> resultall<span class="token punctuation">:</span>        finalresult <span class="token operator">=</span> <span class="token string">''</span>        result <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'(\d+)'</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 找到数字</span>        <span class="token keyword">for</span> _item <span class="token keyword">in</span> result<span class="token punctuation">:</span>            finalresult <span class="token operator">+=</span> str<span class="token punctuation">(</span>_item<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 变成字符串</span>        arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span>finalresult<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 比大小</span><span class="token keyword">def</span> <span class="token function">findbetter</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    maxitem <span class="token operator">=</span> int<span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            itemnext <span class="token operator">=</span> int<span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            itemnext <span class="token operator">=</span> int<span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> itemnext <span class="token operator">></span> maxitem<span class="token punctuation">:</span>            maxitem <span class="token operator">=</span> itemnext    result <span class="token operator">=</span> str<span class="token punctuation">(</span>maxitem<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"最好的成绩就是"</span><span class="token operator">+</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"分"</span><span class="token operator">+</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"秒"</span><span class="token punctuation">)</span>arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>printresult<span class="token punctuation">(</span><span class="token string">'One.txt'</span><span class="token punctuation">,</span> arr1<span class="token punctuation">)</span>arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>printresult<span class="token punctuation">(</span><span class="token string">'Two.txt'</span><span class="token punctuation">,</span> arr2<span class="token punctuation">)</span>arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>printresult<span class="token punctuation">(</span><span class="token string">'Three.txt'</span><span class="token punctuation">,</span> arr3<span class="token punctuation">)</span>arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>printresult<span class="token punctuation">(</span><span class="token string">'Four.txt'</span><span class="token punctuation">,</span> arr4<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><ul><li><p>集合里面不能有重复的值</p></li><li><p>集合使用{}来表示</p></li><li><p>通过 set()函数来制造集合</p></li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token punctuation">(</span>set<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 集合{}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="集合内部操作"><a href="#集合内部操作" class="headerlink" title="集合内部操作"></a>集合内部操作</h3><ul><li>in 判断是否在里面</li></ul><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'abccddadada'</span><span class="token punctuation">)</span>result <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token keyword">in</span> str<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>添加元素 add</li></ul><pre class="line-numbers language-python"><code class="language-python">str1 <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'abccddadada'</span><span class="token punctuation">)</span>str1<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># {'a', 'c', 'd', 'e', 'b'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>移除元素 remove (这样元素不存在,则会发生错误)</li></ul><pre class="line-numbers language-python"><code class="language-python">str1 <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'abccddadada'</span><span class="token punctuation">)</span>str1<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span>str1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># {'b', 'd', 'a', 'c'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>移除元素 2 discard() (这样即使元素不存在,也不会发生错误)</li></ul><pre class="line-numbers language-python"><code class="language-python">str1 <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'abccddadada'</span><span class="token punctuation">)</span>str1<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># {'b', 'd', 'c'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>随机删除一个元素 pop()</li></ul><pre class="line-numbers language-python"><code class="language-python">str1 <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'abccddadada'</span><span class="token punctuation">)</span>str1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果随机删除</span><span class="token comment" spellcheck="true"># {'b', 'd', 'c'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>计算集合的个数</li></ul><pre class="line-numbers language-python"><code class="language-python">str1 <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'abccddadada'</span><span class="token punctuation">)</span>length <span class="token operator">=</span> len<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>清空集合</li></ul><pre class="line-numbers language-python"><code class="language-python">str1 <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'abccddadada'</span><span class="token punctuation">)</span>str1<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># set()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>集合复制</li></ul><pre class="line-numbers language-python"><code class="language-python">str1 <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'abccddadada'</span><span class="token punctuation">)</span>str2 <span class="token operator">=</span> str1<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果 {'a', 'c', 'b', 'd'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="两个集合之间的操作"><a href="#两个集合之间的操作" class="headerlink" title="两个集合之间的操作"></a>两个集合之间的操作</h3><ul><li>取差集 (a 包含而 b 不包含)</li></ul><pre class="line-numbers language-python"><code class="language-python">str1 <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'abccddadada'</span><span class="token punctuation">)</span>str2 <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'bbbcde'</span><span class="token punctuation">)</span>result <span class="token operator">=</span> str1<span class="token operator">-</span>str2<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># {'a'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>取并集 a | b</li></ul><pre class="line-numbers language-python"><code class="language-python">str1 <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'abccddadada'</span><span class="token punctuation">)</span>str2 <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'bbbcde'</span><span class="token punctuation">)</span>result <span class="token operator">=</span> str1 <span class="token operator">|</span> str2<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># {'a','b','c','d','e'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>取交集 a&amp;b</li></ul><pre class="line-numbers language-python"><code class="language-python">str1 <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'abccddadada'</span><span class="token punctuation">)</span>str2 <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'bbbcde'</span><span class="token punctuation">)</span>result <span class="token operator">=</span> str1 <span class="token operator">&amp;</span> str2<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># {'c','b','d'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不同时包含 a 和 b 的元素(b 中 a 没有的元素,a 中 b 没有的元素)</li></ul><pre class="line-numbers language-python"><code class="language-python">str1 <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'abccddadada'</span><span class="token punctuation">)</span>str2 <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'bbbcde'</span><span class="token punctuation">)</span>result <span class="token operator">=</span> str1 <span class="token operator">^</span> str2<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># {'e','a'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 基础(九) 表进行分组</title>
      <link href="/2020/01/27/mysqlbasic9/"/>
      <url>/2020/01/27/mysqlbasic9/</url>
      
        <content type="html"><![CDATA[<h1 id="对表进行分组"><a href="#对表进行分组" class="headerlink" title="对表进行分组"></a>对表进行分组</h1><h2 id="学习重点"><a href="#学习重点" class="headerlink" title="学习重点"></a>学习重点</h2><ul><li><p>使用 GROUP BY 子句可以像切蛋糕那样将表分隔,通过使用聚合函数和 GROUP BY 子句,可以依据”商品种类”或者”日期”等将表分隔后在汇总</p></li><li><p>聚合键中包含 NULL 时,在结果中会以”不确定”行(空行)的形式表现出来.</p></li><li><p>使用聚合函数或者 GROOUP BY 需要注意以下 4 点</p></li></ul><blockquote><p>特别注意</p></blockquote><blockquote><blockquote><p>1.只能写在 select 子句中<br>2.GROUP BY 子句中不能使用 SELECT 子句中列的别名<br>3.GROUP BY 子句中的聚合结果是无序的<br>4.where 子句中不能使用聚合函数</p></blockquote></blockquote><h2 id="GROUP-BY-子句"><a href="#GROUP-BY-子句" class="headerlink" title="GROUP BY 子句"></a>GROUP BY 子句</h2><ul><li>基本语法</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT <列名>,<列名>,<列名>,...FROM <表名> GROUP BY <列名一>,<列名二><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>实际操作,以上个单元来举例</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT product_name,product_type,COUNT(*) FROM Product GROUP BY product_type<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>最后结果</li></ul><table><thead><tr><th>product_type</th><th>COUNT(*)</th></tr></thead><tbody><tr><td>办公用品</td><td>2</td></tr><tr><td>厨房厨具</td><td>4</td></tr><tr><td>衣服</td><td>2</td></tr></tbody></table><blockquote><p>在 GROUP BY 子句中指定的列称为聚合键或者分组列,Group BY 一般和聚合函数一起使用,因为它一定会求组中的聚合属性</p></blockquote><h3 id="GROUP-BY-子句的书写位置"><a href="#GROUP-BY-子句的书写位置" class="headerlink" title="GROUP BY 子句的书写位置"></a>GROUP BY 子句的书写位置</h3><ul><li>GROUP BY 书写位置有严格要求,一定要写在 FROM 之后(如果有 WHERE，一定要写在 WHERE 之后)</li></ul><h4 id="书写顺序"><a href="#书写顺序" class="headerlink" title="书写顺序"></a>书写顺序</h4><p>1.SELECT-&gt;2.FROM -&gt;3.WHERE-&gt;4.GROUP BY</p><h3 id="聚合键中包含-NULL-的情况"><a href="#聚合键中包含-NULL-的情况" class="headerlink" title="聚合键中包含 NULL 的情况"></a>聚合键中包含 NULL 的情况</h3><p>GROUP BY 分组里面有 NULL，它也会划分</p><ul><li>代码</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT COUNT(*), purchase_price from product GROUP BY purchase_price;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>这样当结果中包含 NULL 时,也会将 NULL 作为一组特定的数据</li></ul><table><thead><tr><th>COUNT(*)</th><th>purchase_price</th></tr></thead><tbody><tr><td>2</td><td>NULL</td></tr><tr><td>1</td><td>320</td></tr><tr><td>1</td><td>500</td></tr><tr><td>1</td><td>790</td></tr><tr><td>3</td><td>2800</td></tr><tr><td>1</td><td>5000</td></tr></tbody></table><h3 id="使用-WHERE-子句时-GROUP-BY-的执行结果"><a href="#使用-WHERE-子句时-GROUP-BY-的执行结果" class="headerlink" title="使用 WHERE 子句时 GROUP BY 的执行结果"></a>使用 WHERE 子句时 GROUP BY 的执行结果</h3><ul><li>在使用了 GROUP BY 子句的 SELECT 子句中,也可以正常使用 WHERE 子句</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT <列名>,<列名2>,....FROM <表名>WHEREGROUP BY <列名1><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样使用的时候会先依据 WHERE 子句对记录过滤</p><ul><li>具体使用</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT purchase_price,COUNT(*)FROM ProductWHERE product_type = '衣服'GROUP BY purchase_price;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果</li></ul><table><thead><tr><th>purchase_price</th><th>COUNT(*)</th></tr></thead><tbody><tr><td>500</td><td>1</td></tr><tr><td>2800</td><td>1</td></tr></tbody></table><ul><li>有了 GROUP BY 执行的顺序</li></ul><blockquote><p>FROM - WHERE - GROUP BY - SELECT</p></blockquote><h3 id="GROUP-BY-特别注意"><a href="#GROUP-BY-特别注意" class="headerlink" title="GROUP BY 特别注意"></a>GROUP BY 特别注意</h3><h4 id="在使用-GROUP-BY-的时候-SELECT-子句中不能出现聚合键之外的列名"><a href="#在使用-GROUP-BY-的时候-SELECT-子句中不能出现聚合键之外的列名" class="headerlink" title="在使用 GROUP BY 的时候,SELECT 子句中不能出现聚合键之外的列名"></a>在使用 GROUP BY 的时候,SELECT 子句中不能出现聚合键之外的列名</h4><ul><li>MYSQL 中没事,但是其他的数据库不行</li></ul><p>因为使用 GROUP BY 就已经分组了,所以 就会出现有的时候并不一定是一对一关系的.<br>比如按照价格来分类的话,名称会非常多.做不到一对一</p><h4 id="在-GROUP-BY-子句中不能使用-SELECT-子句中定义的别名"><a href="#在-GROUP-BY-子句中不能使用-SELECT-子句中定义的别名" class="headerlink" title="在 GROUP BY 子句中不能使用 SELECT 子句中定义的别名"></a>在 GROUP BY 子句中不能使用 SELECT 子句中定义的别名</h4><ul><li>GROUP BY 中 写了列的别名</li></ul><p>比如</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT product_type AS PT,COUNT(*) FROM Product GROUP BY PT;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="GROUP-BY-不能对结果排序-所以它是无序的"><a href="#GROUP-BY-不能对结果排序-所以它是无序的" class="headerlink" title="GROUP BY 不能对结果排序,所以它是无序的"></a>GROUP BY 不能对结果排序,所以它是无序的</h4><h4 id="WHERE-子句中绝对不能使用聚合函数"><a href="#WHERE-子句中绝对不能使用聚合函数" class="headerlink" title="WHERE 子句中绝对不能使用聚合函数"></a>WHERE 子句中绝对不能使用聚合函数</h4><ul><li>比如错误的</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECR * FROM Product WHERE COUNT(*) =2 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>只有 SELECT 子句和 HAVING 子句(以及 ORDER BY 子句) 中能够使用聚合函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件与异常和 JSON</title>
      <link href="/2020/01/26/headinpython4/"/>
      <url>/2020/01/26/headinpython4/</url>
      
        <content type="html"><![CDATA[<h1 id="文件与异常和-JSON"><a href="#文件与异常和-JSON" class="headerlink" title="文件与异常和 JSON"></a>文件与异常和 JSON</h1><blockquote><p>只有把抱怨环境的心情，化为上进的力量，才是成功的保证。——罗曼·罗兰</p></blockquote><h2 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h2><ul><li>检查路径有效性: os.path.exists()</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> ospath <span class="token operator">=</span> <span class="token string">'E:\TextCode\mdall\PythonBasic1.md'</span>result <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>拼接路径 os.path.join</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> osresult <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token string">'bin'</span><span class="token punctuation">,</span> <span class="token string">'spanm'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># user\bin\spanm</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看文件大小 os.path.getsize(路径)</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> ospath <span class="token operator">=</span> <span class="token string">'E:\TextCode\mdall\PythonBasic1.md'</span>result <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>获取当前路径 getcwd()</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> osresult <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># E:\TextCode\Python\Python4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>切换为包含数据文件的文件夹 chdir(路径)</p></li><li><p>路径一定是反斜杠 ‘/‘</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'E:/TextCode/files'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 改变路径</span>result <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取当前路径</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># E:\TextCode\files</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件打开和读写"><a href="#文件打开和读写" class="headerlink" title="文件打开和读写"></a>文件打开和读写</h2><h3 id="文件读"><a href="#文件读" class="headerlink" title="文件读"></a>文件读</h3><ul><li>基本语法</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span>路径<span class="token punctuation">,</span><span class="token string">'读(r)或写(w)或后面插入(a)'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 变量名  <span class="token comment" spellcheck="true"># readline 仅仅只读1行</span>  <span class="token comment" spellcheck="true"># readlines 一行一行读,也可以换成read()那它是一个一个读</span>  <span class="token comment" spellcheck="true">#  xxx = 变量名.read()</span>  xxx <span class="token operator">=</span> 变量名<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#一般情况里面跟for 循环</span>   <span class="token keyword">for</span> item <span class="token keyword">in</span> xxx<span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>xxx<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 取消掉\r\n</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>具体的写法</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'text1.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> data<span class="token punctuation">:</span>    content <span class="token operator">=</span> data<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 结果就是list</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>逐行读,readlines()</li></ul><pre class="line-numbers language-python"><code class="language-python">result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'text1.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> data<span class="token punctuation">:</span>    content <span class="token operator">=</span> data<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 结果就是list</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"--------------\r\n"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> content<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#取消掉右边的\r\n</span>    result<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 会多出一个\n所以去掉</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>若是 JSON 文件 可以使用 json.load 直接读</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'data.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> data<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这样读取出来就是个json文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h3><ul><li>基本语法</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span>路径<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> data<span class="token punctuation">:</span>     data<span class="token punctuation">.</span>write<span class="token punctuation">(</span>xxxxx<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>用到例子上</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"text3.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> data<span class="token punctuation">:</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        data<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"测试写了"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"次"</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>附加模式,已经有文件 从后面加入</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"text3.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> data<span class="token punctuation">:</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        data<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"测试写了"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"次"</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 他就是在文件的最后加入数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h2><blockquote><p>异常就是代码出问题时候 Python 解释器会显示一个 traceback，后面会跟着一个错误消息</p></blockquote><ul><li>基本用法</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>   <span class="token punctuation">(</span>有可能导致错误的代码<span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token punctuation">(</span>当出现错误的时候要执行的代码<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>具体使用</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Wrong"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JSON-模块"><a href="#JSON-模块" class="headerlink" title="JSON 模块"></a>JSON 模块</h2><ul><li><p>json.dumps() 将对象变成字符串</p></li><li><p>json.loads() 将字符串变成对象</p></li></ul><p>———文件不需要加 S——–</p><ul><li><p>json.dump() 将对象编程字符串,并写入文件中去</p></li><li><p>json.load() 用户从 JSON 文件中读取数据</p></li></ul><h3 id="json-dump-和-json-load"><a href="#json-dump-和-json-load" class="headerlink" title="json.dump 和 json.load"></a>json.dump 和 json.load</h3><ul><li><p>从文件中读取数据后写入文件</p></li><li><p>ensure_ascii=False 表示不要把 asc 码转换</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'data.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> data<span class="token punctuation">:</span>    content <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'text4.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> data2<span class="token punctuation">:</span>        json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>content<span class="token punctuation">,</span> data2<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="json-dumps-和-json-loads"><a href="#json-dumps-和-json-loads" class="headerlink" title="json.dumps 和 json.loads"></a>json.dumps 和 json.loads</h3><ul><li>json.dump</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> jsonobj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"哈哈哈"</span><span class="token punctuation">,</span>    <span class="token string">"Sex"</span><span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">}</span>result <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果就是string</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>json.loads</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> jsonobj <span class="token operator">=</span> <span class="token string">'{"name": "哈哈哈","Sex": "男"}'</span>result <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果就是dict</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 基础(八) 聚合函数</title>
      <link href="/2020/01/25/mysqlbasic8/"/>
      <url>/2020/01/25/mysqlbasic8/</url>
      
        <content type="html"><![CDATA[<h1 id="聚合与排序"><a href="#聚合与排序" class="headerlink" title="聚合与排序"></a>聚合与排序</h1><h2 id="学习重点"><a href="#学习重点" class="headerlink" title="学习重点"></a>学习重点</h2><p>随着表中记录(数据行)的不断积累,存储数据逐渐增加,有时候我们可能希望计算出这些数据的合计值或者平均值等。本章我们将进行数据汇总操作.此外还能学习在汇总操作时指定条件,以及对汇总结果进行升序,降序的排序方法</p><h2 id="对表进行聚合查询"><a href="#对表进行聚合查询" class="headerlink" title="对表进行聚合查询"></a>对表进行聚合查询</h2><h3 id="学习重点-1"><a href="#学习重点-1" class="headerlink" title="学习重点"></a>学习重点</h3><ul><li><p>使用聚合函数对表中的列进行计算合计值或者平均值等的汇总操作</p></li><li><p>通常聚合函数会对 NULL 以外的对象进行汇总,但是只有 COUNT 函数例外,使用 COUNT(*)可以查出包含 NULL 在内的全部数据的行数</p></li><li><p>使用 DISTINCT 关键字删除重复值</p></li></ul><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><p>通过 SQL 对数据进行某种操作或计算时需要使用函数,比如计算表中全部数据的行数,可以使用 COUNT 函数.先记住 5 个常用的函数</p><ul><li><p>COUNT: 计算表中的记录数(行数)</p></li><li><p>SUM:计算表中数值列中数据的合计值</p></li><li><p>AVG:计算表中数值列中数据的平均值</p></li><li><p>MAX:求出表中任意列中数据的最大值</p></li><li><p>MIN:求出表中任意列中数据的最小值</p></li></ul><blockquote><p>用于汇总的函数称为聚合函数或者聚集函数,所谓聚合就是将多行汇总为一行</p></blockquote><h3 id="计算表中数据的行数"><a href="#计算表中数据的行数" class="headerlink" title="计算表中数据的行数"></a>计算表中数据的行数</h3><blockquote><p>COUNT(*) 统计全部数据 而 COUNT(列名)只统计非空数据</p></blockquote><ul><li>基础代码</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT COUNT(*) FROM 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>COUNT() 中的星号 代表全部列,也可以换成别的,比如列名</p><ul><li>拿上个单元举例子</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT COUNT(*) AS '总数' FROM Product;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后结果</p><table><thead><tr><th>总数</th></tr></thead><tbody><tr><td>8</td></tr></tbody></table><h3 id="计算-NULL-之外的数据的行数"><a href="#计算-NULL-之外的数据的行数" class="headerlink" title="计算 NULL 之外的数据的行数"></a>计算 NULL 之外的数据的行数</h3><blockquote><p>上个单元比如统计 purchase_price 中非空行</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT COUNT(purchase_price) AS '总数' FROM Product;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后结果:因为有两行的数据是空行</p><table><thead><tr><th>总数</th></tr></thead><tbody><tr><td>6</td></tr></tbody></table><h3 id="计算合计值"><a href="#计算合计值" class="headerlink" title="计算合计值"></a>计算合计值</h3><blockquote><p>除了 COUNT 以外 其他的聚合函数都只能写列名，并且统计非 NULL 数据</p></blockquote><h4 id="SUM-函数"><a href="#SUM-函数" class="headerlink" title="SUM 函数"></a>SUM 函数</h4><blockquote><p>数字求和 ,要是里面有字符串则都是 0</p></blockquote><ul><li>基础版本</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT SUM(列名) AS 'xxx' FROM 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>上个单元求和</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT SUM(purchase_price) AS '总数' FROM Product;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>最后结果</li></ul><table><thead><tr><th>总数</th></tr></thead><tbody><tr><td>12210</td></tr></tbody></table><ul><li>多列求和</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT SUM(purchase_price) AS '价格总数',SUM(sale_price) AS '总数' FROM Product;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>最后结果</li></ul><table><thead><tr><th>价格总数</th><th>总数</th></tr></thead><tbody><tr><td>12210</td><td>16780</td></tr></tbody></table><h4 id="计算平均值-AVG"><a href="#计算平均值-AVG" class="headerlink" title="计算平均值 AVG"></a>计算平均值 AVG</h4><blockquote><p>它的语法与 SUM 完全相同,但是返回的数字是浮点型 有小数点,小数点有 4 位</p></blockquote><ul><li>基础语法</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT AVG(列名) AS 'xxxx' FROM 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>上个单元</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT AVG(purchase_price) AS '价格平均数' FROM Product;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>最后结果</li></ul><table><thead><tr><th>价格平均数</th></tr></thead><tbody><tr><td>2035.0000</td></tr></tbody></table><ul><li>多列</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT AVG(purchase_price) AS '价格总数',AVG(sale_price) AS '总数' FROM Product;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>最后结果</li></ul><table><thead><tr><th>价格总数</th><th>总数</th></tr></thead><tbody><tr><td>2035.0000</td><td>2097.5000</td></tr></tbody></table><h4 id="计算最大值和最小值"><a href="#计算最大值和最小值" class="headerlink" title="计算最大值和最小值"></a>计算最大值和最小值</h4><blockquote><p>要是想计算最大值和最小值可以用 Max 和 Min 函数, 这两个函数适用于任何数据类型</p></blockquote><ul><li>基本用法</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT MAX(列名) AS 'xxxx' FROM 表名;SELECT MIN(列名) AS 'xxxx' FROM 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>上个单元</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT MAX(purchase_price) AS '最大值',MIN(sale_price) AS '最小值' FROM Product;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>最后结果</li></ul><table><thead><tr><th>最大值</th><th>最小值</th></tr></thead><tbody><tr><td>5000</td><td>100</td></tr></tbody></table><ul><li>字符串</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT MAX(product_name) AS '最大值',MIN(product_id) AS '最小值' FROM Product;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>最后结果</li></ul><table><thead><tr><th>最大值</th><th>最小值</th></tr></thead><tbody><tr><td>高压锅</td><td>0001</td></tr></tbody></table><h4 id="使用聚合函数删除重复值-关键字-DISTINCT"><a href="#使用聚合函数删除重复值-关键字-DISTINCT" class="headerlink" title="使用聚合函数删除重复值(关键字 DISTINCT)"></a>使用聚合函数删除重复值(关键字 DISTINCT)</h4><ul><li>删除基本数据</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT COUNT(DISTINCT product_type) FROM Product<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>最后结果</li></ul><table><thead><tr><th>COUNT(DISTINCT product_type)</th></tr></thead><tbody><tr><td>3</td></tr></tbody></table><blockquote><p>这里特别注意 DISTINCT 必须写在括号中,因为必须要在计算行数之前删除 product_type 列中的重复数据.如果写在外面的话 会计算出数据的行数,再删除重复数据，结果就是 producr_type 列的所有行数</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT DISTINCT COUNT(product_type) FROM Product<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果</p><table><thead><tr><th>COUNT</th></tr></thead><tbody><tr><td>8</td></tr></tbody></table><ul><li>类似其他的聚合函数</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT SUM(DISTINCT purchase_price) AS '总数',SUM(DISTINCT sale_price ) AS '合值'FROM Product;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>最后结果</li></ul><table><thead><tr><th>总数</th><th>合值</th></tr></thead><tbody><tr><td>9410</td><td>16280</td></tr></tbody></table><blockquote><p>在聚合函数的参数中使用 DISTINCT,就可以删除重复数据</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模块</title>
      <link href="/2020/01/24/headinpython3/"/>
      <url>/2020/01/24/headinpython3/</url>
      
        <content type="html"><![CDATA[<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><blockquote><p>要使整个人生都过得舒适、愉快，这是不可能的，因为人类必须具备一种能应付逆境的态度。——卢梭</p></blockquote><h2 id="代码复用性"><a href="#代码复用性" class="headerlink" title="代码复用性"></a>代码复用性</h2><ul><li><p>模块允许你合理组织代码来实现最优共享</p></li><li><p>发布工具允许你向全世界共享你的模块</p></li></ul><h2 id="模块-1"><a href="#模块-1" class="headerlink" title="模块"></a>模块</h2><h3 id="Python-大部分的模块-类库-都放到了-pypi-上面-需要什么直接搜索-网址https-pypi-org"><a href="#Python-大部分的模块-类库-都放到了-pypi-上面-需要什么直接搜索-网址https-pypi-org" class="headerlink" title="Python 大部分的模块(类库) 都放到了 pypi 上面 需要什么直接搜索.网址https://pypi.org/"></a>Python 大部分的模块(类库) 都放到了 pypi 上面 需要什么直接搜索.网址<a href="https://pypi.org/" target="_blank" rel="noopener">https://pypi.org/</a></h3><h3 id="函数转换为模块"><a href="#函数转换为模块" class="headerlink" title="函数转换为模块"></a>函数转换为模块</h3><ul><li><p>模块解释一个包含 Python 代码的文本文件,对模块的主要需求就是文件名必须以.py 结尾,他要你把函数转换一个模块,需要把代码保存到一个适当命名的文件中</p></li><li><p>拿上单元的递归函数举例子,我们可以把这个函数单独放到一个 py 文件里,取名 util.py</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">''' 作者:雾烟云 时间:2020年 功能:打印出数组里面每一个数组,要是没有就打印出第一个值'''</span><span class="token keyword">def</span> <span class="token function">printresult</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> item <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> type<span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token keyword">is</span> list<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>            printresult<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            count <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> count <span class="token operator">==</span> len<span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"一切都结束了"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li>单行注释</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 这就是单行注释</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>多行注释就是 ‘’’</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''这就是多行注释'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><h4 id="建立模块"><a href="#建立模块" class="headerlink" title="建立模块"></a>建立模块</h4><ul><li>为这个模块创建一个文件夹,起名字 nester 文件夹(名字可以随便设置),然后把模块文件(刚才写好的)放到文件夹下</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">printresult</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> item <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> type<span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token keyword">is</span> list<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>            printresult<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            count <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> count <span class="token operator">==</span> len<span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"一切都结束了"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在新文件夹中创建一个 setup.py 的文件,增加如下代码</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> distutils<span class="token punctuation">.</span>core <span class="token keyword">import</span> setupsetup<span class="token punctuation">(</span>    name<span class="token operator">=</span><span class="token string">'CheckOutArr'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 名称</span>    version<span class="token operator">=</span><span class="token string">'1.0.0'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 版本号</span>    py_modules<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'nester'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 那个模块python文件的名称</span>    author<span class="token operator">=</span><span class="token string">'YJ'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 作者姓名</span>    author_email<span class="token operator">=</span><span class="token string">'2993222085@qq.com'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 作者邮箱</span>    url<span class="token operator">=</span><span class="token string">'https://jsopy.gitee.io/'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 作者网址</span>    description<span class="token operator">=</span><span class="token string">'这就是利用递归找出元素'</span>  <span class="token comment" spellcheck="true"># 描述</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>然后在这个文件夹下 打开终端端口,键入一个命令</li></ul><pre class="line-numbers language-python"><code class="language-python">python setup<span class="token punctuation">.</span>py sdist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样 执行完毕以后 他会在文件夹下面看到 dist 文件夹,setup.py,模块文件.py,还有一个 manifest</p><h4 id="安装类库"><a href="#安装类库" class="headerlink" title="安装类库"></a>安装类库</h4><ul><li>我们进入这个文件夹 执行 python setup.py install 命令安装</li></ul><pre class="line-numbers language-python"><code class="language-python">python setup<span class="token punctuation">.</span>py install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样在本地安装好了。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><h5 id="安装前"><a href="#安装前" class="headerlink" title="安装前"></a>安装前</h5><p>nester 文件夹下面只有两个文件,一个是 nester.py 另外那个是 setup.py</p><h5 id="安装后"><a href="#安装后" class="headerlink" title="安装后"></a>安装后</h5><p>nester 文件夹下面有两个文件夹</p><ul><li><p>build 下面有个文件夹 lib 里面就是模块文件的源代码</p></li><li><p>dist 里面有文件 就是发布包</p></li><li><p>模块文件源代码</p></li><li><p>xxx.pyc(可能有)编译版本的代码</p></li><li><p>setup.py (配置文件)</p></li><li><p>MANIFST 发布的文件列表</p></li></ul><h3 id="导入模块并使用"><a href="#导入模块并使用" class="headerlink" title="导入模块并使用"></a>导入模块并使用</h3><ul><li>导入模块使用,利用 import 语句</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> 包名称<span class="token punctuation">(</span>要是包的名称和模块起始文件不对应<span class="token punctuation">,</span>那就写模块起始文件文件名<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者直接写引入方法可以</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> 方法名 <span class="token keyword">import</span> 包名称<span class="token punctuation">(</span>要是包的名称和模块起始文件不对应<span class="token punctuation">,</span>那就写模块起始文件文件名<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>使用</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 调用模块封装好的方法</span><span class="token keyword">import</span> index2<span class="token comment" spellcheck="true"># 也可以 from index2 import printresult</span><span class="token comment" spellcheck="true"># 调用的时候就是 printresult(arr2)</span>arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'这个杀手不太冷'</span><span class="token punctuation">,</span> <span class="token number">1978</span><span class="token punctuation">,</span> <span class="token string">'唐人街探案'</span><span class="token punctuation">,</span> <span class="token number">1983</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>    <span class="token string">'囧妈'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'杀死比尔'</span><span class="token punctuation">,</span> <span class="token string">'蓝色生死恋'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"终结者"</span><span class="token punctuation">,</span> <span class="token string">'复仇者联盟'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>index2<span class="token punctuation">.</span>printresult<span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token triple-quoted-string string">'''['囧妈', ['杀死比尔', '蓝色生死恋', ['终结者', '复仇者联盟']]]['杀死比尔', '蓝色生死恋', ['终结者', '复仇者联盟']]['终结者', '复仇者联盟']终结者一切都结束了'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="发布到-PYPI-网站"><a href="#发布到-PYPI-网站" class="headerlink" title="发布到 PYPI 网站"></a>发布到 PYPI 网站</h3><ul><li><p>去 pypi 上面注册账号</p></li><li><p>上传代码</p></li></ul><ol><li>还是在刚才那个包文件目录下 打开终端输入命令:</li></ol><pre class="line-numbers language-python"><code class="language-python">python setup<span class="token punctuation">.</span>py register<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>依据提示输入</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span>Username<span class="token punctuation">:</span> xxxxPassword<span class="token punctuation">:</span> xxxxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>上传</li></ol><pre class="line-numbers language-mysql"><code class="language-mysql">setup.py  sdist upload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>处理列表的数据</title>
      <link href="/2020/01/23/headinpython2/"/>
      <url>/2020/01/23/headinpython2/</url>
      
        <content type="html"><![CDATA[<h1 id="处理列表数据"><a href="#处理列表数据" class="headerlink" title="处理列表数据"></a>处理列表数据</h1><blockquote><p>意志命运往往背道而驰，决心到最后会全部推倒。——莎士比亚</p></blockquote><h2 id="当数据量非常庞大-我们想获取到里面的数据该怎么办"><a href="#当数据量非常庞大-我们想获取到里面的数据该怎么办" class="headerlink" title="当数据量非常庞大,我们想获取到里面的数据该怎么办"></a>当数据量非常庞大,我们想获取到里面的数据该怎么办</h2><p>比如上个单元的存储的电影数组,要是上千条的数据,依据上单元的方法，只能一条条加,但是这样效率太低了.所以我们要引入一个新的概念 循环 也有人管这个叫迭代</p><h3 id="For-循环"><a href="#For-循环" class="headerlink" title="For 循环"></a>For 循环</h3><ul><li>循环就是重复做一件事。比如每天都要吃饭，这件事可以看成循环</li></ul><h4 id="For-循环处理任意大小的列表"><a href="#For-循环处理任意大小的列表" class="headerlink" title="For 循环处理任意大小的列表"></a>For 循环处理任意大小的列表</h4><ul><li>基本语法</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> 目标 <span class="token keyword">in</span> 数组 <span class="token punctuation">:</span>   具体的操作数组的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>首先 for in 关键字 后面必须有”:” 在 Python 中 没有大括号一说，他靠的都是空白符 也就是缩进，来表示在循环体内部还是外部</p></blockquote><ul><li>循环出内容</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'这个杀手不太冷'</span><span class="token punctuation">,</span> <span class="token string">'唐人街探案'</span><span class="token punctuation">,</span> <span class="token string">'囧妈'</span><span class="token punctuation">,</span> <span class="token string">'杀死比尔'</span><span class="token punctuation">,</span> <span class="token string">'蓝色生死恋'</span><span class="token punctuation">,</span> <span class="token string">"终结者"</span><span class="token punctuation">,</span> <span class="token string">"复仇者联盟"</span><span class="token punctuation">]</span><span class="token keyword">for</span> _item <span class="token keyword">in</span> arr<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>_item<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最后结果</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">这个杀手不太冷唐人街探案囧妈杀死比尔蓝色生死恋终结者复仇者联盟over<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>循环出序号和内容,则必须要变成枚举 利用 enumerate(数组,开始的序号)</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'这个杀手不太冷'</span><span class="token punctuation">,</span> <span class="token string">'唐人街探案'</span><span class="token punctuation">,</span> <span class="token string">'囧妈'</span><span class="token punctuation">,</span> <span class="token string">'杀死比尔'</span><span class="token punctuation">,</span> <span class="token string">'蓝色生死恋'</span><span class="token punctuation">,</span> <span class="token string">"终结者"</span><span class="token punctuation">,</span> <span class="token string">"复仇者联盟"</span><span class="token punctuation">]</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> val <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"---"</span><span class="token operator">+</span>val<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这里index是数字 所以前面必须加 str转一下变成字符串,int转一下变成数字</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 0---这个杀手不太冷</span><span class="token comment" spellcheck="true"># 1---唐人街探案</span><span class="token comment" spellcheck="true"># 2---囧妈</span><span class="token comment" spellcheck="true"># 3---杀死比尔</span><span class="token comment" spellcheck="true"># 4---蓝色生死恋</span><span class="token comment" spellcheck="true"># 5---终结者</span><span class="token comment" spellcheck="true"># 6---复仇者联盟</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>也可以通过序号来循环这里就必须要用到一个函数 range</li></ul><p>range 函数就是随机的生成与一系列的数字.它包前不包后 他支持 3 个参数(起始,结束,步长)</p><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"鼠"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'牛'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">:</span> <span class="token number">35</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true">#{'name': '鼠', 'value': 25}</span><span class="token comment" spellcheck="true">#{'name': '牛', 'value': 35}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在列表中存储列表"><a href="#在列表中存储列表" class="headerlink" title="在列表中存储列表"></a>在列表中存储列表</h4><ul><li>后面可以无限接中括号[]</li></ul><pre class="line-numbers language-python"><code class="language-python">arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'这个杀手不太冷'</span><span class="token punctuation">,</span> <span class="token number">1978</span><span class="token punctuation">,</span> <span class="token string">'唐人街探案'</span><span class="token punctuation">,</span> <span class="token number">1983</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>    <span class="token string">'囧妈'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'杀死比尔'</span><span class="token punctuation">,</span> <span class="token string">'蓝色生死恋'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"终结者"</span><span class="token punctuation">,</span> <span class="token string">'复仇者联盟'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 终结者</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在列表中查找列表"><a href="#在列表中查找列表" class="headerlink" title="在列表中查找列表"></a>在列表中查找列表</h4><ul><li>基础版本,但是重复代码非常多这个时候我们就需要引入函数的概念</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> index<span class="token punctuation">,</span> item <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> type<span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token keyword">is</span> list<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">for</span> index<span class="token punctuation">,</span> _item <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> type<span class="token punctuation">(</span>_item<span class="token punctuation">)</span> <span class="token keyword">is</span> list<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>_item<span class="token punctuation">)</span>                <span class="token keyword">for</span> index<span class="token punctuation">,</span> content <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>_item<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> type<span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token keyword">is</span> list<span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>                        <span class="token keyword">for</span> index<span class="token punctuation">,</span> result <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                                <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 终结者</span><span class="token comment" spellcheck="true"># over</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在-Python-中创建一个函数"><a href="#在-Python-中创建一个函数" class="headerlink" title="在 Python 中创建一个函数"></a>在 Python 中创建一个函数</h3><ul><li>Python 中的函数是一个命名的代码组,如果需要,还可以有一个参数表(可选)</li></ul><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><ul><li>要用 def 语句定义一个 Python 函数,为函数提供一个函数名,并在括号里指定一个参数表,参数表也可以为空,如下</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> 函数名 <span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">:</span>    函数代码组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>针对上面那个循环 我们可以使用递归的方法来优化代码</li></ul><pre class="line-numbers language-python"><code class="language-python">arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'这个杀手不太冷'</span><span class="token punctuation">,</span> <span class="token number">1978</span><span class="token punctuation">,</span> <span class="token string">'唐人街探案'</span><span class="token punctuation">,</span> <span class="token number">1983</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>    <span class="token string">'囧妈'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'杀死比尔'</span><span class="token punctuation">,</span> <span class="token string">'蓝色生死恋'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"终结者"</span><span class="token punctuation">,</span> <span class="token string">'复仇者联盟'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">printresult</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> item <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> type<span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token keyword">is</span> list<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>            printresult<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            count <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> count <span class="token operator">==</span> len<span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"一切都结束了"</span><span class="token punctuation">)</span>printresult<span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''结果['囧妈', ['杀死比尔', '蓝色生死恋', ['终结者', '复仇者联盟']]]['杀死比尔', '蓝色生死恋', ['终结者', '复仇者联盟']]['终结者', '复仇者联盟']终结者一切都结束了'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>列表的概念</title>
      <link href="/2020/01/22/headinpython1/"/>
      <url>/2020/01/22/headinpython1/</url>
      
        <content type="html"><![CDATA[<h1 id="初识-Python"><a href="#初识-Python" class="headerlink" title="初识 Python"></a>初识 Python</h1><blockquote><p>一切节省，归根到底都归结为时间的节省。——马克思</p></blockquote><h2 id="为什么学-Python"><a href="#为什么学-Python" class="headerlink" title="为什么学 Python"></a>为什么学 Python</h2><p>Python 应用领域非常广泛,他几乎可以跑在任何设备上,而且在处理大数据的问题上，他的优势非常明显</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>人们对于复杂的数据的处理,习惯于把数据分类,比如日期,性别,爱好,等等.而列表就是把抽象的数据简单化,直观化来操作</p><ul><li>先从简单的列表来入手</li></ul><p>一个人在上个月看了三部电影 分别是 &lt;&lt;这个杀手不太冷&gt;&gt;, &lt;&lt;唐人街探案&gt;&gt;,&lt;&lt;囧妈&gt;&gt;</p><p>那么我们能把这些数据组成一个列表 写成这样</p><pre class="line-numbers language-python"><code class="language-python">movies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"这个杀手不太冷"</span><span class="token punctuation">,</span><span class="token string">"唐人街探案"</span><span class="token punctuation">,</span><span class="token string">"囧妈"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>为了把人可读的列表转换成 Python 可读的列表,需要遵寻下面 4 个步骤</li></ul><ol><li><p>在数据两边加引号,将各个电影名转换为字符串</p></li><li><p>用逗号将列表与下一项分隔开</p></li><li><p>在列表的两边加上开始和结束中括号</p></li><li><p>使用赋值操作符(=)将这个列表赋值至一个标识符(以上代码中的 movies)</p></li></ol><blockquote><p>Python 中变量标识符没有类型,标识符只是名字,可以指示某个类型的数据对象.可以把 Python 的列表想象成一个容器,对于列表来说,数据项的类型并不重要,当然可以说电影列表是一个”字符串的集合”,不过 Python 并不需要知道知道这一点.Python 所知道的就是你仅仅需要一个列表,然后为他指定了名字，这个列表包含了一些数据.</p></blockquote><ul><li>字符串单引号双引号没有区别。但是不用混用。如果非要使用双引号必须用转义字符”&quot;</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"今天\'测试\'单引号有了吗"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 今天'测试'单引号有了吗</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>标识符的定义只能是字母数字或一个下划线。但是不能一字母开头</p></li><li><p>标识符区分大小写</p></li><li><p>str(值)是强制把值变成字符串</p></li><li><p>int(值)是强制把值变成数字</p></li><li><p>数字必须先变成字符串才能和字符串拼接在一起</p></li></ul><h3 id="列表就像是数组"><a href="#列表就像是数组" class="headerlink" title="列表就像是数组"></a>列表就像是数组</h3><ul><li>在 Python 创建一个列表时,解释器会在内存中创建一个类似数组的数据结构来存储数据,数据项由上向下堆放(形成一个堆栈),堆栈中的第一个槽编号为 0,第二个槽编号为 1,第三个编号为 2</li></ul><pre class="line-numbers language-python"><code class="language-python">movies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"这个杀手不太冷"</span><span class="token punctuation">,</span><span class="token string">"唐人街探案"</span><span class="token punctuation">,</span><span class="token string">"囧妈"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 这个杀手不太冷 序号就是0</span><span class="token comment" spellcheck="true"># 唐人街探案  序号就是1</span><span class="token comment" spellcheck="true"># 囧妈 序号就是2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>他存到内存里的顺序就是:</p><p>囧妈-&gt;唐人街探案-&gt;这个杀手不太冷</p><blockquote><p>堆栈就是先进后出</p></blockquote><h3 id="判断是否是一个数组"><a href="#判断是否是一个数组" class="headerlink" title="判断是否是一个数组"></a>判断是否是一个数组</h3><ul><li>type(值) is</li></ul><pre class="line-numbers language-python"><code class="language-python">movies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"这个杀手不太冷"</span><span class="token punctuation">,</span><span class="token string">"唐人街探案"</span><span class="token punctuation">,</span><span class="token string">"囧妈"</span><span class="token punctuation">]</span><span class="token keyword">if</span> type<span class="token punctuation">(</span>movies<span class="token punctuation">)</span> <span class="token keyword">is</span> list<span class="token punctuation">:</span>  <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"True"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"False"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串也可以转换成数组需要通过-list-函数"><a href="#字符串也可以转换成数组需要通过-list-函数" class="headerlink" title="字符串也可以转换成数组需要通过 list 函数"></a>字符串也可以转换成数组需要通过 list 函数</h3><pre class="line-numbers language-python"><code class="language-python">arr2 <span class="token operator">=</span> <span class="token string">'["第一个","第二个","第三个"]'</span>result <span class="token operator">=</span> list<span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token keyword">if</span> type<span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token keyword">is</span> list<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"转换成功"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"转换失败"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 转换成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用中括号访问列表中的数据"><a href="#使用中括号访问列表中的数据" class="headerlink" title="使用中括号访问列表中的数据"></a>使用中括号访问列表中的数据</h3><ul><li>像数组一样,访问列表中一个数据可以通过[序号],序号要是负的就是从后面开始</li></ul><pre class="line-numbers language-python"><code class="language-python">movies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"这个杀手不太冷"</span><span class="token punctuation">,</span><span class="token string">"唐人街探案"</span><span class="token punctuation">,</span><span class="token string">"囧妈"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>movies<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>movies<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 唐人街探案</span><span class="token comment" spellcheck="true"># 唐人街探案</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>也可以通过 index()访问出数据在列表中的位置</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'这个杀手不太冷'</span><span class="token punctuation">,</span> <span class="token string">'唐人街探案'</span><span class="token punctuation">,</span> <span class="token string">'囧妈'</span><span class="token punctuation">,</span> <span class="token string">'杀死比尔'</span><span class="token punctuation">,</span> <span class="token string">'蓝色生死恋'</span><span class="token punctuation">,</span> <span class="token string">"终结者"</span><span class="token punctuation">,</span> <span class="token string">"复仇者联盟"</span><span class="token punctuation">]</span>result <span class="token operator">=</span> arr<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"囧妈"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取列表的个数-len"><a href="#获取列表的个数-len" class="headerlink" title="获取列表的个数 len()"></a>获取列表的个数 len()</h3><ul><li>随着数据越来越多,我希望统计下数组里面的个数,这个时候就需要用到 len()函数</li></ul><pre class="line-numbers language-python"><code class="language-python">movies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"这个杀手不太冷"</span><span class="token punctuation">,</span><span class="token string">"唐人街探案"</span><span class="token punctuation">,</span><span class="token string">"囧妈"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>movies<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="给列表中添加数据"><a href="#给列表中添加数据" class="headerlink" title="给列表中添加数据"></a>给列表中添加数据</h3><p>当我们需要给列表中添加数据，可以采用两种办法</p><ul><li><p>insert(位置序号,内容),他可以插入到任意位置</p></li><li><p>append(内容) 他只能插入到列表的末尾</p></li><li><p>extend(数组) 把括号里新的数组放入到老的数组末尾</p></li></ul><h4 id="在末尾插入"><a href="#在末尾插入" class="headerlink" title="在末尾插入"></a>在末尾插入</h4><pre class="line-numbers language-python"><code class="language-python">movies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"这个杀手不太冷"</span><span class="token punctuation">,</span><span class="token string">"唐人街探案"</span><span class="token punctuation">,</span><span class="token string">"囧妈"</span><span class="token punctuation">]</span>movies<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"杀死比尔"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>movies<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 最后的结果</span><span class="token comment" spellcheck="true"># ['这个杀手不太冷', '唐人街探案', '囧妈', '杀死比尔']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在任意位置插入"><a href="#在任意位置插入" class="headerlink" title="在任意位置插入"></a>在任意位置插入</h4><pre class="line-numbers language-python"><code class="language-python">movies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"这个杀手不太冷"</span><span class="token punctuation">,</span><span class="token string">"唐人街探案"</span><span class="token punctuation">,</span><span class="token string">"囧妈"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 1的位置就是唐人街探案 那么在他前面插入就获取到序号，插入的数据都是放在前面</span>movies<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"杀死比尔"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>movies<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#结果</span><span class="token comment" spellcheck="true"># ['这个杀手不太冷', '杀死比尔', '唐人街探案', '囧妈']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="不想一个个插入，想一次性插入"><a href="#不想一个个插入，想一次性插入" class="headerlink" title="不想一个个插入，想一次性插入"></a>不想一个个插入，想一次性插入</h4><pre class="line-numbers language-python"><code class="language-python">movies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"这个杀手不太冷"</span><span class="token punctuation">,</span> <span class="token string">"唐人街探案"</span><span class="token punctuation">,</span> <span class="token string">"囧妈"</span><span class="token punctuation">]</span>movies2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"杀死比尔"</span><span class="token punctuation">,</span> <span class="token string">"蓝色生死恋"</span><span class="token punctuation">]</span>movies<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>movies2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>movies<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># ['这个杀手不太冷', '唐人街探案', '囧妈', '杀死比尔', '蓝色生死恋']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="给列表中删除数据"><a href="#给列表中删除数据" class="headerlink" title="给列表中删除数据"></a>给列表中删除数据</h3><blockquote><p>列表中删除数据由两种方法 remove() pop()</p></blockquote><ul><li><p>remove() 删除指定的值</p></li><li><p>pop(序号) 删除末尾,要是里面写序号了就删除指定的序号值,还能获取到删除的值</p></li></ul><h4 id="删除列表中指定的值"><a href="#删除列表中指定的值" class="headerlink" title="删除列表中指定的值"></a>删除列表中指定的值</h4><pre class="line-numbers language-python"><code class="language-python">movies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"这个杀手不太冷"</span><span class="token punctuation">,</span> <span class="token string">"唐人街探案"</span><span class="token punctuation">,</span> <span class="token string">"囧妈"</span><span class="token punctuation">]</span>movies<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"唐人街探案"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>movies<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># ['这个杀手不太冷', '囧妈']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除末尾和指定的值"><a href="#删除末尾和指定的值" class="headerlink" title="删除末尾和指定的值"></a>删除末尾和指定的值</h4><p>pop(序号) 删除末尾,要是里面写序号了就删除指定的序号值,还能获取到删除的值</p><ul><li>删除任意位置</li></ul><pre class="line-numbers language-python"><code class="language-python">movies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"这个杀手不太冷"</span><span class="token punctuation">,</span> <span class="token string">"唐人街探案"</span><span class="token punctuation">,</span> <span class="token string">"囧妈"</span><span class="token punctuation">]</span>result <span class="token operator">=</span> movies<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>movies<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># ['这个杀手不太冷', '囧妈']</span><span class="token comment" spellcheck="true"># 唐人街探案</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除末尾的值</li></ul><pre class="line-numbers language-python"><code class="language-python">movies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"这个杀手不太冷"</span><span class="token punctuation">,</span> <span class="token string">"唐人街探案"</span><span class="token punctuation">,</span> <span class="token string">"囧妈"</span><span class="token punctuation">]</span>result <span class="token operator">=</span> movies<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>movies<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># ['这个杀手不太冷', '唐人街探案']</span><span class="token comment" spellcheck="true"># 囧妈</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入浅出学Python</title>
      <link href="/2020/01/21/headinpython/"/>
      <url>/2020/01/21/headinpython/</url>
      
        <content type="html"><![CDATA[<h2 id="目录分类"><a href="#目录分类" class="headerlink" title="目录分类"></a>目录分类</h2><h3 id="列表的概念-一"><a href="#列表的概念-一" class="headerlink" title="列表的概念(一)"></a><a href="https://jsopy.gitee.io/2020/01/22/headinpython1/">列表的概念(一)</a></h3><h3 id="处理列表数据-二"><a href="#处理列表数据-二" class="headerlink" title="处理列表数据(二)"></a><a href="https://jsopy.gitee.io/2020/01/23/headinpython2/">处理列表数据(二)</a></h3><h3 id="模块-三"><a href="#模块-三" class="headerlink" title="模块(三)"></a><a href="https://jsopy.gitee.io/2020/01/24/headinpython3/">模块(三)</a></h3><h3 id="文件与异常和-JSON-四"><a href="#文件与异常和-JSON-四" class="headerlink" title="文件与异常和 JSON(四)"></a><a href="https://jsopy.gitee.io/2020/01/26/headinpython4/">文件与异常和 JSON(四)</a></h3><h3 id="集合和处理数据-五"><a href="#集合和处理数据-五" class="headerlink" title="集合和处理数据(五)"></a><a href="https://jsopy.gitee.io/2020/01/28/headinpython5/">集合和处理数据(五)</a></h3>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 基础(七) 算术预算符和比较运算符</title>
      <link href="/2020/01/20/mysqlbasic7/"/>
      <url>/2020/01/20/mysqlbasic7/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql-基础-七-算术预算符和比较运算符"><a href="#Mysql-基础-七-算术预算符和比较运算符" class="headerlink" title="Mysql 基础(七) 算术预算符和比较运算符"></a>Mysql 基础(七) 算术预算符和比较运算符</h1><blockquote><p>学习是劳动，是充满思想的劳动。——乌申斯基</p></blockquote><h2 id="学习重点"><a href="#学习重点" class="headerlink" title="学习重点"></a>学习重点</h2><ul><li><p>运算符就是对两边的列或者值进行运算(计算或者比较大小等)的符号</p></li><li><p>使用算数运算符可以进行四则运算</p></li><li><p>括号可以提升运算的优先顺序(优先进行运算)</p></li><li><p>包含 NULL 的运算其结果也是 NULL</p></li><li><p>比较运算符可以用来判断列或者值是否相等,还可以用来比较大小</p></li><li><p>判断是否为 NULL,需要使用 IS NULL 或者 IS NOT NULL 运算符</p></li></ul><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><ul><li>SQL 语句中使用计算表达式,比如上个单元的例子 把 sale_price 的单价 2 倍以”sale_price_x2”列的形式读取出来</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT product_name,sale_price,sale_price*2 AS '翻倍价格' from Product<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>最后结果</li></ul><table><thead><tr><th>product_name</th><th>sale_price</th><th>翻倍价格</th></tr></thead><tbody><tr><td>T 恤衫</td><td>1000</td><td>2000</td></tr><tr><td>打孔器</td><td>500</td><td>1000</td></tr><tr><td>运动 T 恤</td><td>4000</td><td>8000</td></tr><tr><td>菜刀</td><td>3000</td><td>6000</td></tr><tr><td>高压锅</td><td>6800</td><td>13600</td></tr><tr><td>叉子</td><td>500</td><td>1000</td></tr><tr><td>擦菜板</td><td>880</td><td>1760</td></tr><tr><td>圆珠笔</td><td>100</td><td>200</td></tr></tbody></table><blockquote><p>四则运算是以+,-,x,/为基准 SQL 除了算术运算符之外还有其他各种各样的运算符</p></blockquote><p><strong>SELECT 子句中也可以使用常数或者表达式</strong></p><p>当然 SQL 中也可以像平常的运算表达式那样使用括号(),括号中的运算表达式的优先级会得到提升,优先运算例如(1+2)<em>3 会先计算 1+2 的值然后在对其结果</em>3 运算</p><p>括号的使用并不仅仅局限于四则运算,还可以用在 SQL 语句的任何表达式</p><h2 id="需要注意-NULL"><a href="#需要注意-NULL" class="headerlink" title="需要注意 NULL"></a>需要注意 NULL</h2><ul><li>SQL 语句进行运算的时候,需要特别注意含有 NULL 的运算。</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">5+NULL10-NULL1*NULL4/NULLNULL/9NULL/0# 这样所有的结果都是NULL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>包含 NULL 的计算,结果肯定都是 NULL</p></blockquote><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><ul><li><blockquote><p>,&lt;, = ,&lt;&gt; 表示不等于,&gt;=,&lt;=</p></blockquote></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT product_name,product_type from Product WHERE sale_price>50<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后结果</p><table><thead><tr><th>product_name</th><th>product_type</th></tr></thead><tbody><tr><td>T 恤衫</td><td>衣服</td></tr><tr><td>打孔器</td><td>办公用品</td></tr><tr><td>运动 T 恤</td><td>衣服</td></tr><tr><td>菜刀</td><td>厨房用具</td></tr><tr><td>高压锅</td><td>厨房用具</td></tr><tr><td>叉子</td><td>厨房用具</td></tr><tr><td>擦菜板</td><td>厨房用具</td></tr><tr><td>圆珠笔</td><td>办公用品</td></tr></tbody></table><p>像符号=这样用来比较其两边的列或者值的符号称为比较运算符.符号=就是比较运算符,在 where 子句中通过使用比较运算符可以组合各种条件表达式</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT product_name,product_type from Product WHERE sale_price <> 50<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后结果</p><table><thead><tr><th>product_name</th><th>product_type</th></tr></thead><tbody><tr><td>T 恤衫</td><td>衣服</td></tr><tr><td>打孔器</td><td>办公用品</td></tr><tr><td>运动 T 恤</td><td>衣服</td></tr><tr><td>菜刀</td><td>厨房用具</td></tr><tr><td>高压锅</td><td>厨房用具</td></tr><tr><td>叉子</td><td>厨房用具</td></tr><tr><td>擦菜板</td><td>厨房用具</td></tr><tr><td>圆珠笔</td><td>办公用品</td></tr></tbody></table><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT product_name,product_type from Product WHERE regist_date < '2009-09-27'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后结果</p><table><thead><tr><th>product_name</th><th>product_type</th></tr></thead><tbody><tr><td>T 恤衫</td><td>衣服</td></tr><tr><td>打孔器</td><td>办公用品</td></tr><tr><td>菜刀</td><td>厨房用具</td></tr><tr><td>高压锅</td><td>厨房用具</td></tr><tr><td>叉子</td><td>厨房用具</td></tr><tr><td>擦菜板</td><td>厨房用具</td></tr></tbody></table><ul><li>也可以使用计算表达式</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT product_name,sale_price,purchase_price from Product WHERE sale_price - purchase_price >= 500<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后结果</p><table><thead><tr><th>product_name</th><th>sale_price</th><th>purchase_price</th></tr></thead><tbody><tr><td>T 恤衫</td><td>1000</td><td>500</td></tr><tr><td>运动 T 恤衫</td><td>4000</td><td>2800</td></tr><tr><td>高压锅</td><td>6800</td><td>5000</td></tr></tbody></table><h2 id="对字符串使用比较运算的注意事项"><a href="#对字符串使用比较运算的注意事项" class="headerlink" title="对字符串使用比较运算的注意事项"></a>对字符串使用比较运算的注意事项</h2><ul><li>字符串类型的数据原则上按照字典顺序进行排序，不能与数字大小顺序混淆</li></ul><p>比如字符串要是个字符串的数字比如’10’ ‘2’ 那么它不会变成数字来比较,而是按照一定的顺序来比较<br>这里的’10’和’2’比较 最后的结果是’2’大</p><h2 id="不能对-NULL-使用比较运算符"><a href="#不能对-NULL-使用比较运算符" class="headerlink" title="不能对 NULL 使用比较运算符"></a>不能对 NULL 使用比较运算符</h2><ul><li>数据里面只要有 NULL 那么 不能使用运算符比较</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT product_name,purchase_price from Product WHERE purchase_price = NULL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样最后结果一条也取不出来,即使使用&lt;&gt;也没有用</p><ul><li>必须使用 IS NULL 或者 IS NOT NULL</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT product_name,purchase_price FROM Product WHERE purchase_price IS NULL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后结果</p><table><thead><tr><th>product_name</th><th>purchase_price</th></tr></thead><tbody><tr><td>叉子</td><td>NULL</td></tr><tr><td>圆珠笔</td><td>NULL</td></tr></tbody></table><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT product_name,purchase_price FROM Product WHERE purchase_price IS NOT NULL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后结果</p><table><thead><tr><th>product_name</th><th>purchase_price</th></tr></thead><tbody><tr><td>T 恤衫</td><td>500</td></tr><tr><td>打孔器</td><td>320</td></tr><tr><td>运动 T 恤</td><td>2800</td></tr><tr><td>菜刀</td><td>2800</td></tr><tr><td>高压锅</td><td>5000</td></tr><tr><td>擦菜板</td><td>790</td></tr></tbody></table><blockquote><p>希望选取 NULL 时,必须使用 IS NULL 或者 NOT NULL</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 基础(六) SELECT 语句基础</title>
      <link href="/2020/01/19/mysqlbasic6/"/>
      <url>/2020/01/19/mysqlbasic6/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql-基础-六-SELECT-语句基础"><a href="#Mysql-基础-六-SELECT-语句基础" class="headerlink" title="Mysql 基础(六) SELECT 语句基础"></a>Mysql 基础(六) SELECT 语句基础</h1><blockquote><p>要知道对好事的称颂过于夸大，也会招来人们的反感轻蔑和嫉妒。——培根</p></blockquote><h2 id="学习重点"><a href="#学习重点" class="headerlink" title="学习重点"></a>学习重点</h2><ul><li><p>使用 SELECT 语句从表中选取数据</p></li><li><p>为列设定显示用的别名</p></li><li><p>SELECT 语句中可以使用常数或者表达式</p></li><li><p>通过指定 DISTINCT 可以删除重复的行</p></li><li><p>SQL 语句种可以使用注释</p></li><li><p>可以通过 WHERE 语句从表中选出符合查询条件的数据</p></li></ul><h3 id="列的查询"><a href="#列的查询" class="headerlink" title="列的查询"></a>列的查询</h3><blockquote><p>从表中选取数据时需要使用 SELECT 语句,也就是只从表中选出 SELECT 必要数据的意思.通过 SELECT 语句查询并选出必要数据的过程称为匹配查询或查询(query)</p></blockquote><ul><li>通勤语句</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT <列名>,...FROM <表名>;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>SELECT 语句包含了 SELECT 和 FROM 两个子句.子句是 SQL 语句的组成要素,是以 SELECT 或者 FROM 等作为起始的短语</p><p>SELECT 子句列举了希望从表中查询出的列的名称,而 FROM 子句则指定了选取出数据的表的名称</p><ul><li>举例</li></ul><p>我们从上一单元输出 3 列分别是 product_id,product_name,sale_price</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT product_id,product_name,sale_price FROM Product;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果输出就是</p><table><thead><tr><th>product_id</th><th>product_name</th><th>sale_price</th></tr></thead><tbody><tr><td>001</td><td>T 恤衫</td><td>1000</td></tr><tr><td>002</td><td>打孔器</td><td>500</td></tr><tr><td>003</td><td>运动 T 恤衫</td><td>4000</td></tr><tr><td>004</td><td>菜刀</td><td>3000</td></tr><tr><td>005</td><td>高压锅</td><td>6800</td></tr><tr><td>006</td><td>叉子</td><td>500</td></tr><tr><td>007</td><td>擦菜板</td><td>880</td></tr><tr><td>008</td><td>圆珠笔</td><td>100</td></tr></tbody></table><h3 id="查询列表中所有的列"><a href="#查询列表中所有的列" class="headerlink" title="查询列表中所有的列"></a>查询列表中所有的列</h3><ul><li>要想查出全部列,可以使用代表所有列的型号(*)</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT *  FROM <表名><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>用在上单元的例子</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT * FROM Product;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>等价于</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT product_id,product_name,product_type,sale_price,purchase_price,regist_date FROM Product;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后的结果</p><table><thead><tr><th>product_id</th><th>product_name</th><th>sale_price</th><th>product_type</th><th>purchase_price</th><th>regist_date</th></tr></thead><tbody><tr><td>001</td><td>T 恤衫</td><td>1000</td><td>衣服</td><td>500</td><td>2009-09-20</td></tr><tr><td>002</td><td>打孔器</td><td>500</td><td>办公用品</td><td>320</td><td>2009-09-11</td></tr><tr><td>003</td><td>运动 T 恤衫</td><td>4000</td><td>衣服</td><td>2800</td><td>NULL</td></tr><tr><td>004</td><td>菜刀</td><td>3000</td><td>厨房用具</td><td>2800</td><td>2009-09-20</td></tr><tr><td>005</td><td>高压锅</td><td>6800</td><td>厨房用具</td><td>5000</td><td>2009-01-15</td></tr><tr><td>006</td><td>叉子</td><td>500</td><td>厨房用具</td><td>NULL</td><td>2009-09-20</td></tr><tr><td>007</td><td>擦菜板</td><td>880</td><td>厨房用具</td><td>790</td><td>2008-04-28</td></tr><tr><td>008</td><td>圆珠笔</td><td>100</td><td>办公用品</td><td>NULL</td><td>2009-11-11</td></tr></tbody></table><h3 id="为列设置别名"><a href="#为列设置别名" class="headerlink" title="为列设置别名"></a>为列设置别名</h3><ul><li>SQL 语句可以使用 AS 关键字为列设定别名</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT product_id AS id,product_name AS name,sale_price AS price FROM Product;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后的结果</p><table><thead><tr><th>id</th><th>name</th><th>price</th></tr></thead><tbody><tr><td>001</td><td>T 恤衫</td><td>1000</td></tr><tr><td>002</td><td>打孔器</td><td>500</td></tr><tr><td>003</td><td>运动 T 恤衫</td><td>4000</td></tr><tr><td>004</td><td>菜刀</td><td>3000</td></tr><tr><td>005</td><td>高压锅</td><td>6800</td></tr><tr><td>006</td><td>叉子</td><td>500</td></tr><tr><td>007</td><td>擦菜板</td><td>880</td></tr><tr><td>008</td><td>圆珠笔</td><td>100</td></tr></tbody></table><ul><li>设置成中文名称也可以,但是必须要加引号</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT product_id AS '商品编号', product_name AS '商品名称', sale_price  AS '进货单价' FROM Product;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后的结果</p><table><thead><tr><th>商品编号</th><th>商品名称</th><th>进货单价</th></tr></thead><tbody><tr><td>001</td><td>T 恤衫</td><td>1000</td></tr><tr><td>002</td><td>打孔器</td><td>500</td></tr><tr><td>003</td><td>运动 T 恤衫</td><td>4000</td></tr><tr><td>004</td><td>菜刀</td><td>3000</td></tr><tr><td>005</td><td>高压锅</td><td>6800</td></tr><tr><td>006</td><td>叉子</td><td>500</td></tr><tr><td>007</td><td>擦菜板</td><td>880</td></tr><tr><td>008</td><td>圆珠笔</td><td>100</td></tr></tbody></table><h3 id="常数的查询"><a href="#常数的查询" class="headerlink" title="常数的查询"></a>常数的查询</h3><ul><li>有的时候为了方便阅读，我们会在查询后的结果中显示我们自定义的列，这个列只是显示用，不影响表的结构</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT '商品名称' AS string,28 AS number,product_id AS id,product_name AS '商品名称',sale_price  AS '进货单价' FROM Product;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后的结果</p><table><thead><tr><th>string</th><th>number</th><th>id</th><th>商品名称</th><th>进货单价</th></tr></thead><tbody><tr><td>商品名称</td><td>28</td><td>001</td><td>T 恤衫</td><td>1000</td></tr><tr><td>商品名称</td><td>28</td><td>002</td><td>打孔器</td><td>500</td></tr><tr><td>商品名称</td><td>28</td><td>003</td><td>运动 T 恤衫</td><td>4000</td></tr><tr><td>商品名称</td><td>28</td><td>004</td><td>菜刀</td><td>3000</td></tr><tr><td>商品名称</td><td>28</td><td>005</td><td>高压锅</td><td>6800</td></tr><tr><td>商品名称</td><td>28</td><td>006</td><td>叉子</td><td>500</td></tr><tr><td>商品名称</td><td>28</td><td>007</td><td>擦菜板</td><td>880</td></tr><tr><td>商品名称</td><td>28</td><td>008</td><td>圆珠笔</td><td>100</td></tr></tbody></table><h3 id="从结果中筛选掉重复的数据"><a href="#从结果中筛选掉重复的数据" class="headerlink" title="从结果中筛选掉重复的数据"></a>从结果中筛选掉重复的数据</h3><ul><li>可以通过 DISTINCT 筛选掉重复的数据</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT DISTINCT <列名> FROM <表名>;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>上面单元的例子</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT DISTINCT product_type FROM Product;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后的结果</p><table><thead><tr><th>product_type</th></tr></thead><tbody><tr><td>衣服</td></tr><tr><td>办公用品</td></tr><tr><td>厨房用具</td></tr></tbody></table><ul><li>在使用 DISTINCT 时候 NULL 也被视为同一类数据,NULL 存在于多行时候,也会被合并为一条 NULL 数据</li></ul><p>比如上面单元的例子</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT DISTINCT purchase_price FROM Product;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后的结果</p><table><thead><tr><th>purchase_price</th></tr></thead><tbody><tr><td>500</td></tr><tr><td>320</td></tr><tr><td>2800</td></tr><tr><td>5000</td></tr><tr><td>NULL</td></tr><tr><td>790</td></tr></tbody></table><ul><li>多列使用 DISTINCT</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT DISTINCT product_type,regist_date FROM Product;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后结果,这样就过滤了一条数据</p><table><thead><tr><th>product_type</th><th>regist_date</th></tr></thead><tbody><tr><td>衣服</td><td>2009-09-20</td></tr><tr><td>办公用品</td><td>2009-09-11</td></tr><tr><td>衣服</td><td>NULL</td></tr><tr><td>厨房用具</td><td>2009-09-20</td></tr><tr><td>厨房用具</td><td>2009-01-15</td></tr><tr><td>厨房用具</td><td>2008-04-28</td></tr><tr><td>办公用品</td><td>2009-11-11</td></tr></tbody></table><h3 id="依据-WHERE-语句来选择记录"><a href="#依据-WHERE-语句来选择记录" class="headerlink" title="依据 WHERE 语句来选择记录"></a>依据 WHERE 语句来选择记录</h3><p>SELECT 语句通过 WHERE 子句来指定查询条件，在 WHERE 子句中可以指定”某一列的值和这个字符串相等”或者”某一列的值大于这个数字”等条件</p><ul><li>通勤代码</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT <列名>,...FROM <表名>WHERE<条件表达式>;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>拿上个单元 查询出 product_name,product_type,并且 product_type 是衣服的</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT product_name AS '商品名称', product_type AS '商品类型' FROM Product WHERE product_type='衣服'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后结果</p><table><thead><tr><th>商品名称</th><th>商品类型</th></tr></thead><tbody><tr><td>T 恤衫</td><td>衣服</td></tr><tr><td>运动 T 恤衫</td><td>衣服</td></tr></tbody></table><blockquote><p>他执行顺序是首先通过 WHERE 子查询查询出符合条件的记录，然后在取出 SELECT 语句指定的列,也就受从后往前的顺序</p></blockquote><p><strong>特别注意</strong></p><blockquote><p>SQL 中子句的书写顺序是固定的,不能随意更改,WHERE 子句必须紧跟在 FROM 的子句后面</p></blockquote><h3 id="注释的书写方法"><a href="#注释的书写方法" class="headerlink" title="注释的书写方法"></a>注释的书写方法</h3><ul><li>单行注释</li></ul><p>书写在’–’之后,只能写在同一行</p><pre class="line-numbers language-mysql"><code class="language-mysql">-- 本SELECT语句会从结果中删除重复行SELECT DISTINCT product_type,regist_date FROM Product;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>多行注释</li></ul><p>书写在”/<em>“和”</em>/“之间,可以跨行</p><pre class="line-numbers language-mysql"><code class="language-mysql">/* 这就是测试是否跨行 测试跨行没有 结束跨行*/SELECT DISTINCT product_type,regist_date FROM Product;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 基础(五) 表的删除和更新</title>
      <link href="/2020/01/18/mysqlbasic5/"/>
      <url>/2020/01/18/mysqlbasic5/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql-基础-五-表的删除和更新"><a href="#Mysql-基础-五-表的删除和更新" class="headerlink" title="Mysql 基础(五) 表的删除和更新"></a>Mysql 基础(五) 表的删除和更新</h1><blockquote><p>要掌握书，莫被书掌握；要为生而读，莫为读而生。——布尔沃</p></blockquote><h2 id="学习要点"><a href="#学习要点" class="headerlink" title="学习要点"></a>学习要点</h2><ul><li><p>使用 DROP TABLE 语句来删除</p></li><li><p>使用 ALTER TABLE 向表中添加里或者删除列</p></li></ul><h3 id="表的删除-DROP-TABLE-语句"><a href="#表的删除-DROP-TABLE-语句" class="headerlink" title="表的删除(DROP TABLE 语句)"></a>表的删除(DROP TABLE 语句)</h3><ul><li>删除 SQL 语句很简单 就一句话</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">DROP TABLE <表名>;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>删除上单元的 Product 表，只需要如下代码</p><pre class="line-numbers language-mysql"><code class="language-mysql">DROP TABLE Product<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>删除了的表是无法恢复的,在执行 DROP TABLE 前请仔细确认</p></blockquote><h3 id="表定义的更新-ALTER-TABLE-语句"><a href="#表定义的更新-ALTER-TABLE-语句" class="headerlink" title="表定义的更新(ALTER TABLE 语句)"></a>表定义的更新(ALTER TABLE 语句)</h3><ul><li>ALTER 在英语里就表示改变的意思,想要改变表就必须用 ALTER 语句</li></ul><h4 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h4><ul><li>通勤语句</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">ALTER TABLE <表名> ADD COLUMN <列的定义><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>上个单元增加一列</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">ALTER TABLE Product ADD COLUMN product_name_pinyi     VARCHAR(200);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h4><ul><li>通勤语句</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">ALTER TABLE <表名> DROP COLUMN <列名><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>上个单元删除一列</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">ALTER TABLE Product DROP COLUMN product_name_pinyin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="向-Product-表中插入数据"><a href="#向-Product-表中插入数据" class="headerlink" title="向 Product 表中插入数据"></a>向 Product 表中插入数据</h4><ul><li>通勤语句</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">INSERT INTO Product VALUES('0009','旅游鞋','衣服',100,NULL,'2019-11-11')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="表名字的修改"><a href="#表名字的修改" class="headerlink" title="表名字的修改"></a>表名字的修改</h4><ul><li>表名字的修改</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">RENAME TABLE Product to Product2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>-</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 基础(四) 表的创建</title>
      <link href="/2020/01/17/mysqlbasic4/"/>
      <url>/2020/01/17/mysqlbasic4/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql-基础-四-表的创建"><a href="#Mysql-基础-四-表的创建" class="headerlink" title="Mysql 基础(四) 表的创建"></a>Mysql 基础(四) 表的创建</h1><blockquote><p>自己活着，就是为了使别人过得更美好。——雷锋</p></blockquote><h2 id="学习重点"><a href="#学习重点" class="headerlink" title="学习重点"></a>学习重点</h2><ul><li>表通过 CREATE,TABLE 语句创建而成</li><li>表和列的命名要使用有意义的文字</li><li>指定列的数据类型(整数型,字符型,和日期型等等)</li><li>可以在表中设置约束(主键约束和 NOT NULL 约束等)</li></ul><h3 id="表内容的创建"><a href="#表内容的创建" class="headerlink" title="表内容的创建"></a>表内容的创建</h3><blockquote><p>这是一个商家的进货表</p></blockquote><table><thead><tr><th>商品编号</th><th>商品名称</th><th>商品种类</th><th>销售单价</th><th>进货单价</th><th>登记日期</th></tr></thead><tbody><tr><td>001</td><td>T 恤衫</td><td>衣服</td><td>1000</td><td>500</td><td>2009-09-20</td></tr><tr><td>002</td><td>打孔器</td><td>办公用品</td><td>500</td><td>320</td><td>2009-09-11</td></tr><tr><td>003</td><td>运动 T 恤</td><td>衣服</td><td>4000</td><td>2800</td><td></td></tr><tr><td>004</td><td>菜刀</td><td>厨房用具</td><td>3000</td><td>2800</td><td>2009-09-20</td></tr><tr><td>005</td><td>高压锅</td><td>厨房用具</td><td>6800</td><td>5000</td><td>2009-01-15</td></tr><tr><td>006</td><td>叉子</td><td>厨房用具</td><td>500</td><td></td><td>2009-09-20</td></tr><tr><td>007</td><td>擦菜板</td><td>厨房用具</td><td>880</td><td>790</td><td>2008-04-28</td></tr><tr><td>008</td><td>圆珠笔</td><td>办公用品</td><td>100</td><td></td><td>2009-11-11</td></tr></tbody></table><p>可以看到上面这个表格是由 8 行 6 列组成</p><h3 id="1-数据库的创建-CREATE-DATABASE-语句"><a href="#1-数据库的创建-CREATE-DATABASE-语句" class="headerlink" title="(1) 数据库的创建(CREATE DATABASE 语句)"></a>(1) 数据库的创建(CREATE DATABASE 语句)</h3><h4 id="在创建表之前-一定要先创建数据库"><a href="#在创建表之前-一定要先创建数据库" class="headerlink" title="在创建表之前 一定要先创建数据库"></a>在创建表之前 一定要先创建数据库</h4><ul><li>CREATE DATABASE</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE DATABASE <数据库名称>;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里我们将数据库命名为 shop,然后执行代码中的语句</p><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE DATABASE shop;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此外 数据库名称,表名以及列名都需要使用半角字符(英文字母,数字,符号),具体内容以后会介绍</p><h3 id="2-表的创建-CREATE-TABLE"><a href="#2-表的创建-CREATE-TABLE" class="headerlink" title="(2) 表的创建(CREATE TABLE)"></a>(2) 表的创建(CREATE TABLE)</h3><ul><li>创建好数据库之后,我们使用 CREATE TABLE 创建表.具体如下</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE TABLE <表名>(  <列名1> <数据类型> <该列所有的需求>,  <列名2> <数据类型> <该列所有的需求>,  <列名3> <数据类型> <该列所有的需求>,  <列名4> <数据类型> <该列所有的需求>,         ....   <该表的约束1>,<该表的约束2>,         ...);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该语法清楚的描述了 我们要创建一个包含&lt;列名 1&gt;,&lt;列名 2&gt;的名称为表名的表.每一列的数据类型(后述)是必须要指定的,还需要为需要的列设置约束.约束可以在定义列的时候进行设置,也可以在语句的末尾设置<br>例如</p><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE TABLE Produce(  product_id   CHAR(4)   NOT NULL,  product_name VARCHAR(100)  NOT NULL,  product_type VARCHAR(32)   NOT NULL,  sale_price   INTEGER        ,  purchase_price  INTEGER     ,  regist_date     Date        ,  PRIMARY KEY (product_id));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><ul><li>命名</li></ul><p><strong>我们只能使用</strong></p><ol><li>半角英文字母</li><li>数字</li><li>下划线(_)<br>作为数据库,表和列的名称</li></ol><p>标准的 SQL 不允许使用特殊符号例如$ # ? 等等作为名称使用(列名同样不允许)</p><blockquote><p>此外名称必须以半角英文字母开头</p></blockquote><blockquote><p>表名绝对不能重复</p></blockquote><h3 id="数据类型的指定"><a href="#数据类型的指定" class="headerlink" title="数据类型的指定"></a>数据类型的指定</h3><p>刚才我们创建了一张表 名称后面比如 CHAR ,VARCHAR 这一列关键字,是用来声明列的数据类型的</p><p><strong>所有列必须指定数据类型</strong></p><p>数据类型表示数据的种类,包括数字型,字符型和日期型.每一列都不能存储与该列数据类型不符的数据.比如声明整数型的列不能存储’abc’这样的字符串,声明字符串类型的列也不能存储 1234</p><p>下面是最基本的四种数据类型</p><ul><li>INTEGER 型</li></ul><p>用来指定存储整数的列的数据类型(数字型),不能存小数</p><ul><li>CHAR 型</li></ul><p>CHAR 是用来存字符类型的比如像 CHAR(10) 或者 CHAR(200)<br>在括号中指定该列可以存储的字符串的长度(最大长度),字符串超出最大长度的部分是无法输入到该列中</p><p>字符串是定长字符串的形式存储在指定的 CHAR 类型中,所谓定长就是当字符串达不到最大长度的时候。使用半角空格进行补足,例如 CHAR(8) 存的时候就变成 ‘abc ‘ (abc 后面 5 个半角空格)的形式保存起来</p><ul><li>VARCHAR 型</li></ul><p>VARCHAR 也是用来存储字符串的,只不过它是变量类型的.即使字符数未达到最大长度,也不会用半角补足.例如 VARCHAR(8)<br>存’abc’ 它保存的就是’abc’</p><ul><li><p>Date</p><p>用来指定存储日期(年月日)的列的数据类型(日期型)</p></li></ul><h3 id="约束的设置"><a href="#约束的设置" class="headerlink" title="约束的设置"></a>约束的设置</h3><p>约束是除了数据类型之外 ,对列中存储的数据进行限制或者追加条件的功能.Product 表中设置了两种约束</p><ul><li>第一种:有 3 列不能为空</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql"> product_id   CHAR(4)   NOT NULL product_name VARCHAR(100)  NOT NULL product_type VARCHAR(32)   NOT NULL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第二种:主键</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql"> PRIMARY KEY (product_id)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>所谓键 就是在指定特定数据时使用的列的组合,键种类多样,主键可以特定一行数据的列。也就是说如果把 product_id 列指定为主键,就可以通过该列取出特定的商品数据</p><p>反之 如果 product_id 输入了重复数据。就无法取出唯一的特定数据了</p><blockquote><p>主键必须唯一</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 基础(三) SQL 概要</title>
      <link href="/2020/01/16/mysqlbasic3/"/>
      <url>/2020/01/16/mysqlbasic3/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql-基础-三-SQL-概要"><a href="#Mysql-基础-三-SQL-概要" class="headerlink" title="Mysql 基础(三) SQL 概要"></a>Mysql 基础(三) SQL 概要</h1><blockquote><p>最大的挑战和突破在于用人，而用人最大的突破在于信任人。——马云</p></blockquote><h2 id="学习要点"><a href="#学习要点" class="headerlink" title="学习要点"></a>学习要点</h2><ul><li><p>SQL 是为操作数据库而开发的语言</p></li><li><p>虽然 SQL 也有标准,但实际上不同的 DBMS,SQL 也不相同</p></li><li><p>SQL 通过一条语句来描述想要进行的操作,发送给 RDBMS</p></li><li><p>原则上 SQL 都会用分号结尾</p></li><li><p>SQL 根据操作目的可分为 DDL,DML,DCL</p></li></ul><h3 id="标准-SQL"><a href="#标准-SQL" class="headerlink" title="标准 SQL"></a>标准 SQL</h3><p>SQL 是操作关系数据库的语言。他是为了提高数据库查询效率而开发的语言，现在增，删，改，查都可以完成</p><ul><li>大部分 RDBMS 都是标准的 SQL 语句,如果有不一样的地方稍后我会写备注,写出来</li></ul><h3 id="SQL-语句及其种类"><a href="#SQL-语句及其种类" class="headerlink" title="SQL 语句及其种类"></a>SQL 语句及其种类</h3><p>SQL 用关键字,表名,列名等组合成一条 SQL 语句来描述操作内容</p><p>依据指令种类的不同,SQL 可以分成三大类</p><h4 id="DDL-数据定义语言"><a href="#DDL-数据定义语言" class="headerlink" title="DDL(数据定义语言)"></a>DDL(数据定义语言)</h4><p>用来创建或者删除存储数据,数据用的数据库以及数据库中的表等对象.DDL 包含以下指令</p><ul><li>CREATE: 创建数据库和表等对象</li><li>DROP: 删除数据库和表等对象</li><li>ALTER: 修改数据库和表等对象的结构</li></ul><h4 id="DML-数据操纵语言"><a href="#DML-数据操纵语言" class="headerlink" title="DML(数据操纵语言)"></a>DML(数据操纵语言)</h4><p>用来查询或者变更表中的记录</p><ul><li><p>SELECT: 查询表中的数据</p></li><li><p>INSERT: 向表中插入新数据</p></li><li><p>UPDATE: 更新表中的数据</p></li><li><p>DELETE: 删除表中的数据</p></li></ul><h4 id="DCL-数据控制语言"><a href="#DCL-数据控制语言" class="headerlink" title="DCL(数据控制语言)"></a>DCL(数据控制语言)</h4><p>用来确认或者取消对数据库中的数据变更.除此之外还可以对 RDBMS 的用户是否有权限操作数据库中的对象(数据库表等)进行设定.DCL 包含以下几种指令:</p><ul><li><p>COMMIT :确认对数据库中的数据进行的变更</p></li><li><p>ROLLBACK:取消对数据库的数据进行的变更</p></li><li><p>GRANT:赋予用户操作权限</p></li><li><p>REVOKE: 取消用户的操作权限</p></li></ul><blockquote><p>SQL 依据功能分成三类其中最多的事 DML</p></blockquote><h3 id="SQL-的基本书写规则"><a href="#SQL-的基本书写规则" class="headerlink" title="SQL 的基本书写规则"></a>SQL 的基本书写规则</h3><ul><li>SQL 语句必须要以分号(;)结尾</li></ul><p>一条 SQL 语句可以描述一个数据库操作,在 RDBMS 中 SQL 语句也是逐条进行的,分号代表语句结束</p><ul><li>SQL 的语句不分区大小写</li></ul><p>SQL 语句不区分关键字的大小写.例如 SELECT 还是 select 解释都是一样的,表名和列名也是如此</p><ul><li>规则</li></ul><p>虽然 可以依据个人喜好来制定,但是为了更好的理解,方便阅读,制定了下面的规则</p><ol><li>关键字大写</li><li>表名的首字母大写</li><li>其余(列名等)小写</li></ol><blockquote><p>关键字不区分大小写,但是插入表中的数据事要区分大小写的</p></blockquote><p>例如 数据 Computer,COMPUTER,computer 三者事不一样的</p><h3 id="常数的书写方式事固定的"><a href="#常数的书写方式事固定的" class="headerlink" title="常数的书写方式事固定的"></a>常数的书写方式事固定的</h3><ul><li><p>SQL 语句常常需要直接书写字符串,日期,或者数字.例如书写向表中插入字符串,日期,或者数字等数据的 SQL 语句</p></li><li><p>在 SQL 语句中直接书写的字符串,日期,或者数字等称为常数,常数的书写方式如下所示</p></li><li><p>SQL 语句中还有字符串的时候,需要像’abc’这样,使用单引号(‘)将字符串括起来,用来标识这是一个字符串</p></li><li><p>SQL 语句中含有日期的时候同样需要使用单引号(‘)将其括起来例如(‘26 Jan 2010’)或者(‘10/01/26’等),个人比较喜欢(‘2010-01-26’)这样</p></li><li><p>数字的话可以不需要单引号直接填写 1000 这样的数字即可</p></li></ul><h3 id="单词需要半角空格或者换行来分隔"><a href="#单词需要半角空格或者换行来分隔" class="headerlink" title="单词需要半角空格或者换行来分隔"></a>单词需要半角空格或者换行来分隔</h3><p>SQL 语句的单词之间 需使用半角空格或者换行符来分隔,如下这种未加分隔的语句会发生错误,无法执行</p><ul><li>例如: CREATE TABLE Product</li></ul><blockquote><p>不能使用全角空格作为单词的分隔符,否则会发生错误,出现无法预期的结果</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 基础(二) 数据库的结构</title>
      <link href="/2020/01/15/mysqlbasic2/"/>
      <url>/2020/01/15/mysqlbasic2/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql-基础-二-数据库的结构"><a href="#Mysql-基础-二-数据库的结构" class="headerlink" title="Mysql 基础(二) 数据库的结构"></a>Mysql 基础(二) 数据库的结构</h1><h2 id="学习重点"><a href="#学习重点" class="headerlink" title="学习重点"></a>学习重点</h2><ul><li><p>DBMS 通常使用客户端/服务端这样的系统结构</p></li><li><p>通过从客户端向服务端发送 SQL 语句来实现数据库的读写操作</p></li><li><p>关系数据库采用被称为数据库表的二维表来管理数据</p></li><li><p>数据库表由表示数据项目的列(字段)和表示一条数据的行(记录)所组成,以记录为单位进行数据读写</p></li><li><p>行和列交互的方格称为单元格,每个单元格只能输入一个数据</p></li></ul><h2 id="常见的系统结构和流程"><a href="#常见的系统结构和流程" class="headerlink" title="常见的系统结构和流程"></a>常见的系统结构和流程</h2><ul><li>1.客户端发送 sql 语句到服务器</li><li>2.服务器收到后，操作数据库</li><li>3.操作完成后把返回的结果返回给客户端</li></ul><h2 id="数据库的结构"><a href="#数据库的结构" class="headerlink" title="数据库的结构"></a>数据库的结构</h2><p>数据库是由很多张二维表组成。每张表由行和列组成</p><p>结构如下</p><table><thead><tr><th>商品编号</th><th>商品名称</th><th>销售单价</th></tr></thead><tbody><tr><td>001</td><td>衣服</td><td>280.00</td></tr><tr><td>002</td><td>鞋子</td><td>290.00</td></tr><tr><td>003</td><td>化妆品</td><td>1000.00</td></tr></tbody></table><blockquote><p>这里特别注意的就是 SQL 语句返回的数据同样必须是二维表的形式.</p></blockquote><p>拿上面那个举例子</p><ul><li><p>列: 商品编号 里面有 3 个值 001 002 003 这些称之为一列,商品编号叫字段</p></li><li><p>行: 而数据 001 衣服 280.00 这些组成的数据为一行,一行叫做一条记录</p></li><li><p>单元格:而 001 这样的数据称为单元格</p></li></ul><blockquote><p>关系数据库必须以行为单位读写数据</p></blockquote><ul><li>一个单元格只能输入一个数据.在一个单元格数据两个或者两个以上的数据是不允许的</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 基础(一)什么是数据库</title>
      <link href="/2020/01/14/mysqlbasic1/"/>
      <url>/2020/01/14/mysqlbasic1/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql-基础-一-什么是数据库"><a href="#Mysql-基础-一-什么是数据库" class="headerlink" title="Mysql 基础(一) 什么是数据库"></a>Mysql 基础(一) 什么是数据库</h1><blockquote><p>一个人即使已登上顶峰，也仍要自强不息。——罗素·贝克</p></blockquote><h2 id="学习重点"><a href="#学习重点" class="headerlink" title="学习重点"></a>学习重点</h2><ul><li>数据库是将大量的数据保存起来,通过计算机加工而成的可以进行搞笑访问的数据集合</li><li>用来管理数据库的计算机系统统称为数据库管理系统(DBMS)</li><li>通过使用 DBMS,多个用户可以安全简单的操作大量数据</li></ul><h2 id="数据库的种类"><a href="#数据库的种类" class="headerlink" title="数据库的种类"></a>数据库的种类</h2><ul><li>层级数据库(HDB)</li></ul><p>最古老的数据库之一,他把数据通过层次结构(数据结构)的方式表现出来,层次数据库曾经是数据库的主流,但是随着关系数据库的数显和普及，现在已经很少使用</p><ul><li>关系数据库(RDB)</li></ul><p>关系数据库是现在应用最广泛的数据库.关系数据库由很多张表构成。每张表类似表格,由行和列组成.同时他还使用专门的 SQL 语言操作.</p><p>类似下面的表格</p><table><thead><tr><th>商品编号</th><th>商品名称</th><th>销售单价</th></tr></thead><tbody><tr><td>001</td><td>衣服</td><td>280.00</td></tr><tr><td>002</td><td>鞋子</td><td>290.00</td></tr><tr><td>003</td><td>化妆品</td><td>1000.00</td></tr></tbody></table><p>这种类型的 DBMS 称为关系数据库管理系统,主要是 5 种</p><ul><li>1.Oracle 甲骨文</li><li>2.SQL 微软</li><li>3.DB2 IBM</li><li>4.PostgreSQL 开源</li><li>5.Mysql 甲骨文</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql基础学习笔记(SQL基础教程第二版)</title>
      <link href="/2020/01/13/mysqlall/"/>
      <url>/2020/01/13/mysqlall/</url>
      
        <content type="html"><![CDATA[<h2 id="目录分类"><a href="#目录分类" class="headerlink" title="目录分类"></a>目录分类</h2><h3 id="什么是数据库-一"><a href="#什么是数据库-一" class="headerlink" title="什么是数据库(一)"></a><a href="https://jsopy.gitee.io/2020/01/14/mysqlbasic1/">什么是数据库(一)</a></h3><h3 id="数据库的结构-二"><a href="#数据库的结构-二" class="headerlink" title="数据库的结构(二)"></a><a href="https://jsopy.gitee.io/2020/01/15/mysqlbasic2/">数据库的结构(二)</a></h3><h3 id="SQL-概要-三"><a href="#SQL-概要-三" class="headerlink" title="SQL 概要(三)"></a><a href="https://jsopy.gitee.io/2020/01/16/mysqlbasic3/">SQL 概要(三)</a></h3><h3 id="表的创建-四"><a href="#表的创建-四" class="headerlink" title="表的创建(四)"></a><a href="https://jsopy.gitee.io/2020/01/17/mysqlbasic4/">表的创建(四)</a></h3><h3 id="表的删除和更新-五"><a href="#表的删除和更新-五" class="headerlink" title="表的删除和更新(五)"></a><a href="https://jsopy.gitee.io/2020/01/18/mysqlbasic5/">表的删除和更新(五)</a></h3><h3 id="SELECT-语句基础-六"><a href="#SELECT-语句基础-六" class="headerlink" title="SELECT 语句基础(六)"></a><a href="https://jsopy.gitee.io/2020/01/19/mysqlbasic6/">SELECT 语句基础(六)</a></h3><h3 id="算术预算符和比较运算符-七"><a href="#算术预算符和比较运算符-七" class="headerlink" title="算术预算符和比较运算符(七)"></a><a href="https://jsopy.gitee.io/2020/01/20/mysqlbasic7/">算术预算符和比较运算符(七)</a></h3><h3 id="聚合和排序-八"><a href="#聚合和排序-八" class="headerlink" title="聚合和排序(八)"></a><a href="https://jsopy.gitee.io/2020/01/25/mysqlbasic8/">聚合和排序(八)</a></h3><h3 id="表进行分组-九"><a href="#表进行分组-九" class="headerlink" title="表进行分组(九)"></a><a href="https://jsopy.gitee.io/2020/01/27/mysqlbasic9/">表进行分组(九)</a></h3>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 中使用 iframe</title>
      <link href="/2020/01/12/vuecha9/"/>
      <url>/2020/01/12/vuecha9/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-中使用-iframe"><a href="#Vue-中使用-iframe" class="headerlink" title="Vue 中使用 iframe"></a>Vue 中使用 iframe</h1><blockquote><p>业余生活要有意义，不要越轨。——华盛顿</p></blockquote><ul><li><p>Vue 组件如何引入 iframe</p></li><li><p>Vue 如何获取 iframe 对象以及 iframe 内的 window 对象</p></li><li><p>Vue 如何向 ifrmae 内传送信息</p></li><li><p>iframe 内如何向外部 vue 发送消息</p></li></ul><h2 id="1-Vue-组件中如何引入-iframe"><a href="#1-Vue-组件中如何引入-iframe" class="headerlink" title="(1)Vue 组件中如何引入 iframe"></a>(1)Vue 组件中如何引入 iframe</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrapdiv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sendmessage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发送数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>子页面给父页面的数据:{{sondata}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span>      <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iframe<span class="token punctuation">"</span></span>      <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iframe<span class="token punctuation">"</span></span>      <span class="token attr-name">scrolling</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span>      <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span>      <span class="token attr-name">:height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>height<span class="token punctuation">"</span></span>      <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>      <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 然后data中绑定src要引入的目录,那么第一步就完成了 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Vue-如何获取-iframe-对象以及-iframe-内的-window-对象"><a href="#2-Vue-如何获取-iframe-对象以及-iframe-内的-window-对象" class="headerlink" title="(2)Vue 如何获取 iframe 对象以及 iframe 内的 window 对象"></a>(2)Vue 如何获取 iframe 对象以及 iframe 内的 window 对象</h2><ul><li>通过 ref</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      message<span class="token punctuation">:</span> <span class="token string">'首页'</span><span class="token punctuation">,</span>      url<span class="token punctuation">:</span> <span class="token string">'http://www.textiframe.com/'</span><span class="token punctuation">,</span>      iframeWin<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      sondata<span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">,</span>      height<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token comment" spellcheck="true">//获取到了iframe的对象</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>iframe<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//获取到了iframe的window对象</span>    <span class="token comment" spellcheck="true">//赋值</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>iframeWin <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>iframe<span class="token punctuation">.</span>contentWindow    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Vue-如何向-ifrmae-内传送信息"><a href="#3-Vue-如何向-ifrmae-内传送信息" class="headerlink" title="(3)Vue 如何向 ifrmae 内传送信息"></a>(3)Vue 如何向 ifrmae 内传送信息</h2><blockquote><p>同过 postMessage 来传递,里面的数据可以自己定义,例如</p></blockquote><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"cmd"</span><span class="token operator">:</span> <span class="token string">"命令"</span><span class="token punctuation">,</span>  <span class="token property">"params"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"键1"</span><span class="token operator">:</span> <span class="token string">"值1"</span><span class="token punctuation">,</span>    <span class="token property">"键2"</span><span class="token operator">:</span> <span class="token string">"值2"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过 cmd 来区别这条 message 的目的</p><p>具体代码</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrapdiv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sendmessage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发送数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>子页面给父页面的数据:{{sondata}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span>      <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iframe<span class="token punctuation">"</span></span>      <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iframe<span class="token punctuation">"</span></span>      <span class="token attr-name">scrolling</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span>      <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span>      <span class="token attr-name">:height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>height<span class="token punctuation">"</span></span>      <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>      <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'首页'</span><span class="token punctuation">,</span>        url<span class="token punctuation">:</span> <span class="token string">'http://www.textiframe.com/'</span><span class="token punctuation">,</span>        iframeWin<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        sondata<span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">,</span>        height<span class="token punctuation">:</span> <span class="token string">''</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>      <span class="token comment" spellcheck="true">//获取到了iframe的对象</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>iframe<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//获取到了iframe的window对象</span>      <span class="token comment" spellcheck="true">//赋值</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>iframeWin <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>iframe<span class="token punctuation">.</span>contentWindow      <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token comment" spellcheck="true">//设置高度</span>      <span class="token comment" spellcheck="true">//监听加载</span>      <span class="token comment" spellcheck="true">// 处理兼容行问题</span>      <span class="token comment" spellcheck="true">//在外部Vue的window上添加postMessage的监听,并且绑定处理函数handleMessage</span>      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> _this<span class="token punctuation">.</span>handleMessage<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//监听子页面返回来的信息</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">sendmessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行了'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//外部Vue想iframe内部传数据</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>iframeWin<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>          <span class="token punctuation">{</span>            cmd<span class="token punctuation">:</span> <span class="token string">'createJson'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//名称 告诉子页面对应的接口名称</span>            params<span class="token punctuation">:</span> <span class="token punctuation">{</span>              success<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>              result<span class="token punctuation">:</span> <span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">'我是子页面'</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token string">'*'</span>        <span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">handleMessage</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'监听了'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//依据上面的结构来解析iframe内部发回的数据</span>        <span class="token keyword">const</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data        <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">case</span> <span class="token string">'returnFormJson'</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">//业务逻辑</span>            <span class="token keyword">break</span>          <span class="token keyword">case</span> <span class="token string">'returnHeight'</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">//业务逻辑</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'收到了子页面传递过来的数据,子页面数据格式如下'</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>params<span class="token punctuation">)</span>            _this<span class="token punctuation">.</span>sondata <span class="token operator">=</span> data<span class="token punctuation">.</span>params<span class="token punctuation">.</span>result<span class="token punctuation">.</span>message            <span class="token keyword">break</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-子页面-iframe-内部如何接收信息并发送信息"><a href="#4-子页面-iframe-内部如何接收信息并发送信息" class="headerlink" title="(4)子页面 iframe 内部如何接收信息并发送信息"></a>(4)子页面 iframe 内部如何接收信息并发送信息</h2><ul><li><p>必须在元素上绑定 onclick</p></li><li><p>window.addEventListener(‘message’)来接收</p></li><li><p>window.parent.postMessage 来发送数据</p></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>测试Index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://code.jquery.com/jquery-2.1.4.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    为了测试是否能接受到数据    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button1<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>callParent()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      点击跳转    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>父页面给子页面的数据:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>result_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">1000</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>blue</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">html </span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">* </span><span class="token punctuation">{</span>      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">body </span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//接受父页面发来的信息</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data      <span class="token keyword">switch</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'createJson'</span><span class="token punctuation">:</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'收到父页面发送过来的数据了,数据如下'</span><span class="token punctuation">)</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>params<span class="token punctuation">)</span>          <span class="token keyword">let</span> value <span class="token operator">=</span> data<span class="token punctuation">.</span>params<span class="token punctuation">.</span>result<span class="token punctuation">.</span>name <span class="token comment" spellcheck="true">//名称</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#result_name'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">function</span> <span class="token function">callParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      window<span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>        <span class="token punctuation">{</span>          cmd<span class="token punctuation">:</span> <span class="token string">'returnHeight'</span><span class="token punctuation">,</span>          params<span class="token punctuation">:</span> <span class="token punctuation">{</span>            success<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            result<span class="token punctuation">:</span> <span class="token punctuation">{</span>              message<span class="token punctuation">:</span> <span class="token string">'我是子页面给父页面的数据哈哈'</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'*'</span>      <span class="token punctuation">)</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>父页面接收数据</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>父页面发送数据,postMessage</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>iframeWin <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>iframe<span class="token punctuation">.</span>contentWindow<span class="token keyword">this</span><span class="token punctuation">.</span>iframeWin<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>  <span class="token punctuation">{</span>    cmd<span class="token punctuation">:</span> <span class="token string">'createJson'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//名称 告诉子页面对应的接口名称</span>    params<span class="token punctuation">:</span> <span class="token punctuation">{</span>      success<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      result<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'我是子页面'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">'*'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>子页面接收数据 window.addEventListener(‘message’, function(event) {})</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//接受父页面发来的信息</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data  <span class="token keyword">switch</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'createJson'</span><span class="token punctuation">:</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'收到父页面发送过来的数据了,数据如下'</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>params<span class="token punctuation">)</span>      <span class="token keyword">let</span> value <span class="token operator">=</span> data<span class="token punctuation">.</span>params<span class="token punctuation">.</span>result<span class="token punctuation">.</span>name <span class="token comment" spellcheck="true">//名称</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#result_name'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>子页面发送数据 window.parent.postMessage()</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button1<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>callParent()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  点击跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">function</span> <span class="token function">callParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>      <span class="token punctuation">{</span>        cmd<span class="token punctuation">:</span> <span class="token string">'returnHeight'</span><span class="token punctuation">,</span>        params<span class="token punctuation">:</span> <span class="token punctuation">{</span>          success<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          result<span class="token punctuation">:</span> <span class="token punctuation">{</span>            message<span class="token punctuation">:</span> <span class="token string">'我是子页面给父页面的数据哈哈'</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token string">'*'</span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 基础(十一)单元测试</title>
      <link href="/2020/01/11/pythonbasic11/"/>
      <url>/2020/01/11/pythonbasic11/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-基础-十-———-单元测试"><a href="#Python-基础-十-———-单元测试" class="headerlink" title="Python 基础(十) ——— 单元测试"></a>Python 基础(十) ——— 单元测试</h1><blockquote><p>最具挑战性的挑战莫过于提升自我。——迈克尔·F·斯特利</p></blockquote><h2 id="单元测试和测试用例"><a href="#单元测试和测试用例" class="headerlink" title="单元测试和测试用例"></a>单元测试和测试用例</h2><blockquote><p>通过 unittest 使用 unittest.main()来测试</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> unittest<span class="token keyword">def</span> <span class="token function">username</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"我叫"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"今年"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>age<span class="token punctuation">)</span>username<span class="token punctuation">(</span><span class="token string">"YJ"</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span>unittest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 基础(十)文件和异常</title>
      <link href="/2020/01/10/pythonbasic10/"/>
      <url>/2020/01/10/pythonbasic10/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-基础-十-———-文件和异常"><a href="#Python-基础-十-———-文件和异常" class="headerlink" title="Python 基础(十) ——— 文件和异常"></a>Python 基础(十) ——— 文件和异常</h1><blockquote><p>意志坚强的人能把世界放在手中像泥块一样任意揉捏。——歌德</p></blockquote><h2 id="路径必须要用-os"><a href="#路径必须要用-os" class="headerlink" title="路径必须要用 os"></a>路径必须要用 os</h2><ul><li>在 python 中比如路径 user\bin\spanm</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> osresult <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token string">'bin'</span><span class="token punctuation">,</span> <span class="token string">'spanm'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># user\bin\spanm</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>getcwd() 获取当前文件所在的路径</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> osresult <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># E:\TextCode\Python\PythonTwo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看文件大小 os.path.getsize()</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> ospath <span class="token operator">=</span> <span class="token string">'E:\TextCode\Python\PythonTwo\PythonBasicOne.py'</span>result <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token number">311</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>检查路径有效性 os.path.exists()</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> ospath <span class="token operator">=</span> <span class="token string">'E:\TextCode\Python\PythonTwo\PythonBasicOne.py'</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="从文件中读取数据"><a href="#从文件中读取数据" class="headerlink" title="从文件中读取数据"></a>从文件中读取数据</h2><ul><li><p>win open</p></li><li><p>要是读出所有必须加 xxxx.read()</p></li><li><p>要是逐行读出 必须用 for 循环</p></li><li><p>要是想把数据保存在列表里就需要 xxxx.readlines()</p></li></ul><h3 id="读取整个文件"><a href="#读取整个文件" class="headerlink" title="读取整个文件"></a>读取整个文件</h3><ul><li>创建一个文件,文件内容比如</li></ul><pre class="line-numbers language-txt"><code class="language-txt">3.1415926589874361hda8dad12121987d7ahlui87dalkhcziuc8a7da1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>读取文件,并显示</li></ul><h3 id="利用-with-然后-open-然后-as-最后的结果-打印出结果-要去除右边的空格"><a href="#利用-with-然后-open-然后-as-最后的结果-打印出结果-要去除右边的空格" class="headerlink" title="利用 with 然后 open 然后 as 最后的结果,打印出结果,要去除右边的空格"></a>利用 with 然后 open 然后 as 最后的结果,打印出结果,要去除右边的空格</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"read.txt"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>    contents <span class="token operator">=</span> file_object<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>contents<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 3.14159265</span><span class="token comment" spellcheck="true"># 89874361hda8dad12121</span><span class="token comment" spellcheck="true"># 987d7ahlui87dalkhcziuc8a7da1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h3><ul><li>比如 txt 文本在 son 文件下,可以使用相对路径</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"son/read.txt"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>    contents <span class="token operator">=</span> file_object<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>contents<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="逐行读取"><a href="#逐行读取" class="headerlink" title="逐行读取"></a>逐行读取</h3><ul><li><p>读取的时候通过 for 循环</p></li><li><p>使用 rstrip()去掉换行和右边的空格</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"son/read.txt"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> file_object<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 3.14159265</span><span class="token comment" spellcheck="true"># 89874361hda8dad12121</span><span class="token comment" spellcheck="true"># 987d7ahlui87dalkhcziuc8a7da1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建一个包含文件的列表"><a href="#创建一个包含文件的列表" class="headerlink" title="创建一个包含文件的列表"></a>创建一个包含文件的列表</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"son/read.txt"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>    lines <span class="token operator">=</span> file_object<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 3.14159265</span><span class="token comment" spellcheck="true"># 89874361hda8dad12121</span><span class="token comment" spellcheck="true"># 987d7ahlui87dalkhcziuc8a7da1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><ul><li><p>with open (路径名,’w’) w 表示写入</p></li><li><p>读模式可以是 r, 写入模式就是 w,附加模式就是 a,后者能读取或者写入(r+),如果省略 默认就是 r 读</p></li></ul><h3 id="写入空文件"><a href="#写入空文件" class="headerlink" title="写入空文件"></a>写入空文件</h3><pre class="line-numbers language-python"><code class="language-python">filename <span class="token operator">=</span> <span class="token string">"write.txt"</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fileitem<span class="token punctuation">:</span>    fileitem<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"I love Python"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span> 文本里面就会出现 I lovePython<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="写入多行-写入中文"><a href="#写入多行-写入中文" class="headerlink" title="写入多行,写入中文"></a>写入多行,写入中文</h3><ul><li>后面需要加上 utf-8 参数</li></ul><pre class="line-numbers language-python"><code class="language-python">filename <span class="token operator">=</span> <span class="token string">"write.txt"</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fileitem<span class="token punctuation">:</span>        <span class="token keyword">while</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            fileitem<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"这就是第"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"变化"</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>            i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结束了"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span>这就是第<span class="token number">0</span>变化这就是第<span class="token number">1</span>变化这就是第<span class="token number">2</span>变化这就是第<span class="token number">3</span>变化这就是第<span class="token number">4</span>变化这就是第<span class="token number">5</span>变化这就是第<span class="token number">6</span>变化这就是第<span class="token number">7</span>变化这就是第<span class="token number">8</span>变化这就是第<span class="token number">9</span>变化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="如果要是附加模式-a-则表示在文件末尾输入"><a href="#如果要是附加模式-a-则表示在文件末尾输入" class="headerlink" title="如果要是附加模式 a 则表示在文件末尾输入"></a>如果要是附加模式 a 则表示在文件末尾输入</h3><pre class="line-numbers language-python"><code class="language-python">filename <span class="token operator">=</span> <span class="token string">"write.txt"</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fileitem<span class="token punctuation">:</span>        <span class="token keyword">while</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            fileitem<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"这就是我新添加的"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"变化"</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>            i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结束了"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 这就是第0变化</span><span class="token comment" spellcheck="true"># 这就是第1变化</span><span class="token comment" spellcheck="true"># 这就是第2变化</span><span class="token comment" spellcheck="true"># 这就是第3变化</span><span class="token comment" spellcheck="true"># 这就是第4变化</span><span class="token comment" spellcheck="true"># 这就是第5变化</span><span class="token comment" spellcheck="true"># 这就是第6变化</span><span class="token comment" spellcheck="true"># 这就是第7变化</span><span class="token comment" spellcheck="true"># 这就是第8变化</span><span class="token comment" spellcheck="true"># 这就是第9变化</span><span class="token comment" spellcheck="true"># 这就是我新添加的0变化</span><span class="token comment" spellcheck="true"># 这就是我新添加的1变化</span><span class="token comment" spellcheck="true"># 这就是我新添加的2变化</span><span class="token comment" spellcheck="true"># 这就是我新添加的3变化</span><span class="token comment" spellcheck="true"># 这就是我新添加的4变化</span><span class="token comment" spellcheck="true"># 这就是我新添加的5变化</span><span class="token comment" spellcheck="true"># 这就是我新添加的6变化</span><span class="token comment" spellcheck="true"># 这就是我新添加的7变化</span><span class="token comment" spellcheck="true"># 这就是我新添加的8变化</span><span class="token comment" spellcheck="true"># 这就是我新添加的9变化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul><li>try-except</li></ul><blockquote><p>异常就是程序执行期间发生的错误,异常是使用 try-except 代码块处理的.try-except 让 python 执行指定的操作,同时告诉 Python 发生异常的时候该怎么办</p></blockquote><h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Wrong"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h2><h3 id="使用-json-dump-和-json-load"><a href="#使用-json-dump-和-json-load" class="headerlink" title="使用 json.dump()和 json.load()"></a>使用 json.dump()和 json.load()</h3><ul><li>使用 json.dump()来存储,使用 json.load()用来读</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> jsonnumbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第一个"</span><span class="token punctuation">,</span> <span class="token string">"第二个"</span><span class="token punctuation">,</span> <span class="token string">"第三个"</span><span class="token punctuation">,</span> <span class="token string">"第四个"</span><span class="token punctuation">,</span> <span class="token string">"第五个"</span><span class="token punctuation">,</span> <span class="token string">"第六个"</span><span class="token punctuation">]</span>filename <span class="token operator">=</span> <span class="token string">"numbers.txt"</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> item<span class="token punctuation">:</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span>在numbers<span class="token punctuation">.</span>txt里面就会存储<span class="token punctuation">[</span><span class="token string">"\u7b2c\u4e00\u4e2a"</span><span class="token punctuation">,</span> <span class="token string">"\u7b2c\u4e8c\u4e2a"</span><span class="token punctuation">,</span> <span class="token string">"\u7b2c\u4e09\u4e2a"</span><span class="token punctuation">,</span> <span class="token string">"\u7b2c\u56db\u4e2a"</span><span class="token punctuation">,</span> <span class="token string">"\u7b2c\u4e94\u4e2a"</span><span class="token punctuation">,</span> <span class="token string">"\u7b2c\u516d\u4e2a"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用 json.load()读取</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> jsonfilename <span class="token operator">=</span> <span class="token string">"numbers.txt"</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token keyword">as</span> item<span class="token punctuation">:</span>    numbers <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">,</span> <span class="token string">'第四个'</span><span class="token punctuation">,</span> <span class="token string">'第五个'</span><span class="token punctuation">,</span> <span class="token string">'第六个'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用异常来-存储"><a href="#使用异常来-存储" class="headerlink" title="使用异常来 存储"></a>使用异常来 存储</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> jsonfilename <span class="token operator">=</span> <span class="token string">"numbers2.txt"</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> item<span class="token punctuation">:</span>        username <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有这个文件"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 没有这个文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 基础(九)类</title>
      <link href="/2020/01/09/pythonbasic9/"/>
      <url>/2020/01/09/pythonbasic9/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-基础-九-———-类"><a href="#Python-基础-九-———-类" class="headerlink" title="Python 基础(九) ——— 类"></a>Python 基础(九) ——— 类</h1><blockquote><p>知人者智，自知者明。胜人者有力，自胜者强。——老子</p></blockquote><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><blockquote><p>类是面向对象写法的基础,都是基于类来创建对象,每个对象都自动具备这种通用行为.依据类来创建对象被称为实例化</p></blockquote><h3 id="创建和使用类"><a href="#创建和使用类" class="headerlink" title="创建和使用类"></a>创建和使用类</h3><ul><li>类的起名必须要大写</li></ul><p>创建 Dog 类</p><p>创建一个 Dog 类,每个类都将存储名字和年龄,赋予每条小狗蹲下(sit())和打滚(roll_over())<br>的能力</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">sit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 很听话它的年龄是 "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 我命令他蹲下 "</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">roll_over</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"翻滚吧"</span><span class="token punctuation">)</span>mydog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">"雷神"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>mydog<span class="token punctuation">.</span>sit<span class="token punctuation">(</span><span class="token punctuation">)</span>mydog<span class="token punctuation">.</span>roll_over<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 雷神 很听话它的年龄是 30 我命令他蹲下</span><span class="token comment" spellcheck="true"># 雷神翻滚吧</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>方法 __init__()</li></ul><blockquote><p>类中的函数称为方法,__init__这个方法就是构造函数每个类都必须要有,他就是构造函数,其中 self 必须要有,实例化的时候将自动传入实参 self.每个类实例化的时候都必须要执行。</p></blockquote><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>根据类创建实例</li></ul><blockquote><p>我们依据类来创建实例,通过实例.xxx 来访问属性</p></blockquote><pre class="line-numbers language-python"><code class="language-python">mydog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">"雷神"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>mydog<span class="token punctuation">.</span>sit<span class="token punctuation">(</span><span class="token punctuation">)</span>mydog<span class="token punctuation">.</span>roll_over<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>依据类 来创建多个实例</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">sit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 很听话它的年龄是 "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 我命令他蹲下 "</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">roll_over</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"翻滚吧"</span><span class="token punctuation">)</span>mydog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">"雷神"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>mydog<span class="token punctuation">.</span>sit<span class="token punctuation">(</span><span class="token punctuation">)</span>mydog<span class="token punctuation">.</span>roll_over<span class="token punctuation">(</span><span class="token punctuation">)</span>mydog2 <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">"蜘蛛侠"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>mydog2<span class="token punctuation">.</span>sit<span class="token punctuation">(</span><span class="token punctuation">)</span>mydog2<span class="token punctuation">.</span>roll_over<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#结果</span><span class="token comment" spellcheck="true"># 雷神 很听话它的年龄是 30 我命令他蹲下</span><span class="token comment" spellcheck="true"># 雷神翻滚吧</span><span class="token comment" spellcheck="true"># 蜘蛛侠 很听话它的年龄是 20 我命令他蹲下</span><span class="token comment" spellcheck="true"># 蜘蛛侠翻滚吧</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用类和实例"><a href="#使用类和实例" class="headerlink" title="使用类和实例"></a>使用类和实例</h3><blockquote><p>创建一个类</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>make <span class="token operator">=</span> make        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model        self<span class="token punctuation">.</span>year <span class="token operator">=</span> year    <span class="token keyword">def</span> <span class="token function">get_description_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        long_name <span class="token operator">=</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>year<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>make <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>model        <span class="token keyword">return</span> long_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>myCar <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">'audi'</span><span class="token punctuation">,</span> <span class="token string">'a4'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>myCar<span class="token punctuation">.</span>get_description_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>给属性指定默认值</li></ul><p>就是在构造函数里面添加值</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>make <span class="token operator">=</span> make        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model        self<span class="token punctuation">.</span>year <span class="token operator">=</span> year        self<span class="token punctuation">.</span>reading <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">get_description_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        long_name <span class="token operator">=</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>year<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>make <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>model <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>reading<span class="token punctuation">)</span>        <span class="token keyword">return</span> long_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>myCar <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">'audi'</span><span class="token punctuation">,</span> <span class="token string">'a4'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>myCar<span class="token punctuation">.</span>get_description_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token number">2016</span> Audi A40<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改属性里面的值</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>make <span class="token operator">=</span> make        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model        self<span class="token punctuation">.</span>year <span class="token operator">=</span> year        self<span class="token punctuation">.</span>reading <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">get_description_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        long_name <span class="token operator">=</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>year<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>make <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>model <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>reading<span class="token punctuation">)</span>        <span class="token keyword">return</span> long_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>myCar <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">'audi'</span><span class="token punctuation">,</span> <span class="token string">'a4'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span>myCar<span class="token punctuation">.</span>reading <span class="token operator">=</span> <span class="token number">23</span><span class="token keyword">print</span><span class="token punctuation">(</span>myCar<span class="token punctuation">.</span>get_description_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token number">2016</span> Audi A423<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以通过方法来修改</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>make <span class="token operator">=</span> make        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model        self<span class="token punctuation">.</span>year <span class="token operator">=</span> year        self<span class="token punctuation">.</span>reading <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">get_description_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        long_name <span class="token operator">=</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>year<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>make <span class="token operator">+</span> \            <span class="token string">" "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>model <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>reading<span class="token punctuation">)</span>        <span class="token keyword">return</span> long_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">updatereading</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>reading <span class="token operator">=</span> numbermyCar <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">'audi'</span><span class="token punctuation">,</span> <span class="token string">'a4'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span>myCar<span class="token punctuation">.</span>updatereading<span class="token punctuation">(</span><span class="token number">1345</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>myCar<span class="token punctuation">.</span>get_description_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token number">2016</span> Audi A41345<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承就是一个类继承另一个类,他将自动获得另一个类的所有属性和方法,原有的称为父类,而新类称为子类。子类继承了其父类的所有属性和方法,同时还定义子的的属性和方法</p><blockquote><p>通过 super().__init__ 和 class xxx(父类)来继承</p></blockquote><ul><li>举例</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>make <span class="token operator">=</span> make        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model        self<span class="token punctuation">.</span>year <span class="token operator">=</span> year        self<span class="token punctuation">.</span>reading <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">get_description_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        long_name <span class="token operator">=</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>year<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>make <span class="token operator">+</span> \            <span class="token string">" "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>model <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>reading<span class="token punctuation">)</span>        <span class="token keyword">return</span> long_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">updatereading</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>reading <span class="token operator">=</span> number<span class="token keyword">class</span> <span class="token class-name">Trunk</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">getname</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"卡车的名字"</span><span class="token operator">+</span>self<span class="token punctuation">.</span>make<span class="token punctuation">)</span>myCar <span class="token operator">=</span> Trunk<span class="token punctuation">(</span><span class="token string">'audi'</span><span class="token punctuation">,</span> <span class="token string">'a4'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span>myCar<span class="token punctuation">.</span>updatereading<span class="token punctuation">(</span><span class="token number">1345</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>myCar<span class="token punctuation">.</span>get_description_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>myCar<span class="token punctuation">.</span>getname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token number">2016</span> Audi A41345卡车的名字audi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>重写父类的方法</li></ul><blockquote><p>可以将子类的方法和父类的方法写成重名，这样他就会执行子类方法</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>make <span class="token operator">=</span> make        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model        self<span class="token punctuation">.</span>year <span class="token operator">=</span> year        self<span class="token punctuation">.</span>reading <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">get_description_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        long_name <span class="token operator">=</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>year<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>make <span class="token operator">+</span> \            <span class="token string">" "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>model <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>reading<span class="token punctuation">)</span>        <span class="token keyword">return</span> long_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">updatereading</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>reading <span class="token operator">=</span> number    <span class="token keyword">def</span> <span class="token function">setname</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输出父类的名称"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Trunk</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">getname</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"卡车的名字"</span><span class="token operator">+</span>self<span class="token punctuation">.</span>make<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">setname</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输出子类的名称"</span><span class="token punctuation">)</span>myCar <span class="token operator">=</span> Trunk<span class="token punctuation">(</span><span class="token string">'audi'</span><span class="token punctuation">,</span> <span class="token string">'a4'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span>myCar<span class="token punctuation">.</span>updatereading<span class="token punctuation">(</span><span class="token number">1345</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>myCar<span class="token punctuation">.</span>get_description_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>myCar<span class="token punctuation">.</span>getname<span class="token punctuation">(</span><span class="token punctuation">)</span>myCar<span class="token punctuation">.</span>setname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token number">2016</span> Audi A41345卡车的名字audi输出子类的名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将类拆分 用作属性</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>make <span class="token operator">=</span> make        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model        self<span class="token punctuation">.</span>year <span class="token operator">=</span> year        self<span class="token punctuation">.</span>reading <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">get_description_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        long_name <span class="token operator">=</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>year<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>make <span class="token operator">+</span> \            <span class="token string">" "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>model <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>reading<span class="token punctuation">)</span>        <span class="token keyword">return</span> long_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">updatereading</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>reading <span class="token operator">=</span> number    <span class="token keyword">def</span> <span class="token function">setname</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输出父类的名称"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Mo</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">getname</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name<span class="token keyword">class</span> <span class="token class-name">Trunk</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> Mo<span class="token punctuation">(</span><span class="token string">"电池"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getname<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">getname</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"卡车的名字"</span><span class="token operator">+</span>self<span class="token punctuation">.</span>make <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">setname</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输出子类的名称"</span><span class="token punctuation">)</span>myCar <span class="token operator">=</span> Trunk<span class="token punctuation">(</span><span class="token string">'audi'</span><span class="token punctuation">,</span> <span class="token string">'a4'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span>myCar<span class="token punctuation">.</span>updatereading<span class="token punctuation">(</span><span class="token number">1345</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>myCar<span class="token punctuation">.</span>get_description_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>myCar<span class="token punctuation">.</span>getname<span class="token punctuation">(</span><span class="token punctuation">)</span>myCar<span class="token punctuation">.</span>setname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token number">2016</span> Audi A41345卡车的名字audi 电池输出子类的名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导入类"><a href="#导入类" class="headerlink" title="导入类"></a>导入类</h3><ul><li>导入方式同 导入文件</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> son<span class="token punctuation">.</span>PyBasic2mycar <span class="token operator">=</span> son<span class="token punctuation">.</span>PyBasic2<span class="token punctuation">.</span>Car<span class="token punctuation">(</span><span class="token string">'audi'</span><span class="token punctuation">,</span> <span class="token string">'a4'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span>mycar<span class="token punctuation">.</span>setname<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>文件中涉及到多个类 也一样</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> son<span class="token punctuation">.</span>PyBasic2myCar <span class="token operator">=</span> son<span class="token punctuation">.</span>PyBasic2<span class="token punctuation">.</span>Trunk<span class="token punctuation">(</span><span class="token string">'audi'</span><span class="token punctuation">,</span> <span class="token string">'a4'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span>myCar<span class="token punctuation">.</span>updatereading<span class="token punctuation">(</span><span class="token number">1345</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>myCar<span class="token punctuation">.</span>get_description_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>myCar<span class="token punctuation">.</span>getname<span class="token punctuation">(</span><span class="token punctuation">)</span>myCar<span class="token punctuation">.</span>setname<span class="token punctuation">(</span><span class="token punctuation">)</span>myCar2 <span class="token operator">=</span> son<span class="token punctuation">.</span>PyBasic2<span class="token punctuation">.</span>Car<span class="token punctuation">(</span><span class="token string">'audi'</span><span class="token punctuation">,</span> <span class="token string">'a4'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span>myCar2<span class="token punctuation">.</span>setname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token number">2016</span> Audi A41345卡车的名字audi 电池输出子类的名称输出父类的名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 基础(八)函数</title>
      <link href="/2020/01/08/pythonbasic8/"/>
      <url>/2020/01/08/pythonbasic8/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-基础-八-———-函数"><a href="#Python-基础-八-———-函数" class="headerlink" title="Python 基础(八) ——— 函数"></a>Python 基础(八) ——— 函数</h1><blockquote><p>越是无能的人，越喜欢挑剔别人的错儿。——爱尔兰</p></blockquote><h2 id="函数-def"><a href="#函数-def" class="headerlink" title="函数 def"></a>函数 def</h2><ul><li><p>函数定义前 前面必须要加上 def 关键字</p></li><li><p>后面必须有:</p></li><li><p>注意缩进</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>hello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 最后的结果</span>hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>传递参数</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>hello<span class="token punctuation">(</span><span class="token string">"哈哈哈"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 最后的结果</span>哈哈哈<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数里面嵌套传递列表"><a href="#函数里面嵌套传递列表" class="headerlink" title="函数里面嵌套传递列表"></a>函数里面嵌套传递列表</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> arr<span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">"color"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            item<span class="token punctuation">[</span><span class="token string">"number"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">22</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">]</span>hello<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'number'</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="传递任意数量的实参"><a href="#传递任意数量的实参" class="headerlink" title="传递任意数量的实参"></a>传递任意数量的实参</h3><ul><li>用*表示很多</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">more</span><span class="token punctuation">(</span><span class="token operator">*</span>names<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span>more<span class="token punctuation">(</span><span class="token string">"今天"</span><span class="token punctuation">,</span> <span class="token string">"明天"</span><span class="token punctuation">,</span> <span class="token string">"后天"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token punctuation">(</span><span class="token string">'今天'</span><span class="token punctuation">,</span> <span class="token string">'明天'</span><span class="token punctuation">,</span> <span class="token string">'后天'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数模块可导"><a href="#函数模块可导" class="headerlink" title="函数模块可导"></a>函数模块可导</h3><ul><li>模块导入 import,同级别</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> PyBasic2PyBasic2<span class="token punctuation">.</span>daoru<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"第一个"</span><span class="token punctuation">,</span> <span class="token string">"第二个"</span><span class="token punctuation">,</span> <span class="token string">"第三个"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>要是想引入某个类或者方法之类的可以</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span>  xxxx <span class="token keyword">import</span> xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>模块引入不是同级别的目录</li></ul><blockquote><p>比如要引入的文件位置在 son 文件夹那必须要在 son 文件夹下面新建一个文件,</p></blockquote><ul><li>名字叫 __init__.py,空文件即可</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> son<span class="token punctuation">.</span>PyBasic2son<span class="token punctuation">.</span>PyBasic2<span class="token punctuation">.</span>daoru<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"第一个"</span><span class="token punctuation">,</span> <span class="token string">"第二个"</span><span class="token punctuation">,</span> <span class="token string">"第三个"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span>第一个第二个第三个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-sys-exit-提前结束程序"><a href="#使用-sys-exit-提前结束程序" class="headerlink" title="使用 sys.exit()提前结束程序"></a>使用 sys.exit()提前结束程序</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> syssys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#这样就强制退出了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 基础(七)用户输入和 while 循环</title>
      <link href="/2020/01/07/pythonbasic7/"/>
      <url>/2020/01/07/pythonbasic7/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-基础-七-———-用户输入和-while-循环"><a href="#Python-基础-七-———-用户输入和-while-循环" class="headerlink" title="Python 基础(七) ——— 用户输入和 while 循环"></a>Python 基础(七) ——— 用户输入和 while 循环</h1><blockquote><p>越是没有本领的就越加自命不凡。——邓拓</p></blockquote><h2 id="函数-input-的工作原理"><a href="#函数-input-的工作原理" class="headerlink" title="函数 input()的工作原理"></a>函数 input()的工作原理</h2><ul><li>函数 input()让程序暂停运行,等待用户输入一些文本.获取用户输入后,Python 将其存储在一个变量中,方便运行,input 里面的文字就是提示的内容</li></ul><pre class="line-numbers language-python"><code class="language-python">mes <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你的名字"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mes<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span>用户输入的是张三显示的就是张三<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用户输入后结果就是个字符串"><a href="#用户输入后结果就是个字符串" class="headerlink" title="用户输入后结果就是个字符串"></a>用户输入后结果就是个字符串</h3><ul><li>int()但是需要把字符串变成数字,来计算的话必须通过 int()</li></ul><pre class="line-numbers language-python"><code class="language-python">age <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你的年龄"</span><span class="token punctuation">)</span>result <span class="token operator">=</span> int<span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="求模运算"><a href="#求模运算" class="headerlink" title="求模运算%"></a>求模运算%</h3><pre class="line-numbers language-python"><code class="language-python">age <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你的年龄"</span><span class="token punctuation">)</span>result <span class="token operator">=</span> int<span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span>输入要是奇数返回的就是<span class="token number">1</span> 输入的要是偶数返回的就是<span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h2><ul><li><p>while 是针对于几何中每个元素都一个代码块,而 while 不断的运行,直到条件不满足为止</p></li><li><p>必须在后面加:</p></li></ul><h3 id="使用-while-循环"><a href="#使用-while-循环" class="headerlink" title="使用 while 循环"></a>使用 while 循环</h3><ul><li>基础</li></ul><pre class="line-numbers language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入了几次"</span><span class="token punctuation">)</span>  i<span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结束了"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span>输入了几次输入了几次输入了几次结束了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>让用户自己选择什么时候退出</li></ul><pre class="line-numbers language-python"><code class="language-python">message <span class="token operator">=</span> <span class="token string">"请输入用户名"</span>result <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">while</span> result <span class="token operator">!=</span> <span class="token string">"quit"</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> input<span class="token punctuation">(</span>message<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"还得继续输入"</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结束了"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span>只有当用户输入了quit 这个时候才退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-break-退出"><a href="#使用-break-退出" class="headerlink" title="使用 break 退出"></a>使用 break 退出</h3><ul><li>这样使用 break 就直接条春循环</li></ul><pre class="line-numbers language-python"><code class="language-python">message <span class="token operator">=</span> <span class="token string">"请输入用户名"</span>result <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> input<span class="token punctuation">(</span>message<span class="token punctuation">)</span>    <span class="token keyword">if</span> result <span class="token operator">==</span> <span class="token string">"结束"</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"显示刚才用户输入的"</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结束了"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="continue-中断循环"><a href="#continue-中断循环" class="headerlink" title="continue 中断循环"></a>continue 中断循环</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Who are you?"</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你的名字"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> name <span class="token operator">!=</span> <span class="token string">"YJ"</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello end Please enter your password :"</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> password <span class="token operator">==</span> <span class="token string">"123456"</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Over"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果只有当用户输入了YJ的时候</span><span class="token comment" spellcheck="true"># 他才跳出循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 基础(六)字典</title>
      <link href="/2020/01/06/pythonbasic6/"/>
      <url>/2020/01/06/pythonbasic6/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-基础-六-———-字典"><a href="#Python-基础-六-———-字典" class="headerlink" title="Python 基础(六) ——— 字典"></a>Python 基础(六) ——— 字典</h1><blockquote><p>阅读一本好书如同和过去最杰出的人谈话。——笛卡儿</p></blockquote><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><ul><li><p>简单来说 字典类似对象。字典是一系列 键值对，每个键都对应一个值</p></li><li><p>例如</p></li></ul><pre class="line-numbers language-python"><code class="language-python">alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token string">"points"</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien<span class="token punctuation">[</span><span class="token string">"color"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span>green<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="访问字典中的值"><a href="#访问字典中的值" class="headerlink" title="访问字典中的值"></a>访问字典中的值</h3><ul><li>通过[‘属性名’]</li></ul><pre class="line-numbers language-python"><code class="language-python">alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token string">"points"</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien<span class="token punctuation">[</span><span class="token string">"color"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span>green<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加键值对"><a href="#添加键值对" class="headerlink" title="添加键值对"></a>添加键值对</h3><ul><li>可以通过属性:值 来添加</li></ul><pre class="line-numbers language-python"><code class="language-python">alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"points"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span>alien<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"颜色"</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'points'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'颜色'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加一个空字典"><a href="#添加一个空字典" class="headerlink" title="添加一个空字典"></a>添加一个空字典</h3><ul><li>可以用一个{}表示字典</li></ul><pre class="line-numbers language-python"><code class="language-python"> alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> alien<span class="token punctuation">[</span><span class="token string">"color"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"red"</span> <span class="token keyword">print</span><span class="token punctuation">(</span>alien<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#结果</span> <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改字典中的值"><a href="#修改字典中的值" class="headerlink" title="修改字典中的值"></a>修改字典中的值</h3><pre class="line-numbers language-python"><code class="language-python">alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The alien is "</span> <span class="token operator">+</span> alien<span class="token punctuation">[</span><span class="token string">"color"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#结果</span>The alien <span class="token keyword">is</span> green<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除字典中值-del"><a href="#删除字典中值-del" class="headerlink" title="删除字典中值 del"></a>删除字典中值 del</h3><pre class="line-numbers language-python"><code class="language-python">alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"姓名"</span><span class="token punctuation">}</span><span class="token keyword">del</span> alien<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="get-方法就是当取不到值的时候-返回备用值"><a href="#get-方法就是当取不到值的时候-返回备用值" class="headerlink" title="get 方法就是当取不到值的时候 返回备用值"></a>get 方法就是当取不到值的时候 返回备用值</h3><pre class="line-numbers language-python"><code class="language-python">arrobj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"red"</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>arrobj<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"有值"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arrobj<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"名字"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># red</span><span class="token comment" spellcheck="true"># 名字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="setdefault-设置默认值"><a href="#setdefault-设置默认值" class="headerlink" title="setdefault()设置默认值"></a>setdefault()设置默认值</h3><ul><li>第一个参数 就是要检查的键。第二个键就是该键不存在的时候，要设置的值</li></ul><pre class="line-numbers language-python"><code class="language-python">arrobj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>arrobj<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arrobj<span class="token punctuation">)</span>arrobj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">}</span>arrobj2<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arrobj2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># {'color': 'red'}  第一次是没有属性,所以起作用</span><span class="token comment" spellcheck="true"># {'color': 'green'} 第二次是有属性 所以不起作用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h3><ul><li><p>通过 for in 循环来做</p></li><li><p>必须有:</p></li><li><p>循环的要是列表 必须要有 xxx.items()</p></li></ul><pre class="line-numbers language-python"><code class="language-python">alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"姓名"</span><span class="token punctuation">}</span><span class="token keyword">for</span> content <span class="token keyword">in</span> alien<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'姓名'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>要是想获取到里面值可以这样</li></ul><pre class="line-numbers language-python"><code class="language-python">alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"姓名"</span><span class="token punctuation">}</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> val <span class="token keyword">in</span> alien<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token string">"color"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span>green<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历字典里面所有的键"><a href="#遍历字典里面所有的键" class="headerlink" title="遍历字典里面所有的键"></a>遍历字典里面所有的键</h3><ul><li>方法同上 就是把 xxx.items() 变成 xxx.keys()</li></ul><pre class="line-numbers language-python"><code class="language-python">alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"姓名"</span><span class="token punctuation">}</span><span class="token keyword">for</span> name <span class="token keyword">in</span> alien<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span>colorname<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>按照顺序遍历字典中所有的键,sorted 排序</li></ul><pre class="line-numbers language-python"><code class="language-python">alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> <span class="token string">"alien"</span><span class="token punctuation">:</span> <span class="token string">"开始"</span><span class="token punctuation">}</span><span class="token keyword">for</span> name <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>alien<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span>aliencolorname<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历字典中所有的值"><a href="#遍历字典中所有的值" class="headerlink" title="遍历字典中所有的值"></a>遍历字典中所有的值</h3><ul><li>方法同上 就是把 xxx.items()变成 xx.values()</li></ul><pre class="line-numbers language-python"><code class="language-python">alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> <span class="token string">"alien"</span><span class="token punctuation">:</span> <span class="token string">"开始"</span><span class="token punctuation">}</span><span class="token keyword">for</span> content <span class="token keyword">in</span> alien<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#结果</span>green姓名开始<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字典嵌套"><a href="#字典嵌套" class="headerlink" title="字典嵌套"></a>字典嵌套</h3><ul><li>字典里嵌套字典</li></ul><pre class="line-numbers language-python"><code class="language-python">alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> <span class="token string">"alien"</span><span class="token punctuation">:</span> <span class="token string">"开始"</span><span class="token punctuation">}</span>alien2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> <span class="token string">"alien"</span><span class="token punctuation">:</span> <span class="token string">"开始"</span><span class="token punctuation">}</span>alien3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> <span class="token string">"alien"</span><span class="token punctuation">:</span> <span class="token string">"开始"</span><span class="token punctuation">}</span>aliens <span class="token operator">=</span> <span class="token punctuation">[</span>alien<span class="token punctuation">,</span> alien2<span class="token punctuation">,</span> alien3<span class="token punctuation">]</span><span class="token keyword">for</span> alien <span class="token keyword">in</span> aliens<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>alien<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 最后结果</span><span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'alien'</span><span class="token punctuation">:</span> <span class="token string">'开始'</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'alien'</span><span class="token punctuation">:</span> <span class="token string">'开始'</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'alien'</span><span class="token punctuation">:</span> <span class="token string">'开始'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建 10 个对象组合</li></ul><pre class="line-numbers language-python"><code class="language-python">alien <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> <span class="token string">"alien"</span><span class="token punctuation">:</span> <span class="token string">"开始"</span><span class="token punctuation">}</span>aliens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    aliens<span class="token punctuation">.</span>append<span class="token punctuation">(</span>alien<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>aliens<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token punctuation">[</span>  <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'alien'</span><span class="token punctuation">:</span> <span class="token string">'开始'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'alien'</span><span class="token punctuation">:</span> <span class="token string">'开始'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'alien'</span><span class="token punctuation">:</span> <span class="token string">'开始'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'alien'</span><span class="token punctuation">:</span> <span class="token string">'开始'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'alien'</span><span class="token punctuation">:</span> <span class="token string">'开始'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'alien'</span><span class="token punctuation">:</span> <span class="token string">'开始'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'alien'</span><span class="token punctuation">:</span> <span class="token string">'开始'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'alien'</span><span class="token punctuation">:</span> <span class="token string">'开始'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'alien'</span><span class="token punctuation">:</span> <span class="token string">'开始'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'alien'</span><span class="token punctuation">:</span> <span class="token string">'开始'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>字典里嵌套列表</li></ul><pre class="line-numbers language-python"><code class="language-python"> person <span class="token operator">=</span> <span class="token punctuation">{</span>   name<span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>   aihao<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"篮球"</span><span class="token punctuation">,</span><span class="token string">"足球"</span><span class="token punctuation">,</span><span class="token string">"橄榄球"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>字典里面嵌套字典</li></ul><pre class="line-numbers language-python"><code class="language-python"> person <span class="token operator">=</span> <span class="token punctuation">{</span>   name<span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>   aihao<span class="token punctuation">:</span><span class="token punctuation">{</span>     name<span class="token punctuation">:</span><span class="token string">"足球"</span><span class="token punctuation">,</span>     score<span class="token punctuation">:</span><span class="token string">"80"</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 基础(五)IF 语句</title>
      <link href="/2020/01/05/pythonbasic5/"/>
      <url>/2020/01/05/pythonbasic5/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-基础-五-———-IF-语句"><a href="#Python-基础-五-———-IF-语句" class="headerlink" title="Python 基础(五) ——— IF 语句"></a>Python 基础(五) ——— IF 语句</h1><blockquote><p>有时候读书是一种巧妙地避开思考的方法。——赫尔普斯</p></blockquote><h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><h3 id="for-循环判断数据"><a href="#for-循环判断数据" class="headerlink" title="for 循环判断数据"></a>for 循环判断数据</h3><ul><li><p>if 语句后面没有括号必须有冒号</p></li><li><p>else 后面必须有冒号</p></li><li><p>缩进用来结束</p></li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">"汽车"</span><span class="token punctuation">,</span>    <span class="token string">"卡车"</span><span class="token punctuation">,</span>    <span class="token string">"火车"</span><span class="token punctuation">]</span><span class="token keyword">for</span> item <span class="token keyword">in</span> arr<span class="token punctuation">:</span>    <span class="token keyword">if</span> item <span class="token operator">==</span> <span class="token string">"汽车"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这就是我说的"</span><span class="token operator">+</span>item<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#### 最后的结果</span>这就是我说的汽车卡车火车<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if-elif-else"></a>if-elif-else</h3><pre class="line-numbers language-python"><code class="language-python">age <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> age <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是比4岁大的"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">></span> <span class="token number">15</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是比15岁大的"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是比4岁小的"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结束了"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span>这是比<span class="token number">4</span>岁小的结束了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多个-if-elif-else-嵌套"><a href="#多个-if-elif-else-嵌套" class="headerlink" title="多个 if-elif-else 嵌套"></a>多个 if-elif-else 嵌套</h3><pre class="line-numbers language-python"><code class="language-python">age <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> age <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是比4岁大的"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">></span> <span class="token number">15</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是比15岁大的"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是比18岁大的"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是比20岁大的"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"都结束了"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结束了"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 最后结果</span>都结束了结束了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="确定列表不是空的"><a href="#确定列表不是空的" class="headerlink" title="确定列表不是空的"></a>确定列表不是空的</h3><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">if</span> arr<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"里面有值"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"里面没有值"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 最后结果</span> 里面没有值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="不相等"><a href="#不相等" class="headerlink" title="不相等"></a>不相等</h3><blockquote><p>!=表示不相等</p></blockquote><pre class="line-numbers language-python"><code class="language-python">mes <span class="token operator">=</span> <span class="token string">"第一天"</span><span class="token keyword">if</span> mes <span class="token operator">!=</span> <span class="token string">"第一天"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据对了"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据不对"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#最后结果</span>数据不对<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="有的时候需要判断多个条件"><a href="#有的时候需要判断多个条件" class="headerlink" title="有的时候需要判断多个条件"></a>有的时候需要判断多个条件</h3><ul><li>使用 and 检查多个条件(必须都满足)</li></ul><pre class="line-numbers language-python"><code class="language-python">mes <span class="token operator">=</span> <span class="token number">28</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mes <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>mes <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据对了"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据不对"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span>数据对了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用 or 检查多个条件,or 就表示只要有一个条件通过就行</li></ul><pre class="line-numbers language-python"><code class="language-python">mes <span class="token operator">=</span> <span class="token number">28</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mes <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>mes <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据对了"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据不对"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>not 只作用于一个布尔值</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">not</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true"># 结果就是false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="检查特定值是否在列表"><a href="#检查特定值是否在列表" class="headerlink" title="检查特定值是否在列表"></a>检查特定值是否在列表</h3><ul><li>要判断特定的值是否在列表中，可使用关键字 in</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第一个"</span><span class="token punctuation">,</span> <span class="token string">"第二个"</span><span class="token punctuation">,</span> <span class="token string">"第三个"</span><span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token string">"第一个"</span> <span class="token keyword">in</span> arr<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据存在"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 最后结构</span>数据存在<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="检查特定值不在列表中"><a href="#检查特定值不在列表中" class="headerlink" title="检查特定值不在列表中"></a>检查特定值不在列表中</h3><ul><li>要判断特定的值不在列表中，可使用关键字 not in</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第一个"</span><span class="token punctuation">,</span> <span class="token string">"第二个"</span><span class="token punctuation">,</span> <span class="token string">"第三个"</span><span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token string">"第四个"</span> <span class="token operator">not</span> <span class="token keyword">in</span> arr<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据不存在"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span>数据不存在<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 基础(四)列表与元祖</title>
      <link href="/2020/01/04/pythonbasic4/"/>
      <url>/2020/01/04/pythonbasic4/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-基础-四-———-列表与元祖"><a href="#Python-基础-四-———-列表与元祖" class="headerlink" title="Python 基础(四) ——— 列表与元祖"></a>Python 基础(四) ——— 列表与元祖</h1><blockquote><p>勇气通往天堂，怯懦通往地狱。——塞内加</p></blockquote><h2 id="循环出来-Python-一个数组"><a href="#循环出来-Python-一个数组" class="headerlink" title="循环出来 Python 一个数组"></a>循环出来 Python 一个数组</h2><ul><li>Python 中 for 循环没有{}而是:</li><li>注意 For 循环语句前面的空格</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token keyword">for</span> index <span class="token keyword">in</span> arr<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后的结果dcab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环语句内部可以嵌套"><a href="#循环语句内部可以嵌套" class="headerlink" title="循环语句内部可以嵌套"></a>循环语句内部可以嵌套</h3><ul><li>有缩进就是循环体内部语句,没有缩进就是循环体外部</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"小明第一名"</span><span class="token punctuation">,</span> <span class="token string">'小红第二名'</span><span class="token punctuation">,</span> <span class="token string">'小黄第三名'</span><span class="token punctuation">,</span> <span class="token string">'小黑第四名'</span><span class="token punctuation">]</span><span class="token keyword">for</span> index <span class="token keyword">in</span> arr<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----------"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过序号来循环"><a href="#通过序号来循环" class="headerlink" title="通过序号来循环"></a>通过序号来循环</h3><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第一次"</span><span class="token punctuation">,</span> <span class="token string">"第二次"</span><span class="token punctuation">,</span> <span class="token string">"第三次"</span><span class="token punctuation">,</span> <span class="token string">"第四次"</span><span class="token punctuation">]</span><span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"确实有"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>        arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"第三次的结果我修改了"</span>    <span class="token keyword">elif</span> index <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第四次确实有"</span><span class="token punctuation">)</span>        arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"第四次的结果我修改了"</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"打出最后的结果"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结束了"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#结果</span>打出最后的结果打出最后的结果确实有<span class="token number">2</span>第四次确实有结束了<span class="token punctuation">[</span><span class="token string">'第一次'</span><span class="token punctuation">,</span> <span class="token string">'第二次'</span><span class="token punctuation">,</span> <span class="token string">'第三次的结果我修改了'</span><span class="token punctuation">,</span> <span class="token string">'第四次的结果我修改了'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结束循环"><a href="#结束循环" class="headerlink" title="结束循环"></a>结束循环</h3><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"小明第一名"</span><span class="token punctuation">,</span> <span class="token string">'小红第二名'</span><span class="token punctuation">,</span> <span class="token string">'小黄第三名'</span><span class="token punctuation">,</span> <span class="token string">'小黑第四名'</span><span class="token punctuation">]</span><span class="token keyword">for</span> index <span class="token keyword">in</span> arr<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token string">"\r"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----------"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"循环结束"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h3><ul><li><p>前面的代码包含三四行,而列表解析让你仅仅只需要 1 行代码就生成这样的列表</p></li><li><p>列表解析将 for 循环和创建的元素合并为一行。并用[]包括</p></li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span>value<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> value <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果就是<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数-range"><a href="#函数-range" class="headerlink" title="函数 range()"></a>函数 range()</h2><h3 id="range-就是随机的生成与一系列的数字。他包前不包后"><a href="#range-就是随机的生成与一系列的数字。他包前不包后" class="headerlink" title="range 就是随机的生成与一系列的数字。他包前不包后"></a>range 就是随机的生成与一系列的数字。他包前不包后</h3><ul><li>它支持三个参数(起始,结束,步长) 例如(2,11,2)</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结束了"</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span>结束了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>要是想创建数字列表的话可以用 list 将 range()的结果直接转为列表</li></ul><p>输出结果</p><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打印出-list-这个列表"><a href="#打印出-list-这个列表" class="headerlink" title="打印出 list 这个列表"></a>打印出 list 这个列表</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> item <span class="token keyword">in</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结束了"</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token number">2</span><span class="token number">4</span><span class="token number">6</span><span class="token number">8</span><span class="token number">10</span>结束了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="利用-range-特性-创建一个空的列表"><a href="#利用-range-特性-创建一个空的列表" class="headerlink" title="利用 range 特性 创建一个空的列表"></a>利用 range 特性 创建一个空的列表</h3><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> item <span class="token keyword">in</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    content1 <span class="token operator">=</span> item<span class="token operator">**</span><span class="token number">2</span>    arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span>content1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对数字进行执行简单的统计计算"><a href="#对数字进行执行简单的统计计算" class="headerlink" title="对数字进行执行简单的统计计算"></a>对数字进行执行简单的统计计算</h3><ul><li><p>min 最小</p></li><li><p>max 最大</p></li><li><p>sum 求和</p></li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span>min_arr <span class="token operator">=</span> min<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>max_arr <span class="token operator">=</span> max<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>sum_arr <span class="token operator">=</span> sum<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>min_arr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>max_arr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum_arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token number">1</span><span class="token number">109</span><span class="token number">455</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="针对列表的一系列操作"><a href="#针对列表的一系列操作" class="headerlink" title="针对列表的一系列操作"></a>针对列表的一系列操作</h2><h3 id="截取-开头-结束"><a href="#截取-开头-结束" class="headerlink" title="截取 [开头:结束]"></a>截取 [开头:结束]</h3><ul><li>[开头:结束] 包前不包后</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第一个"</span><span class="token punctuation">,</span> <span class="token string">"第二个"</span><span class="token punctuation">,</span> <span class="token string">"第三个"</span><span class="token punctuation">,</span> <span class="token string">"第四个"</span><span class="token punctuation">,</span> <span class="token string">"第五个"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后的结果<span class="token punctuation">[</span><span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>[:结束] 没指定开头的话他会从头部开始截取</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第一个"</span><span class="token punctuation">,</span> <span class="token string">"第二个"</span><span class="token punctuation">,</span> <span class="token string">"第三个"</span><span class="token punctuation">,</span> <span class="token string">"第四个"</span><span class="token punctuation">,</span> <span class="token string">"第五个"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后的结果<span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">,</span> <span class="token string">'第四个'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>[2:]没指定结尾的话 他会从截取的位置到最后</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第一个"</span><span class="token punctuation">,</span> <span class="token string">"第二个"</span><span class="token punctuation">,</span> <span class="token string">"第三个"</span><span class="token punctuation">,</span> <span class="token string">"第四个"</span><span class="token punctuation">,</span> <span class="token string">"第五个"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后的结果<span class="token punctuation">[</span><span class="token string">'第三个'</span><span class="token punctuation">,</span> <span class="token string">'第四个'</span><span class="token punctuation">,</span> <span class="token string">'第五个'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>[-3:] 这就表示截取后三位</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第一个"</span><span class="token punctuation">,</span> <span class="token string">"第二个"</span><span class="token punctuation">,</span> <span class="token string">"第三个"</span><span class="token punctuation">,</span> <span class="token string">"第四个"</span><span class="token punctuation">,</span> <span class="token string">"第五个"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token string">'第三个'</span><span class="token punctuation">,</span> <span class="token string">'第四个'</span><span class="token punctuation">,</span> <span class="token string">'第五个'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第一个"</span><span class="token punctuation">,</span> <span class="token string">"第二个"</span><span class="token punctuation">,</span> <span class="token string">"第三个"</span><span class="token punctuation">,</span> <span class="token string">"第四个"</span><span class="token punctuation">,</span> <span class="token string">"第五个"</span><span class="token punctuation">]</span><span class="token keyword">for</span> item <span class="token keyword">in</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结束了"</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果第二个第三个第四个结束了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复制列表"><a href="#复制列表" class="headerlink" title="复制列表"></a>复制列表</h3><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第一个"</span><span class="token punctuation">,</span> <span class="token string">"第二个"</span><span class="token punctuation">,</span> <span class="token string">"第三个"</span><span class="token punctuation">,</span> <span class="token string">"第四个"</span><span class="token punctuation">,</span> <span class="token string">"第五个"</span><span class="token punctuation">]</span>arr2 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后的结果<span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">,</span> <span class="token string">'第四个'</span><span class="token punctuation">,</span> <span class="token string">'第五个'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="元祖"><a href="#元祖" class="headerlink" title="元祖"></a>元祖</h2><blockquote><p>Python 将不能修改的值称为不可变的,而不可变的列表称为元祖</p></blockquote><h3 id="元素的定义"><a href="#元素的定义" class="headerlink" title="元素的定义"></a>元素的定义</h3><ul><li>元祖看上去和列表差不多,但是元祖使用的是圆括号()而不是方括号,定义元祖后,我们也可以使用索引来访问其他元素</li></ul><pre class="line-numbers language-python"><code class="language-python">message <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token number">200</span>要是使用message<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">300</span> 会直接报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历元祖中所有的值"><a href="#遍历元祖中所有的值" class="headerlink" title="遍历元祖中所有的值"></a>遍历元祖中所有的值</h3><pre class="line-numbers language-python"><code class="language-python">message <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> message<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token number">200</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="元祖中的单个元素不能修改-但是整个元祖可以替换"><a href="#元祖中的单个元素不能修改-但是整个元祖可以替换" class="headerlink" title="元祖中的单个元素不能修改,但是整个元祖可以替换"></a>元祖中的单个元素不能修改,但是整个元祖可以替换</h3><pre class="line-numbers language-python"><code class="language-python">message <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>message <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 基础(三)列表</title>
      <link href="/2020/01/03/pythonbasic3/"/>
      <url>/2020/01/03/pythonbasic3/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-基础-三-———-列表"><a href="#Python-基础-三-———-列表" class="headerlink" title="Python 基础(三) ——— 列表"></a>Python 基础(三) ——— 列表</h1><blockquote><p>最大的骄傲与最大的自卑都表示心灵的最软弱无力 ———-斯宾诺莎</p></blockquote><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li>列表是由一系列按照特定顺序排列的元素组成。你可以创建任何元素，其中的元素之间可以没有任何关系.鉴于列表通常包含多个元素,我们可以随便起一个表示复数的名称</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后的结果<span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h3><ul><li>可以通过序号来访问列表元素</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>结果hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过-index-方法在列表中查找值"><a href="#通过-index-方法在列表中查找值" class="headerlink" title="通过 index()方法在列表中查找值"></a>通过 index()方法在列表中查找值</h3><ul><li>index()方法</li><li>arr.index(‘hello’)</li></ul><pre class="line-numbers language-python"><code class="language-python">spanm <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"11"</span><span class="token punctuation">,</span> <span class="token string">'22'</span><span class="token punctuation">,</span> <span class="token string">'33'</span><span class="token punctuation">,</span> <span class="token string">'44'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>spanm<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"22"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取列表元素"><a href="#获取列表元素" class="headerlink" title="获取列表元素"></a>获取列表元素</h3><ul><li>在 Python 中 第一个列表元素的索引为 0,而不是 1</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>结果就是<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Python 提供了一个新的特性 就是索引要是-1 他会返回列表最后一个元素,-2 就是倒数第二个</li></ul><pre class="line-numbers language-python"><code class="language-python"> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第一个"</span><span class="token punctuation">,</span><span class="token string">"第二个"</span><span class="token punctuation">,</span><span class="token string">"第三个"</span><span class="token punctuation">]</span> <span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>结果就是 第三个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>练习</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第一名"</span><span class="token punctuation">,</span> <span class="token string">"第二名"</span><span class="token punctuation">,</span> <span class="token string">"第三名"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这次小明获得了"</span><span class="token operator">+</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"小红获得了"</span><span class="token operator">+</span>arr<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"小兰获得了"</span><span class="token operator">+</span>arr<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="修改列表元素"><a href="#修改列表元素" class="headerlink" title="修改列表元素"></a>修改列表元素</h3><ul><li>重新赋值</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第0个"</span><span class="token punctuation">,</span><span class="token string">"第二个"</span><span class="token punctuation">,</span><span class="token string">"第三个"</span><span class="token punctuation">]</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"第一个"</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在列表中添加元素"><a href="#在列表中添加元素" class="headerlink" title="在列表中添加元素"></a>在列表中添加元素</h3><ul><li>在列表中末尾添加元素，必须使用 append</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第一个"</span><span class="token punctuation">,</span><span class="token string">"第二个"</span><span class="token punctuation">,</span><span class="token string">"第三个"</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"第四个"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">,</span> <span class="token string">'第四个'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在列表中任何位置插入新元素 insert 他接受两个参数 第一个参数是位置 第二个参数是内容</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"第一个"</span><span class="token punctuation">,</span> <span class="token string">"第三个"</span><span class="token punctuation">,</span> <span class="token string">"第四个"</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"第二个"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">,</span> <span class="token string">'第四个'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表中删除元素"><a href="#列表中删除元素" class="headerlink" title="列表中删除元素"></a>列表中删除元素</h3><ul><li>使用 del 语句来删除元素(必须知道要删除的位置)</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">,</span> <span class="token string">'第四个'</span><span class="token punctuation">]</span><span class="token keyword">del</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果 <span class="token punctuation">[</span><span class="token string">"第一个"</span><span class="token punctuation">,</span> <span class="token string">"第三个"</span><span class="token punctuation">,</span> <span class="token string">"第四个"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用 pop()来删除元素,不加序号只能删除列表最后的元素</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">,</span> <span class="token string">'第四个'</span><span class="token punctuation">]</span>result <span class="token operator">=</span> arr<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">]</span>第四个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>加了序号，删除任意位置</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">,</span> <span class="token string">'第四个'</span><span class="token punctuation">]</span>result <span class="token operator">=</span> arr<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第四个'</span><span class="token punctuation">]</span>第三个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>pop()获取最后一个元素以后，改变原列表</li></ul><h3 id="根据值删除元素"><a href="#根据值删除元素" class="headerlink" title="根据值删除元素"></a>根据值删除元素</h3><ul><li>remove 他接受一个参数,要删除的值找到第一个匹配的值</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"第二个"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>要是内部有相同的数据，他只删除第一个</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第二个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">,</span> <span class="token string">"第二个"</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"第二个"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token string">'第一个'</span><span class="token punctuation">,</span> <span class="token string">'第三个'</span><span class="token punctuation">,</span><span class="token string">"第二个"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="使用方法-sort-由小到大"><a href="#使用方法-sort-由小到大" class="headerlink" title="使用方法 sort() 由小到大"></a>使用方法 sort() 由小到大</h4><ul><li>使用 sort()能让你对列表排序,这个操作是永久性的无法回退</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="要是想反向排列只需要-reverse-True-由大到小"><a href="#要是想反向排列只需要-reverse-True-由大到小" class="headerlink" title="要是想反向排列只需要 reverse=True 由大到小"></a>要是想反向排列只需要 reverse=True 由大到小</h4><ul><li>reverse=True T 必须要大写</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="临时排序，不改变原列表-sorted-放在开头-sorted-xxx"><a href="#临时排序，不改变原列表-sorted-放在开头-sorted-xxx" class="headerlink" title="临时排序，不改变原列表 sorted 放在开头 sorted(xxx)"></a>临时排序，不改变原列表 sorted 放在开头 sorted(xxx)</h4><ul><li>正向排列</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span>arr2 <span class="token operator">=</span> sorted<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>要是反向排列</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span>arr2 <span class="token operator">=</span> sorted<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="反转顺序"><a href="#反转顺序" class="headerlink" title="反转顺序"></a>反转顺序</h4><ul><li>reverse<br>反转顺序</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果<span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="确定列表的长度-len-xxx-放在开头"><a href="#确定列表的长度-len-xxx-放在开头" class="headerlink" title="确定列表的长度 len(xxx) 放在开头"></a>确定列表的长度 len(xxx) 放在开头</h3><ul><li>len() 获取到列表的长度</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="用-list-和-tuple-来转换类型"><a href="#用-list-和-tuple-来转换类型" class="headerlink" title="用 list()和 tuple()来转换类型"></a>用 list()和 tuple()来转换类型</h3><ul><li>tuple 将 类型变成元祖</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>tuple<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># ('h', 'e', 'l', 'l', 'o')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>list 将类型变成数组</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span><span class="token string">'hello2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># ['h', 'e', 'l', 'l', 'o', '2']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="引入-copy-模块和-deepcopy"><a href="#引入-copy-模块和-deepcopy" class="headerlink" title="引入 copy 模块和 deepcopy()"></a>引入 copy 模块和 deepcopy()</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> copyresult <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span>cheese <span class="token operator">=</span> copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>result<span class="token punctuation">)</span>cheese<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'42'</span><span class="token keyword">print</span><span class="token punctuation">(</span>cheese<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># ['A', '42', 'C', 'D']</span><span class="token comment" spellcheck="true"># ['A', 'B', 'C', 'D']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>deepcopy 就是复制的列表中包含了列表,这个时候就必须用 deepcopy</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> copyresult <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span>cheese <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>result<span class="token punctuation">)</span>cheese<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>cheese<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># ['A', [5, 6, 7], 'C', 'D']</span><span class="token comment" spellcheck="true"># ['A', [2, 3, 4], 'C', 'D']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 基础(二)数字类型和注释</title>
      <link href="/2020/01/02/pythonbasic2/"/>
      <url>/2020/01/02/pythonbasic2/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-基础-二-———-数字类型-布尔类型和注释"><a href="#Python-基础-二-———-数字类型-布尔类型和注释" class="headerlink" title="Python 基础(二) ——— 数字类型,布尔类型和注释"></a>Python 基础(二) ——— 数字类型,布尔类型和注释</h1><blockquote><p>阅读使人充实,会谈使人敏捷,写作使人精确 ———-培根</p></blockquote><h2 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h2><ul><li>在 Python 中,可对整数执行加(+)减(一)乘(x)除(/)运算</li></ul><p>如下代码</p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">2</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>结果<span class="token number">5</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>结果<span class="token number">1</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>结果<span class="token number">6</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>结果<span class="token number">1.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在终端会话中,Python 直接返回运算结果,Python 使用两个乘号表示乘方运算</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token number">3</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>结果就是<span class="token number">9</span>message2 <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">**</span><span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>message2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>结果<span class="token number">27</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Python 还支持运算次序,可以指定优先级</li></ul><pre class="line-numbers language-python"><code class="language-python">message <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">**</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>结果就是<span class="token number">11</span>message <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>结果就是<span class="token number">25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用 int()可以把字符串变成整数</li></ul><pre class="line-numbers language-python"><code class="language-python">message <span class="token operator">=</span> <span class="token string">"00042"</span>message2 <span class="token operator">=</span> <span class="token number">42.00</span><span class="token keyword">print</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>message2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 42</span><span class="token comment" spellcheck="true"># 42</span><span class="token comment" spellcheck="true"># message = "42.000"或者message = "adadada42"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用 random(),randint 随机</li></ul><blockquote><p>生成一个随机数 0-1 之间,random.random()</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> randommessage <span class="token operator">=</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>randint,random,uniform,choice,randrange</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token comment" spellcheck="true"># 产生1到10的一个整数随机数</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 产生 0 到 1 之间的随机浮点数</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 产生区间的随机浮点数,区间可以不是整数</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">2.1</span><span class="token punctuation">,</span> <span class="token number">55.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成1到100的间隔为2的随机整数</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><ul><li>小数点可出现在数字的任何位置.</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token number">0.1</span><span class="token operator">+</span><span class="token number">0.1</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>结果<span class="token number">0.2</span><span class="token number">0.2</span><span class="token operator">+</span><span class="token number">0.2</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>结果<span class="token number">0.4</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">0.1</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>结果<span class="token number">0.2</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">0.2</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>结果就是<span class="token number">0.4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用 float()可以转换 这里要特别注意的就是要是字符串的浮点数，必须先转化成浮点数然后在转化成整型</li></ul><pre class="line-numbers language-python"><code class="language-python">message <span class="token operator">=</span> <span class="token string">"42.000"</span>message2 <span class="token operator">=</span> int<span class="token punctuation">(</span>float<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>float<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 42.0</span><span class="token comment" spellcheck="true"># 42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在 Python 中 虽然数字的字符串被认为与整形值和浮点值完全不同,但是整形值可以和浮点值相等</p></blockquote><pre class="line-numbers language-python"><code class="language-python">result1 <span class="token operator">=</span> <span class="token number">42</span> <span class="token operator">==</span> <span class="token string">"42"</span><span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span>result2 <span class="token operator">=</span> <span class="token number">42</span> <span class="token operator">==</span> <span class="token number">42.0</span><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span>result3 <span class="token operator">=</span> <span class="token number">42</span><span class="token operator">==</span><span class="token number">0042.00</span><span class="token keyword">print</span><span class="token punctuation">(</span>result3<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># 一个 false 一个true ,一个true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数字变成字符串"><a href="#数字变成字符串" class="headerlink" title="数字变成字符串"></a>数字变成字符串</h2><ul><li>必须使用函数 str()把数字变成字符串,必须放在开头</li></ul><p>例如(错误示范)</p><pre class="line-numbers language-python"><code class="language-python">age <span class="token operator">=</span> <span class="token number">23</span>message <span class="token operator">=</span> <span class="token string">"Happy"</span><span class="token operator">+</span> age<span class="token operator">+</span> <span class="token string">"rd Birthday"</span><span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果他会报错因为age是一个int他不知道怎么解析<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>正确的做法</li></ul><pre class="line-numbers language-python"><code class="language-python">age <span class="token operator">=</span> <span class="token number">23</span>message <span class="token operator">=</span> <span class="token string">"Happy"</span><span class="token operator">+</span> str<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"rd Birthday"</span><span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><h3 id="在-Python-中-布尔值必须是大写开头"><a href="#在-Python-中-布尔值必须是大写开头" class="headerlink" title="在 Python 中 布尔值必须是大写开头"></a>在 Python 中 布尔值必须是大写开头</h3><p>True False</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是对的"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 必须是大写</span><span class="token keyword">if</span> true<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是对的"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 小写的话会报错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h3><ul><li><p>==,!=,&lt;,&gt;,&lt;=,&gt;=</p></li><li><p>相等和不相等的判断</p></li></ul><p>在 Python 中整数和浮点数值一样的话是可以相等的</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token number">42</span> <span class="token operator">==</span> <span class="token number">42.000</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Yes"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># Yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不相等</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token number">42</span> <span class="token operator">!=</span> <span class="token number">99</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># No</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>大于小于,&lt;=,&gt;=</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token number">52</span> <span class="token operator">>=</span> <span class="token number">32</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Yes"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果 Yes</span><span class="token keyword">if</span> <span class="token number">52</span> <span class="token operator">&lt;=</span> <span class="token number">32</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Yes"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果 No</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>注释用(#)标识,单行</li></ul><p>如下:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 像大家问好</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>最后结果就是Hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>多行注释可以用 3 个’(单引号)或者 3 个”(双引号)</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''多行注释'''</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""多行注释"""</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试开始"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Python-之禅"><a href="#Python-之禅" class="headerlink" title="Python 之禅"></a>Python 之禅</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> this<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>这样就会输出Python之禅<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 基础(一)数据类型和变量(开篇之字符串)</title>
      <link href="/2020/01/01/pythonbasic1/"/>
      <url>/2020/01/01/pythonbasic1/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-基础-一-———-数据类型和变量-开篇之字符串"><a href="#Python-基础-一-———-数据类型和变量-开篇之字符串" class="headerlink" title="Python 基础(一) ——— 数据类型和变量(开篇之字符串)"></a>Python 基础(一) ——— 数据类型和变量(开篇之字符串)</h1><blockquote><p>与肝胆人共事,无字句处读书。—–周恩来</p></blockquote><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>在 python 中用冒号来代替大括号,用空格来区分结束</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><blockquote><p>变量就是存粹一个不确定的数</p></blockquote><p>在 Python 中使用变量要遵守一些规则</p><ul><li><p>变量名只能包含字母,数字,下划线,变量名可以字母或者下划线开头,但是不能以数字开头,例如变量名为 message_1 但是不能命名为 1_message</p></li><li><p>变量名不能包含空格,但可以使用下划线来分隔其中的单词.例如变量名 message_box 可以，但是要 message box 就会引发错误</p></li><li><p>不要将 Python 的关键字和函数名作为关键字比如 print,class 等等</p></li><li><p>变量名应该简短又有描述性 .例如 name 比 n 好,student_name 比 s_n 好</p></li><li><p>慎用小写字母 i 和大写字母 O 因为有的时候会被看错成 0 和 1</p></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><blockquote><p>在 Python 中有八种数据类型</p></blockquote><ul><li><p>Number 数字</p></li><li><p>String 字符串</p></li><li><p>Boolean 布尔值</p></li><li><p>None 空</p></li><li><p>List 列表</p></li><li><p>tuple 元祖</p></li><li><p>dict 字典</p></li><li><p>set 集合</p></li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串就是一系列字符,在 Python 种用引号引来的都是字符串,其中的引号可以是单引号,也可以是双引号</p><pre class="line-numbers language-python"><code class="language-python"><span class="token string">"THis is Python"</span><span class="token string">"This is String"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当然可以使用单引号，单引号可以包含双引号，双引号也可以包含单引号 但是两个不能穿插</p><pre class="line-numbers language-python"><code class="language-python"><span class="token string">'This is "Hello" Python'</span><span class="token string">"Come on 'Babay' "</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>上面的都没问题 下面的不行</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token string">" Hello 'world! "</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="使用方法修改字符串的大小写"><a href="#使用方法修改字符串的大小写" class="headerlink" title="使用方法修改字符串的大小写"></a>使用方法修改字符串的大小写</h4><ul><li>title 方法(首字母大写)</li></ul><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"love python"</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>输出结果就是Love Python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>upper 方法(全部大写)</li></ul><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"love python"</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>输出结果就是LOVE PYTHON<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>isupper()判断是不是都是大写</li></ul><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#结果</span><span class="token comment" spellcheck="true"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>islower 判断是不是都是小写</li></ul><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>lower 方法(全部小写)</li></ul><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"LOVE PYTHON"</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>输出结果就是love python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>startswith() 和 endswitch()</li></ul><p>以什么开头 和 以什么结尾</p><pre class="line-numbers language-python"><code class="language-python"> str <span class="token operator">=</span> <span class="token string">"Hello , JSON! See The World!"</span> <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token triple-quoted-string string">'''  结果就是True '''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以什么结尾</p><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> <span class="token string">"Hello , JSON! See The World!"</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'World!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''结果就是True'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>join()</li></ul><p>字符串拼接 join 就是把前面的字符串插入到后面每个字符串的中间</p><pre class="line-numbers language-python"><code class="language-python">str2 <span class="token operator">=</span> <span class="token string">"kai"</span>endstr <span class="token operator">=</span> <span class="token string">"end"</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>join<span class="token punctuation">(</span>endstr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># ekainkaid</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种开始</p><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> <span class="token string">"||"</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"start"</span><span class="token punctuation">,</span> <span class="token string">"over"</span><span class="token punctuation">,</span> <span class="token string">"end"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>join<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># start||over||end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>split()他是把字符串的每个字符变成列表</li></ul><pre class="line-numbers language-python"><code class="language-python">str <span class="token operator">=</span> <span class="token string">"Hello World "</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果</span><span class="token comment" spellcheck="true"># ['Hello', 'World']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="合并-拼接-字符串"><a href="#合并-拼接-字符串" class="headerlink" title="合并(拼接)字符串"></a>合并(拼接)字符串</h4><ul><li>在很多情况下我们都需要合并</li></ul><p>Python 中 使用(+)号 来合并字符串.</p><pre class="line-numbers language-python"><code class="language-python">first_name <span class="token operator">=</span> <span class="token string">"love"</span>last_name <span class="token operator">=</span> <span class="token string">"python"</span>result <span class="token operator">=</span> first_name <span class="token operator">+</span> last_name<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>输出结果就是love python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用制表符或换行符来添加空白"><a href="#使用制表符或换行符来添加空白" class="headerlink" title="使用制表符或换行符来添加空白"></a>使用制表符或换行符来添加空白</h4><ul><li>\r\n 表示回车换行</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello \r\nWorld"</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>输出结果HelloWorld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除空白"><a href="#删除空白" class="headerlink" title="删除空白"></a>删除空白</h4><ul><li>rstrip() 删除字符串末尾的空白</li></ul><pre class="line-numbers language-python"><code class="language-python">mes <span class="token operator">=</span> <span class="token string">"Hello "</span><span class="token keyword">print</span><span class="token punctuation">(</span>mes<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>这样右边的空格就没了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>lstrip() 删除字符串左边的空白</li></ul><pre class="line-numbers language-python"><code class="language-python">mes <span class="token operator">=</span> <span class="token string">" Hello"</span><span class="token keyword">print</span><span class="token punctuation">(</span>mes<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>这样左边的空格就没了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>strip() 同时删除左右两侧空白</li></ul><pre class="line-numbers language-python"><code class="language-python">mes <span class="token operator">=</span> <span class="token string">" Hello "</span><span class="token keyword">print</span><span class="token punctuation">(</span>mes<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>这样两边的空格就都没了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="有一种连接不属于而是直接赋值"><a href="#有一种连接不属于而是直接赋值" class="headerlink" title="有一种连接不属于而是直接赋值"></a>有一种连接不属于而是直接赋值</h4><pre class="line-numbers language-python"><code class="language-python">span<span class="token operator">+=</span><span class="token number">1</span>  等价于 span <span class="token operator">=</span> span<span class="token operator">+</span><span class="token number">1</span>span<span class="token operator">-=</span><span class="token number">1</span>  等价于 span <span class="token operator">=</span> span <span class="token operator">-</span><span class="token number">1</span>span<span class="token operator">*=</span><span class="token number">1</span>  等价于 span <span class="token operator">=</span> span<span class="token operator">*</span><span class="token number">1</span>span<span class="token operator">/=</span><span class="token number">1</span>  等价于 span <span class="token operator">=</span> span<span class="token operator">/</span><span class="token number">1</span>span<span class="token operator">%=</span><span class="token number">1</span>  等价于 span <span class="token operator">=</span> span<span class="token operator">%</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中动画使用Velocity</title>
      <link href="/2019/12/26/vuecha8/"/>
      <url>/2019/12/26/vuecha8/</url>
      
        <content type="html"><![CDATA[<h1 id="VUE-中动画使用-Velocity"><a href="#VUE-中动画使用-Velocity" class="headerlink" title="VUE 中动画使用 Velocity"></a>VUE 中动画使用 Velocity</h1><h2 id="安装它"><a href="#安装它" class="headerlink" title="安装它"></a>安装它</h2><ul><li>在 Vue 中使用必须使用 velocity-animate 这个插件</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">cnpm i velocity<span class="token operator">-</span>animate <span class="token operator">-</span>S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="使用它"><a href="#使用它" class="headerlink" title="使用它"></a>使用它</h2><ul><li>使用的时候 必须要在使用的组件里面引入</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Velocity <span class="token keyword">from</span> <span class="token string">'velocity-animate'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用代码-结合-Vue-的动画钩子函数"><a href="#使用代码-结合-Vue-的动画钩子函数" class="headerlink" title="使用代码 结合 Vue 的动画钩子函数"></a>使用代码 结合 Vue 的动画钩子函数</h3><ul><li>代码如下</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span>      <span class="token attr-name">@before-enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beforeEnter<span class="token punctuation">"</span></span>      <span class="token attr-name">@enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleEnter<span class="token punctuation">"</span></span>      <span class="token attr-name">@leave</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleLeave<span class="token punctuation">"</span></span>      <span class="token attr-name">:css</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleclick<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>buttonclass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> Velocity <span class="token keyword">from</span> <span class="token string">'velocity-animate'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>        show<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">handleclick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>show        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>show<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">beforeEnter</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token string">'700px'</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token number">0</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'red'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">handleEnter</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行了'</span><span class="token punctuation">)</span>        <span class="token function">Velocity</span><span class="token punctuation">(</span>          el<span class="token punctuation">,</span>          <span class="token punctuation">{</span> opacity<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> top<span class="token punctuation">:</span> <span class="token string">'0px'</span>，backgroundColor<span class="token punctuation">:</span> <span class="token string">"#23A9F2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> duration<span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">,</span> easing<span class="token punctuation">:</span> <span class="token string">'easeInSine'</span><span class="token punctuation">,</span> complete<span class="token punctuation">:</span> done <span class="token punctuation">}</span>        <span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">handleLeave</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'离开'</span><span class="token punctuation">)</span>        <span class="token function">Velocity</span><span class="token punctuation">(</span>          el<span class="token punctuation">,</span>          <span class="token punctuation">{</span> opacity<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> top<span class="token punctuation">:</span> <span class="token string">'700px'</span>，backgroundColor<span class="token punctuation">:</span> <span class="token string">"#FFE793"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> duration<span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">,</span> easing<span class="token punctuation">:</span> <span class="token string">'easeInSine'</span><span class="token punctuation">,</span> complete<span class="token punctuation">:</span> done <span class="token punctuation">}</span>        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.buttonclass</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Velocity-使用注意细节"><a href="#Velocity-使用注意细节" class="headerlink" title="Velocity 使用注意细节"></a>Velocity 使用注意细节</h3><ul><li>它里面必须传递三个参数,第一个参数是元素,你希望哪个元素有动画就给谁,第二个参数是运动轨迹,它怎么运动的.第三个参数是持续时间,结束函数等等。第三个参数如下</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* Velocity 动画配置项的默认值 */</span>    duration<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">// 动画执行时间</span>    easing<span class="token punctuation">:</span> <span class="token string">"swing"</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">// 缓动效果</span>    queue<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>             <span class="token comment" spellcheck="true">// 队列</span>    begin<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 动画开始时的回调函数</span>    progress<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 动画执行中的回调函数（该函数会随着动画执行被不断触发）</span>    complete<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 动画结束时的回调函数</span>    display<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 动画结束时设置元素的 css display 属性</span>    visibility<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 动画结束时设置元素的 css visibility 属性</span>    loop<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">// 循环</span>    delay<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 延迟</span>    mobileHA<span class="token punctuation">:</span> <span class="token boolean">true</span>         <span class="token comment" spellcheck="true">// 移动端硬件加速（默认开启）</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>他支持改变 background,但是必须写成 backgroundColor 后面接十六进制</p></li><li><p>基本上 jquery 做的，它都能做，规则如下,第二个参数</p></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* translate */</span>    translateX<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 等同于"20px"</span>    translateY<span class="token punctuation">:</span> <span class="token string">"1.5em"</span><span class="token punctuation">,</span>    translateZ<span class="token punctuation">:</span> <span class="token string">"20px"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// IE10+</span>    <span class="token comment" spellcheck="true">/* scale */</span>    scale<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span>    scaleX<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span>    scaleY<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/* rotate */</span>    rotate<span class="token punctuation">:</span> <span class="token number">45</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">// 等同于"45deg"</span>    rotateX<span class="token punctuation">:</span> <span class="token string">"45deg"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// IE10+</span>    rotateY<span class="token punctuation">:</span> <span class="token string">"45deg"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// IE10+</span>    rotateZ<span class="token punctuation">:</span> <span class="token string">"45deg"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/* skew */</span>    skewX<span class="token punctuation">:</span> <span class="token string">"30deg"</span><span class="token punctuation">,</span>    skewY<span class="token punctuation">:</span> <span class="token string">"30deg"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体参数可以看文档</p><p><a href="http://shouce.jb51.net/velocity/feature.html" target="_blank" rel="noopener">点击我看文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript(十二) Vue中使用TS</title>
      <link href="/2019/12/25/typescriptbasic12/"/>
      <url>/2019/12/25/typescriptbasic12/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-中使用-TsLint-备注"><a href="#Vue-中使用-TsLint-备注" class="headerlink" title="Vue 中使用 TsLint 备注"></a>Vue 中使用 TsLint 备注</h1><blockquote><p>你可以爱一个人到尘埃里,但没人会喜欢尘埃里的你</p></blockquote><h2 id="安装指南"><a href="#安装指南" class="headerlink" title="安装指南"></a>安装指南</h2><h3 id="本次使用只是针对-vuecli3-0-部分"><a href="#本次使用只是针对-vuecli3-0-部分" class="headerlink" title="本次使用只是针对 vuecli3.0 部分"></a>本次使用只是针对 vuecli3.0 部分</h3><h4 id="1-安装-Vuecli3-0-的时候必须选用-Typescript"><a href="#1-安装-Vuecli3-0-的时候必须选用-Typescript" class="headerlink" title="1.安装 Vuecli3.0 的时候必须选用 Typescript"></a>1.安装 Vuecli3.0 的时候必须选用 Typescript</h4><ul><li>然后等待 vuecli3.0 安装完以后在需要安装个包</li></ul><p>(i). vue-class-component 第一个安装包</p><pre class="line-numbers language-javascript"><code class="language-javascript"> npm i vue<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>component<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(ii). vue-property-decorator 第二个安装包</p><pre class="line-numbers language-javascript"><code class="language-javascript">npm i vue<span class="token operator">-</span>property<span class="token operator">-</span>decorator<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(iii). vuex-class //公共数据必须要使用</p><pre class="line-numbers language-javascript"><code class="language-javascript">npm i vuex<span class="token operator">-</span><span class="token keyword">class</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-使用-TS-模板"><a href="#2-使用-TS-模板" class="headerlink" title="2.使用 TS 模板"></a>2.使用 TS 模板</h4><ul><li>要是安装了插件可以在 Vscode 中使用快捷键</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--html 模板--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> Vue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-property-decorator'</span>  <span class="token comment" spellcheck="true">// @Component 修饰符注明了此类为一个 Vue 组件</span>  @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Home'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Home</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--放置样式css--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Vue-中使用-TS-关键字对照"><a href="#Vue-中使用-TS-关键字对照" class="headerlink" title="Vue 中使用 TS 关键字对照"></a>Vue 中使用 TS 关键字对照</h3><h4 id="在-Vue-中使用-TS-有下面几个常用的关键字"><a href="#在-Vue-中使用-TS-有下面几个常用的关键字" class="headerlink" title="在 Vue 中使用 TS 有下面几个常用的关键字"></a>在 Vue 中使用 TS 有下面几个常用的关键字</h4><ul><li><p>@Emit</p></li><li><p>@Prop</p></li><li><p>@Provide</p></li><li><p>@Component</p></li><li><p>@Watch</p></li><li><p>@State</p></li><li><p>@Getter</p></li><li><p>@Mutation</p></li></ul><h4 id="1-Provide-他的作用就是取代原先代码里的-data"><a href="#1-Provide-他的作用就是取代原先代码里的-data" class="headerlink" title="(1) @Provide 他的作用就是取代原先代码里的 data"></a>(1) @Provide 他的作用就是取代原先代码里的 data</h4><pre class="line-numbers language-javascript"><code class="language-javascript">  @<span class="token function">Provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">private</span> message<span class="token punctuation">:</span> string <span class="token operator">=</span> <span class="token string">"首页"</span><span class="token punctuation">;</span>  @<span class="token function">Provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">private</span> number2<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  @<span class="token function">Provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">private</span> number<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>  @<span class="token function">Provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">private</span> data<span class="token punctuation">:</span> string <span class="token operator">=</span> <span class="token string">"父亲给孩子的值"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>相当于原先的</p><pre class="line-numbers language-javascript"><code class="language-javascript">data<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token punctuation">{</span>         message<span class="token punctuation">:</span> <span class="token string">"首页"</span><span class="token punctuation">,</span>         number2<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span>         number<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span>         data<span class="token punctuation">:</span> <span class="token string">"父亲给孩子的值"</span>       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Component-他就是注册的组件"><a href="#2-Component-他就是注册的组件" class="headerlink" title="(2) @Component 他就是注册的组件"></a>(2) @Component 他就是注册的组件</h4><pre class="line-numbers language-javascript"><code class="language-javascript">@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    IndexHeader  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相当于原先的</p><pre class="line-numbers language-javascript"><code class="language-javascript">components<span class="token punctuation">:</span> <span class="token punctuation">{</span>  IndexHeader<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-Emit-发送数据"><a href="#3-Emit-发送数据" class="headerlink" title="(3) @Emit 发送数据"></a>(3) @Emit 发送数据</h4><pre class="line-numbers language-javascript"><code class="language-javascript">@<span class="token function">Emit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//发送的事件名,要是不填写就是把方法名称发送走</span>  <span class="token function">handleclick_two</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sonnumer <span class="token operator">+</span> n<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>相当于原先的</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'handleclick_two'</span><span class="token punctuation">,</span> <span class="token string">'发送的值'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-Prop-父组件给子组件传递的值"><a href="#4-Prop-父组件给子组件传递的值" class="headerlink" title="(4) @Prop 父组件给子组件传递的值"></a>(4) @Prop 父组件给子组件传递的值</h4><pre class="line-numbers language-javascript"><code class="language-javascript"> @<span class="token function">Prop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> msg<span class="token operator">!</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//msg后面的感叹号就是非null和非undefined的类型断言</span> @<span class="token function">Prop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  datanumber<span class="token operator">!</span><span class="token punctuation">:</span> number <span class="token operator">|</span> string<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>相当于原先的</p><pre class="line-numbers language-javascript"><code class="language-javascript">props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'author'</span><span class="token punctuation">,</span> <span class="token string">'likes'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-Watch"><a href="#4-Watch" class="headerlink" title="(4) @Watch"></a>(4) @Watch</h4><pre class="line-numbers language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">//有几个watch就写几个后面跟的必须是改变的方法</span>  @<span class="token function">Watch</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span>  <span class="token function">changeAge2</span><span class="token punctuation">(</span>newvalue<span class="token punctuation">:</span> number<span class="token punctuation">,</span> oldvalue<span class="token punctuation">:</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>      <span class="token string">"这是新值哈哈哈"</span> <span class="token operator">+</span> newvalue <span class="token operator">+</span> <span class="token string">"||"</span> <span class="token operator">+</span> <span class="token string">"这是老值哈哈哈"</span> <span class="token operator">+</span> oldvalue    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  @<span class="token function">Watch</span><span class="token punctuation">(</span><span class="token string">"number2"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> deep<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">changeAge111</span><span class="token punctuation">(</span>newvalue<span class="token punctuation">:</span> number<span class="token punctuation">,</span> oldvalue<span class="token punctuation">:</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"这是新值"</span> <span class="token operator">+</span> newvalue <span class="token operator">+</span> <span class="token string">"||"</span> <span class="token operator">+</span> <span class="token string">"这是老值"</span> <span class="token operator">+</span> oldvalue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相当于原先的</p><pre class="line-numbers language-javascript"><code class="language-javascript">watch<span class="token punctuation">:</span><span class="token punctuation">{</span> <span class="token function">cityName</span><span class="token punctuation">(</span>newName<span class="token punctuation">,</span> oldName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-Watch-观察路由-immediate-必须要有"><a href="#5-Watch-观察路由-immediate-必须要有" class="headerlink" title="(5) @Watch 观察路由 immediate 必须要有"></a>(5) @Watch 观察路由 immediate 必须要有</h4><pre class="line-numbers language-javascript"><code class="language-javascript"> @<span class="token function">Watch</span><span class="token punctuation">(</span><span class="token string">"$route"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> immediate<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//必须又immediate:true否则不监听</span>  <span class="token function">changeroute</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> any<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">from</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> roulink<span class="token punctuation">:</span> string <span class="token operator">=</span> to<span class="token punctuation">.</span>path<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>roulink<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-计算后的属性"><a href="#6-计算后的属性" class="headerlink" title="(6) 计算后的属性"></a>(6) 计算后的属性</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">get</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`I am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>number<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> age`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">set</span> <span class="token function">age</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相当于原先的</p><pre class="line-numbers language-javascript"><code class="language-javascript">computed<span class="token punctuation">:</span><span class="token punctuation">{</span>  fullName<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//get</span>    <span class="token keyword">get</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token operator">+</span><span class="token string">""</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastname    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//set</span>    <span class="token keyword">set</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">var</span> names <span class="token operator">=</span> newValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> names<span class="token punctuation">[</span>names<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-State-公共数据"><a href="#7-State-公共数据" class="headerlink" title="(7) @State 公共数据"></a>(7) @State 公共数据</h4><ul><li>引用</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> State<span class="token punctuation">,</span> Getter<span class="token punctuation">,</span> Mutation<span class="token punctuation">,</span> Action <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex-class'</span> <span class="token comment" spellcheck="true">//公共数据必须要使用vuex-class</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"> @<span class="token function">State</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> username2<span class="token punctuation">:</span> any<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//第一个对应的就是state里面的名称 后面就是自定义名称</span>  @<span class="token function">State</span><span class="token punctuation">(</span><span class="token string">"textname"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> ceshiname<span class="token punctuation">:</span> any<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="8-Getter"><a href="#8-Getter" class="headerlink" title="(8)@Getter"></a>(8)@Getter</h4><ul><li>引用</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> State<span class="token punctuation">,</span> Getter<span class="token punctuation">,</span> Mutation<span class="token punctuation">,</span> Action <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex-class'</span> <span class="token comment" spellcheck="true">//公共数据必须要使用vuex-class</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">@<span class="token function">Getter</span><span class="token punctuation">(</span><span class="token string">"get_username"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> get_textusername<span class="token punctuation">:</span> any<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="9-Mutation"><a href="#9-Mutation" class="headerlink" title="(9)@Mutation"></a>(9)@Mutation</h4><ul><li>引用</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> State<span class="token punctuation">,</span> Getter<span class="token punctuation">,</span> Mutation<span class="token punctuation">,</span> Action <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex-class'</span> <span class="token comment" spellcheck="true">//公共数据必须要使用vuex-class</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用 类型只能是 any</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"> @<span class="token function">Mutation</span><span class="token punctuation">(</span><span class="token string">"change_username"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> changeuser<span class="token punctuation">:</span> any<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使用的时候</span>  <span class="token function">handleclick_change_state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">changeuser</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;这就是新的我改变的值>>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>TypeScript 在 Vue 中使用</li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript(十一) TS 中的类与 ES 标准的差异</title>
      <link href="/2019/12/24/typescriptbasic11/"/>
      <url>/2019/12/24/typescriptbasic11/</url>
      
        <content type="html"><![CDATA[<h1 id="TS-中的类与-ES-标准的差异"><a href="#TS-中的类与-ES-标准的差异" class="headerlink" title="TS 中的类与 ES 标准的差异"></a>TS 中的类与 ES 标准的差异</h1><blockquote><p>TS 中的类比 ES6 中多了修饰符概念</p></blockquote><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="public"><a href="#public" class="headerlink" title="public"></a>public</h3><blockquote><p>public 表示公共的,用来指定在创建实例后可以通过实例来访问的,也就是类定义的外部可以访问的方法和属性</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> x<span class="token punctuation">:</span> number<span class="token punctuation">;</span>  <span class="token keyword">public</span> y<span class="token punctuation">:</span> number<span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> number<span class="token punctuation">,</span> y<span class="token punctuation">:</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">getPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="private"><a href="#private" class="headerlink" title="private"></a>private</h3><blockquote><p>private 修饰符表示私有的,他修饰的属性在类的定义外面是没法访问的,只能这个类内部自己玩</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> age<span class="token punctuation">:</span> number<span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { age: 18 }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error 属性“age”为私有属性，只能在类“Parent”中访问</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Parent<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error 类型“typeof ParentA”上不存在属性“age”</span><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通过 "super" 关键字只能访问基类的公共方法和受保护方法</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h3><blockquote><p>protected 和 private 有点相似,但是有一点不同,protected 修饰的成员在子类中可以访问,但是外部不行</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>  <span class="token keyword">protected</span> age<span class="token punctuation">:</span> number<span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">protected</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error 属性“age”为私有属性，只能在类“ParentA”中访问</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Parent<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error 类型“typeof ParentA”上不存在属性“age”</span><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>protected 还能用来修饰构造函数，加了 protected 之后这个类就不能创建实例</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>  <span class="token keyword">protected</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error 类“Parent”的构造函数是受保护的，仅可在类声明中访问</span><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="readonly-修饰符"><a href="#readonly-修饰符" class="headerlink" title="readonly 修饰符"></a>readonly 修饰符</h3><ul><li>readonly 只读</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">UserInfo</span> <span class="token punctuation">{</span>  readonly name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token string">"Lison"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"haha"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error Cannot assign to 'name' because it is a read-only property</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="访问构造函数里面的参数"><a href="#访问构造函数里面的参数" class="headerlink" title="访问构造函数里面的参数"></a>访问构造函数里面的参数</h3><ul><li>这样需要加上 public</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error 类型“A”上不存在属性“name”</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "bbb"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果用了 private 则和前面一样</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Parent<span class="token punctuation">.</span>age<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> age<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error Property 'age' is a static member of type 'Parent'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Parent<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error 属性“age”为私有属性，只能在类“Parent”中访问</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h2><ul><li>如果使用了 static 关键字来指定属性或者方法是静态的,实例将不会添加这个静态属性,也不会继承这个静态方法,你可以用修饰符和 static 关键字来指定一个属性或者方法</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Parent</span><span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">static</span> age<span class="token punctuation">:</span>number <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> Parent<span class="token punctuation">.</span>age<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//构造函数</span> <span class="token punctuation">}</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//error</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Parent<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 18</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果使用了 private 修饰的话道理和前面一样</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Parent<span class="token punctuation">.</span>age<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> age<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error Property 'age' is a static member of type 'Parent'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Parent<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error 属性“age”为私有属性，只能在类“Parent”中访问。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="可选类属性"><a href="#可选类属性" class="headerlink" title="可选类属性"></a>可选类属性</h2><ul><li>我们可以使用?来标记</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Info</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span>string<span class="token punctuation">;</span> age<span class="token operator">?</span><span class="token punctuation">:</span>number<span class="token punctuation">;</span> <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span>string<span class="token punctuation">,</span>age<span class="token operator">?</span><span class="token punctuation">:</span>number<span class="token punctuation">,</span>sex<span class="token operator">?</span><span class="token punctuation">:</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age <span class="token punctuation">}</span> <span class="token keyword">const</span> info1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token string">"lison"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> info2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token string">"lison"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> info3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token string">"lison"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"man"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//以上这些都没有问题</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h2><ul><li>他就是 ES6 中的存值函数和取值函数,在设置属性值的时候调用的函数, 和在访问属性值的时候调用的函数</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">UserInfo</span><span class="token punctuation">{</span>  <span class="token keyword">private</span> _fullName<span class="token punctuation">:</span>string<span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">get</span> <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_fullName<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">set</span> <span class="token function">fullName</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`setter:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_fullName <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token string">"Lison"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// setter:Lison</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Lison</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ul><li>抽象类一般用来被其他类继承，而不是用于创建实例,抽象类和类内部定义抽象方法,使用 abstract 关键字</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">abstract <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  abstract <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error 应有 1 个参数，但获得 0 个</span><span class="token keyword">const</span> man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token string">"lison"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>man<span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'lison'</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">"lison"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error 无法创建抽象类的实例</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在上面例子中我们定义了一个抽象类,在抽象类里面我们定义了 constructor 方法必须传入一个字符串类型参数,并且把这个 name 绑定在创建的实例上,使用 abstract 关键字来定义个抽象的方法 printName,这个定义可以指定参数,指定类型,指定返回类型等等。当我们直接使用抽象类 People 实例化的时候,就会报错。所以我们只能创建一个继承抽象类的子类</p></blockquote><ul><li>抽象类中定义抽象方法,子类不会继承的,所以在子类中必须实现该方法的定义.</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">abstract <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  abstract <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// error 非抽象类“Man”不会实现继承自“People”类的抽象成员"printName"</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token string">"lison"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error m.printName is not a function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实例类型"><a href="#实例类型" class="headerlink" title="实例类型"></a>实例类型</h3><ul><li>当我们定义了一个类,并创建实例后,这个实例的类型就是它创建的类</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> p<span class="token punctuation">:</span> People <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">"lison"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果你想在定义一个和 People 类同样实现的类 Animal,并且创建实例</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"lark"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对知识的补充"><a href="#对知识的补充" class="headerlink" title="对知识的补充"></a>对知识的补充</h2><h3 id="类继承接口"><a href="#类继承接口" class="headerlink" title="类继承接口"></a>类继承接口</h3><ul><li>类对类，接口对接口使用 extends!类继承接口,接口继承类必须用 implements 关键字</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">FoodInterface</span> <span class="token punctuation">{</span>  type<span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FoodClass</span> <span class="token keyword">implements</span> <span class="token class-name">FoodInterface</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// error Property 'type' is missing in type 'FoodClass' but required in type 'FoodInterface'</span>  <span class="token keyword">static</span> type<span class="token punctuation">:</span> string  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h3><ul><li>接口可以继承一个类,当接口继承了该类之后,会继承类的成员。但是不包括其实现,也只是继承成员及其成员类型.接口还会继承类的 private 和 protected 成员.当接口继承的这个类中包含这两个修饰的成员,这个接口只可被这个类或者他的子类实现</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  <span class="token keyword">protected</span> name<span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">I</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">I</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// error Property 'name' is missing in type 'B' but required in type 'I'</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">implements</span> <span class="token class-name">I</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// error 属性“name”受保护，但类型“C”并不是从“A”派生的类</span>  name<span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token keyword">implements</span> <span class="token class-name">I</span> <span class="token punctuation">{</span>  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在泛型中使用类类型"><a href="#在泛型中使用类类型" class="headerlink" title="在泛型中使用类类型"></a>在泛型中使用类类型</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> create <span class="token operator">=</span> <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>c<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Info</span> <span class="token punctuation">{</span>  age<span class="token punctuation">:</span> number<span class="token punctuation">}</span><span class="token function">create</span><span class="token punctuation">(</span>Info<span class="token punctuation">)</span><span class="token punctuation">.</span>age<span class="token function">create</span><span class="token punctuation">(</span>Info<span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token comment" spellcheck="true">// error 类型“Info”上不存在属性“name”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在这里我们创建了一个 create 函数,传入的参数是一个类,返回的是一个类创建的实例</p></blockquote><ul><li><p>参数 c 的类型定义中,new()代表调用类的构造函数,他的类型就是类创建实例后的实例的类型</p></li><li><p>return new c()这里使用传进来的类 c 创建了一个实例并返回,返回的实例类型就是函数的返回值类型</p></li><li><p>所以通过这个实例,调用 create 函数,传入和返回的值应该是同一个类类型。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>public 公共</p></li><li><p>private 私有,实例和子类都无法访问</p></li><li><p>protected 子类能访问,实例不能访问</p></li><li><p>readonly 只读,不能修改</p></li><li><p>abstract 抽象类,只能被继承不能被实例化</p></li><li><p>类类型接口,接口继承类,泛型使用类</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript(十) 使用泛型拯救你的any</title>
      <link href="/2019/12/23/typescriptbasic10/"/>
      <url>/2019/12/23/typescriptbasic10/</url>
      
        <content type="html"><![CDATA[<h2 id="使用泛型拯救你的-any"><a href="#使用泛型拯救你的-any" class="headerlink" title="使用泛型拯救你的 any"></a>使用泛型拯救你的 any</h2><blockquote><p>泛型简单来讲就是在不知道我需要什么类型的数据的时候，先用一个变量占据位置。</p></blockquote><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> getArray <span class="token operator">=</span> <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> T<span class="token punctuation">,</span> times<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>在定义函数前使用&lt;&gt;符号定义了一个泛型变量 T，这个 T 在这次函数定义中就表示一种类型,他可以是基础类型。也可以是联合类型或者高级类型.定义了泛型变量之后,你在函数中任何需要指定类型的地方使用 T 都代表这一类型.比如当我们传入 value 的类型为数值类型,那么返回的数组类型 T[]就表示 number[]类型</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> getArray <span class="token operator">=</span> <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> T<span class="token punctuation">,</span> times<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>getArray<span class="token operator">&lt;</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item<span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>getArray<span class="token operator">&lt;</span>number<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//errot 因为类型number上不存在length属性</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>第二个错误解读,我们传入了数字 2,可是我们函数里面定义的是返回一个数组里面是 T 类型的,而循环的时候 T 类型是数字，而数字没有 length</p></blockquote><ul><li>当然了我们也可以省略这个&lt;number[]&gt;,而 TypeScript 会依据我传入函数的 value 值进行推断</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> getArray <span class="token operator">=</span> <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> T<span class="token punctuation">,</span> times<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">getArray</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//error 因为数字是没有length</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="泛型变量"><a href="#泛型变量" class="headerlink" title="泛型变量"></a>泛型变量</h2><blockquote><p>我们可以把这个泛型数据当作任意类型来处理,意味着不是所有类型都做的操作不能做,不是所有类型都能调用的方法不能调用</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> getLength <span class="token operator">=</span> <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>param<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> number <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> param<span class="token punctuation">.</span>length <span class="token comment" spellcheck="true">//error T上不存在length</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当我们获取到一个类型为泛型的变量 param，时 要是 param 类型是数组或者字符串,那他具有 length 属性.但是如果传入的 param 是 number 类型则会报错.因为 T 不固定</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> getArray <span class="token operator">=</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token operator">></span><span class="token punctuation">(</span>param1<span class="token punctuation">:</span> T<span class="token punctuation">,</span> param2<span class="token punctuation">:</span> U<span class="token punctuation">,</span> times<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>T<span class="token punctuation">,</span> U<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>param1<span class="token punctuation">,</span> param2<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">getArray</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//error类型number上不存在length</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//error "toFixed"在类型"string"不存在</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="泛型函数类型"><a href="#泛型函数类型" class="headerlink" title="泛型函数类型"></a>泛型函数类型</h2><h3 id="普通类型定义"><a href="#普通类型定义" class="headerlink" title="普通类型定义"></a>普通类型定义</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//简单使用，不推荐</span><span class="token keyword">const</span> getArray<span class="token punctuation">:</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span>T<span class="token punctuation">,</span>times<span class="token punctuation">:</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>arg<span class="token punctuation">,</span>times<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用类型别名</span>type GetArray<span class="token operator">=</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span>T<span class="token punctuation">,</span>times<span class="token punctuation">:</span>number<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> getArray<span class="token punctuation">:</span>GetArray <span class="token operator">=</span> <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span>T<span class="token punctuation">,</span>times<span class="token punctuation">:</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="我们也可以使用接口的形式来定义泛型函数"><a href="#我们也可以使用接口的形式来定义泛型函数" class="headerlink" title="我们也可以使用接口的形式来定义泛型函数"></a>我们也可以使用接口的形式来定义泛型函数</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//定义了一个函数</span><span class="token keyword">interface</span> <span class="token class-name">GetArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span>T<span class="token punctuation">,</span>times<span class="token punctuation">:</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用</span><span class="token keyword">const</span> getArray<span class="token punctuation">:</span>GetArray <span class="token operator">=</span> <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span>T<span class="token punctuation">,</span>times<span class="token punctuation">:</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>还可以把接口提升到最外层,这样接口中所有属性和方法都能使用</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">GetArray</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">,</span> times<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  tag<span class="token punctuation">:</span> T<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> getArray<span class="token punctuation">:</span> GetArray<span class="token operator">&lt;</span>number<span class="token operator">></span> <span class="token operator">=</span> <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">,</span> times<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// error 不能将类型“{ &lt;T>(arg: T, times: number): T[]; tag: string; }”分配给类型“GetArray&lt;number>”。</span>  <span class="token comment" spellcheck="true">// 属性“tag”的类型不兼容。</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">}</span>getArray<span class="token punctuation">.</span>tag <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token comment" spellcheck="true">// 不能将类型“"a"”分配给类型“number”</span><span class="token function">getArray</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 不能将类型“"a"”分配给类型“number”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>有的时候我们对泛型有约束,这个时候我们可以用 extends 继承来实现</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">ValueWitchLength</span> <span class="token punctuation">{</span>  length<span class="token punctuation">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> v<span class="token punctuation">:</span> ValueWitchLength <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//直接error因为缺少length属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>泛型约束</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">nterface ValueWithLength <span class="token punctuation">{</span>  length<span class="token punctuation">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> getLength <span class="token operator">=</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">ValueWithLength</span><span class="token operator">></span><span class="token punctuation">(</span>param<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> number <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> param<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error 类型“123”的参数不能赋给类型“ValueWithLength”的参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在泛型中使用类型参数"><a href="#在泛型中使用类型参数" class="headerlink" title="在泛型中使用类型参数"></a>在泛型中使用类型参数</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> getProps <span class="token operator">=</span> <span class="token punctuation">(</span>object<span class="token punctuation">,</span> propName<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> object<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token string">'aa'</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token string">'bb'</span> <span class="token punctuation">}</span><span class="token function">getProps</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用类型参数的话</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> getProp <span class="token operator">=</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> K <span class="token keyword">extends</span> <span class="token class-name">keyof</span> T<span class="token operator">></span><span class="token punctuation">(</span>object<span class="token punctuation">:</span> T<span class="token punctuation">,</span> propName<span class="token punctuation">:</span> K<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> object<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token string">"aa"</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token string">"bb"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">getProp</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 类型“"c"”的参数不能赋给类型“"a" | "b"”的参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>泛型的概念与使用</li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript(九) 为函数和函数参数定义类型</title>
      <link href="/2019/12/22/typescriptbasic9/"/>
      <url>/2019/12/22/typescriptbasic9/</url>
      
        <content type="html"><![CDATA[<h1 id="为函数和函数参数定义类型"><a href="#为函数和函数参数定义类型" class="headerlink" title="为函数和函数参数定义类型"></a>为函数和函数参数定义类型</h1><blockquote><p>函数类型</p></blockquote><blockquote><p>函数类型分成三种, 可选参数,默认参数和剩余参数</p></blockquote><h2 id="为函数定型"><a href="#为函数定型" class="headerlink" title="为函数定型"></a>为函数定型</h2><h3 id="1-为函数类型定义"><a href="#1-为函数类型定义" class="headerlink" title="(1) 为函数类型定义"></a>(1) 为函数类型定义</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>arg1<span class="token punctuation">:</span> number<span class="token punctuation">,</span> arg2<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span> number <span class="token punctuation">{</span>  <span class="token keyword">return</span> arg1 <span class="token operator">+</span> arg2<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//或者</span><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">:</span> number<span class="token punctuation">,</span> arg2<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span> number <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> arg1 <span class="token operator">+</span> arg2<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们规定 arg1 和 arg2 都是数值类型的,最后相加得到结果也是数值类型的</p><blockquote><p>如果忽略参数的类型,Typescript 会默认这个参数就是 any 类型,如果省略返回值类型，那 Typescript 会自己推断出返回类型,如果函数无返回值,那么 Typescript 会默认函数返回值为 void 类型</p></blockquote><h3 id="2-完整的函数类型"><a href="#2-完整的函数类型" class="headerlink" title="(2) 完整的函数类型"></a>(2) 完整的函数类型</h3><blockquote><p>一个函数的定义包括 函数名,参数,逻辑和返回值。我们为一个函数定义类型时,完整的定义应该包括参数类型和返回值类型。</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> add<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> number<span class="token punctuation">,</span> y<span class="token punctuation">:</span> number <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> numberadd <span class="token operator">=</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">:</span> number<span class="token punctuation">,</span> arg2<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span> number <span class="token operator">=</span><span class="token operator">></span> arg1 <span class="token operator">+</span> arg2add <span class="token operator">=</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">:</span> string<span class="token punctuation">,</span> arg2<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token operator">=</span><span class="token operator">></span> arg1 <span class="token operator">+</span> arg2 <span class="token comment" spellcheck="true">//error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-使用接口定义函数类型"><a href="#3-使用接口定义函数类型" class="headerlink" title="(3) 使用接口定义函数类型"></a>(3) 使用接口定义函数类型</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Add</span><span class="token punctuation">{</span>   <span class="token punctuation">(</span>x<span class="token punctuation">:</span>number<span class="token punctuation">,</span>y<span class="token punctuation">:</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>number   <span class="token comment" spellcheck="true">//他里面就是个函数返回值是number</span><span class="token punctuation">}</span><span class="token keyword">let</span> add<span class="token punctuation">:</span>Add <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>arg1<span class="token punctuation">:</span>string<span class="token punctuation">,</span>arg2<span class="token punctuation">:</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>string<span class="token operator">=</span><span class="token operator">></span> arg1<span class="token operator">+</span>arg2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//erroe类型不对</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>我们通过接口的形式定义函数类型,而这个接口 Add 定义了这个结构是一个函数,这两个参数都是 number 类型,返回值也是 number 类型,当我们指定变量 add 类型为 add 时,再给 add 赋值就必须是一个函数,而且参数类型和返回值都要满足 Add，显然上面不满足,所以报错了</p></blockquote><h3 id="4-使用类型别名"><a href="#4-使用类型别名" class="headerlink" title="(4) 使用类型别名"></a>(4) 使用类型别名</h3><pre class="line-numbers language-javascript"><code class="language-javascript">type Add <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> number<span class="token punctuation">,</span> y<span class="token punctuation">:</span> number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> number<span class="token keyword">let</span> add<span class="token punctuation">:</span> Add <span class="token operator">=</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">:</span> string<span class="token punctuation">,</span> arg2<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token operator">=</span><span class="token operator">></span> arg1 <span class="token operator">+</span> arg2 <span class="token comment" spellcheck="true">//error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>使用 type 关键字可以为原始值,元祖,以及任何类型起一个别名.</p></blockquote><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><h3 id="1-可选参数"><a href="#1-可选参数" class="headerlink" title="(1) 可选参数"></a>(1) 可选参数</h3><blockquote><p>必选参数必须要放到可选参数之后</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript">type Add <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span>number<span class="token punctuation">,</span>y<span class="token punctuation">:</span>number<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">></span>number<span class="token punctuation">;</span><span class="token keyword">let</span> add<span class="token punctuation">:</span>Add <span class="token operator">=</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">:</span>number<span class="token punctuation">,</span>arg2<span class="token punctuation">:</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>number <span class="token operator">=</span> <span class="token operator">></span>arg1<span class="token operator">+</span>arg2<span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//right</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//error应该有两个参数，但实际上传了3个参数</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//error应该有两个参数,但实际获得1个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有的时候参数不是必要的，所以会出现可选参数，这里和可选属性一样，只不过位置不一样</p><blockquote><p>必填的参数必须要在可选参数的前面</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript">type Add <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> number<span class="token punctuation">,</span> y<span class="token operator">?</span><span class="token punctuation">:</span> number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> number <span class="token comment" spellcheck="true">//这样才对</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果顺序错了</p><pre class="line-numbers language-javascript"><code class="language-javascript">type Add <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">?</span><span class="token punctuation">:</span> number<span class="token punctuation">,</span> y<span class="token punctuation">:</span> number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> number <span class="token comment" spellcheck="true">//直接报错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-默认参数"><a href="#2-默认参数" class="headerlink" title="(2) 默认参数"></a>(2) 默认参数</h3><p>Typescript 会自动识别参数的类型，要是不符合,则会报错误</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> number<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">}</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//这样会直接报错,因为默认值类型是数字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>也可以显视给 Y 设置类型</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> number<span class="token punctuation">,</span> y<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-剩余参数"><a href="#3-剩余参数" class="headerlink" title="(3) 剩余参数"></a>(3) 剩余参数</h3><blockquote><p>也可以为剩余参数指定类型</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> handleData <span class="token operator">=</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">:</span> number<span class="token punctuation">,</span> <span class="token operator">...</span>arg<span class="token punctuation">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">handleData</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//error直接报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><blockquote><p>在 TypeScript 中重载通过一个函数指定多个函数类型定义:从而对函数调用的返回值进行检查.</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">handleData</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这就是重载指定类型为 string时,返回值为string类型的元素构成的数组</span><span class="token keyword">function</span> <span class="token function">handleData</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>string<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当指定的参数类型为number时,返回值是string</span><span class="token keyword">function</span> <span class="token function">handleData</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">:</span> any <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 这个就是重载的内容了，他是实体函数，不算做重载的部分</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x      <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">handleData</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">handleData</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error 类型"string"上不存在属性"join"</span><span class="token function">handleData</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error 类型"boolean"的参数不能赋给类型"number"的参数。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>第二个之所以错 是因为他调用了数组里面的 join 方法。而字符串无法调用这个方法</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.基本类型 2.接口类型 3.类型别名 4.可选参数 5.默认参数 6.剩余参数 可以用…参数名来获取任意多个参数,获取的是一个数组</p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript(八) 接口的高阶用法</title>
      <link href="/2019/12/21/typescriptbasic8/"/>
      <url>/2019/12/21/typescriptbasic8/</url>
      
        <content type="html"><![CDATA[<h1 id="接口的高阶用法"><a href="#接口的高阶用法" class="headerlink" title="接口的高阶用法"></a>接口的高阶用法</h1><h2 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h2><ul><li>比如一个接口索引是数字的话,就不能在改变索引的类型</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">RoleDic</span><span class="token punctuation">{</span>  <span class="token punctuation">[</span>id<span class="token punctuation">:</span>number<span class="token punctuation">]</span><span class="token punctuation">:</span>string<span class="token punctuation">}</span><span class="token keyword">const</span> role1<span class="token punctuation">:</span>RoleDic<span class="token operator">=</span><span class="token punctuation">{</span>  <span class="token number">0</span><span class="token punctuation">:</span><span class="token string">"super_admin"</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"admin"</span><span class="token punctuation">}</span><span class="token keyword">const</span> role2<span class="token punctuation">:</span>RoleDic<span class="token punctuation">{</span>  s<span class="token punctuation">:</span><span class="token string">"super_admin"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//error 不能将类型{s:string}分配给RoleDic</span>  a<span class="token punctuation">:</span><span class="token string">"admin"</span><span class="token punctuation">}</span><span class="token keyword">const</span> role3<span class="token punctuation">:</span>RoleDic <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"super_admin"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子中 role3 定义了一个数组,索引为数值类型,值为字符串类型</p><p>当然了也可以给索引设置 readonly,从而防止索引返回值被修改</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">RoleDic</span><span class="token punctuation">{</span>  readonly <span class="token punctuation">[</span>id<span class="token punctuation">:</span>number<span class="token punctuation">]</span><span class="token punctuation">:</span>string<span class="token punctuation">}</span><span class="token keyword">const</span> role<span class="token punctuation">:</span>RoleDic <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token number">0</span><span class="token punctuation">:</span><span class="token string">"super_admin"</span><span class="token punctuation">}</span>role<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//error错误,因为签名只允许读</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里要特别注意的就是索引序号值绝对不能相等,否则后面的会把前面的覆盖掉比如</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token number">123</span><span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//这里定义了一个数值类型的123这个属性</span>  <span class="token string">'123'</span><span class="token punctuation">:</span> <span class="token string">'b'</span> <span class="token comment" spellcheck="true">//这里定义了一个字符串类型的123属性,标识符123重复</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {"123","b"}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h2><blockquote><p>接口可以继承,这和类一样，提高接口复用性</p></blockquote><ul><li>举个例子:我们定义 Vegetables 接口,他会对 color 属性进行限制。再定义两个接口,一个为 Tomato,一个为 Carrot,这两个类都对 color 进行限制</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Vegetables</span> <span class="token punctuation">{</span>  color<span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Tomato</span> <span class="token punctuation">{</span>  color<span class="token punctuation">:</span> string<span class="token punctuation">;</span>  radius<span class="token punctuation">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Carrot</span> <span class="token punctuation">{</span>  color<span class="token punctuation">:</span> string<span class="token punctuation">;</span>  length<span class="token punctuation">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三个接口都对 color 有定义,但这样很繁琐,所以我们可以改为继承</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Vegetables</span><span class="token punctuation">{</span>  color<span class="token punctuation">:</span>string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Tomato</span> <span class="token keyword">extends</span> <span class="token class-name">Vegetables</span><span class="token punctuation">{</span>  radius<span class="token punctuation">:</span>number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Carrot</span> <span class="token keyword">extends</span> <span class="token class-name">Vegetables</span><span class="token punctuation">{</span>  length<span class="token punctuation">:</span>number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> tomato<span class="token punctuation">:</span>Tomato<span class="token punctuation">{</span>  radius<span class="token punctuation">:</span><span class="token number">1.2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//error colormissing</span><span class="token punctuation">}</span><span class="token keyword">const</span> carrot<span class="token punctuation">:</span>Carrot<span class="token operator">=</span><span class="token punctuation">{</span>  color<span class="token punctuation">:</span><span class="token string">"orange"</span><span class="token punctuation">,</span>  length<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一个接口可以被多个接口继承,同样一个接口可以继承了多个接口,多个接口用逗号隔开,比如我们在定义一个 Food 接口,Tomato 继承 Food</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Vegetables</span> <span class="token punctuation">{</span>  color<span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Food</span> <span class="token punctuation">{</span>  type<span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Tomato</span> <span class="token keyword">extends</span> <span class="token class-name">Food</span><span class="token punctuation">,</span> Vegetabls <span class="token punctuation">{</span>  radius<span class="token punctuation">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> tomato<span class="token punctuation">:</span> Tomato <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token punctuation">:</span> <span class="token string">'vegetables'</span><span class="token punctuation">,</span>  color<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>  radius<span class="token punctuation">:</span> <span class="token number">1.2</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//在定义tomato变量时将继承过来的color和type属性共同声明</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>限定索引的类型</p></li><li><p>使用:type 来指定索引的类型。</p></li><li><p>接口的继承</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript(七) 使用接口几乎可以定义任何结构</title>
      <link href="/2019/12/20/typescriptbasic7/"/>
      <url>/2019/12/20/typescriptbasic7/</url>
      
        <content type="html"><![CDATA[<h1 id="使用接口几乎可以定义任何结构"><a href="#使用接口几乎可以定义任何结构" class="headerlink" title="使用接口几乎可以定义任何结构"></a>使用接口几乎可以定义任何结构</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><blockquote><p>接口定义几乎任意结构</p></blockquote><ul><li>代码</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Info</span> <span class="token punctuation">{</span>  firstName<span class="token punctuation">:</span> string<span class="token punctuation">;</span>  lastName<span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> getFullName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> firstName<span class="token punctuation">,</span> lastName <span class="token punctuation">}</span><span class="token punctuation">:</span> info<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token punctuation">;</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">+</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里特别注意的就是 你不要把接口理解为一个在定义一个对象,而是要理解为一个代码块,里面是一条条声明的语句,只不过声明的不是变量的值 而是类型.声明也不用等号赋值,而是用冒号指定类型.每条声明致歉用换行分隔即可,或者也可以使用分号或者都行</p></blockquote><h2 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h2><blockquote><p>当我们定义一些结构的时候，一些结构对于某些字段的要求是可选的。有就做处理，没有就忽略.</p></blockquote><p>例如</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> getVegetables <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> color<span class="token punctuation">,</span> type <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`A</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>color <span class="token operator">?</span> color <span class="token punctuation">:</span> <span class="token string">''</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">+</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们可以看到这个函数根据传入对象中的 color 和 type 来进行描述返回一句话,color 是可选的,所以我们应该给 color 设置可选属性,在属性前面加个?即可.</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Vegetables</span> <span class="token punctuation">{</span>  color<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span>  type<span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里可能 tslint 会报一个警告,说接口应该大写之类的。你可以在 tslint.json 中的 rules 添加”interface-name”: [true, “never-prefix”]来关闭</p></blockquote><h2 id="多于属性检查"><a href="#多于属性检查" class="headerlink" title="多于属性检查"></a>多于属性检查</h2><ul><li>假如我们多传入了属性，接口上不存在你多余的这个属性。只要接口中没有定义这个属性，就会报错。但是如果你定义了可选 size 属性，上面的例子就不会报错</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">getVegetables</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  type<span class="token punctuation">:</span> <span class="token string">'tomota'</span><span class="token punctuation">,</span>  size<span class="token punctuation">:</span> <span class="token string">'small'</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//size不在类型Vegetables</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="绕开多余属性检查"><a href="#绕开多余属性检查" class="headerlink" title="绕开多余属性检查"></a>绕开多余属性检查</h3><p>有三种方法</p><ul><li>第一种使用类型断言</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Vegetables</span><span class="token punctuation">{</span>  color<span class="token operator">?</span><span class="token punctuation">:</span>string<span class="token punctuation">;</span>  type<span class="token punctuation">:</span>string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> getVegetables <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>color<span class="token punctuation">,</span>type<span class="token punctuation">}</span><span class="token punctuation">:</span>Vegetables<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`A</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>color<span class="token operator">?</span>color<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">getVegetables</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  type<span class="token punctuation">:</span><span class="token string">"tomato"</span><span class="token punctuation">,</span>  size<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span>  price<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token keyword">as</span> Vegetables<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第二种添加索引签名</li></ul><blockquote><p>添加字符串索引签名,索引签名后期再说</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Vegetables</span> <span class="token punctuation">{</span>  color<span class="token punctuation">:</span> string<span class="token punctuation">;</span>  type<span class="token punctuation">:</span> string<span class="token punctuation">;</span>  <span class="token punctuation">[</span>prop<span class="token punctuation">:</span> string<span class="token punctuation">]</span><span class="token punctuation">:</span> any<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> getVegetables <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> color<span class="token punctuation">,</span> type <span class="token punctuation">}</span><span class="token punctuation">:</span> Vegetables<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`A</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>color <span class="token operator">?</span> color <span class="token punctuation">:</span> <span class="token string">''</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span><span class="token function">getVegetables</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  color<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>  type<span class="token punctuation">:</span> <span class="token string">'tomato'</span><span class="token punctuation">,</span>  size<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>  price<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h2><ul><li>接口也可以设置为只读性</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Role</span><span class="token punctuation">{</span>  readonly <span class="token number">0</span> <span class="token punctuation">:</span>string<span class="token punctuation">;</span>  readonly <span class="token number">1</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这时候我们试图修改它的值</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Role</span><span class="token punctuation">{</span>  readonly <span class="token number">0</span> <span class="token punctuation">:</span>string<span class="token punctuation">;</span>  readonly <span class="token number">1</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> role<span class="token punctuation">:</span>Role <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token number">0</span><span class="token punctuation">:</span><span class="token string">"super_role"</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"admin"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>role<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"super_admin"</span><span class="token comment" spellcheck="true">//会报错误 Cannot assign to '0' because it is a read-only property</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>readonly 里面对应属性,const 对应常量。</p></blockquote><h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><p>接口也可以描述函数类型</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">AddFunc</span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span>num1<span class="token punctuation">:</span> number<span class="token punctuation">,</span> num2<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>这里我们定义了一个 AddFunc 结构,这个结构要求实现这个结构的值,必须包含一个和结构里定义的函数一样参数,一样返回值的方法,或者这个值就是符合这个函数要求的函数,我们管花括号里包着的内容为调用签名,它由带有参数类型的参数列表和返回值类型组成。后面学到类型别名的死后还有其他写法</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> add<span class="token punctuation">:</span> AddFunc <span class="token operator">=</span> <span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> n1 <span class="token operator">+</span> n2<span class="token keyword">const</span> join<span class="token punctuation">:</span> AddFunc <span class="token operator">=</span> <span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>n1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>n2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token comment" spellcheck="true">// 不能将类型string分配给number</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>这讲主要是接口的定义和用法.</p></li><li><p>接口的只读性</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript(六) 使用类型断言达到预期</title>
      <link href="/2019/12/19/typescriptbasic6/"/>
      <url>/2019/12/19/typescriptbasic6/</url>
      
        <content type="html"><![CDATA[<h1 id="使用类型断言达到预期"><a href="#使用类型断言达到预期" class="headerlink" title="使用类型断言达到预期"></a>使用类型断言达到预期</h1><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><ul><li><p>类型断言可以理解为把一个类型强制转化为另一个类型</p></li><li><p>断言使用方法就是 value as type</p></li></ul><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> getLength <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">:</span> string <span class="token operator">|</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span> number <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//error因为string或者number都没有length属性</span>    <span class="token keyword">return</span> target<span class="token punctuation">.</span>length  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> target<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里我们接受了一个函数返回他的长度,我们可以传入字符串,数组,数值的类型.如果有 length 属性。说明参数是数组或者字符串,如果数值类型没有 length 属性。所以需要把数值类型转变为字符串类型然后在获取 length,所以我们这里限定传入的值只能是字符串后者数值类型</p></blockquote><h2 id="正确的做法"><a href="#正确的做法" class="headerlink" title="正确的做法"></a>正确的做法</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> getLength <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">:</span>string<span class="token operator">|</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>number<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>target <span class="token keyword">as</span> string<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//error因为string或者number都没有length属性</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>target <span class="token keyword">as</span> string<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> target<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>断言的使用方法类似转换</p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript(五) Typescript 深入学习枚举</title>
      <link href="/2019/12/18/typescriptbasic5/"/>
      <url>/2019/12/18/typescriptbasic5/</url>
      
        <content type="html"><![CDATA[<h1 id="Typescript-深入学习枚举"><a href="#Typescript-深入学习枚举" class="headerlink" title="Typescript 深入学习枚举"></a>Typescript 深入学习枚举</h1><h2 id="数字枚举"><a href="#数字枚举" class="headerlink" title="数字枚举"></a>数字枚举</h2><ul><li>我们通过数字枚举</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">enum</span> Status <span class="token punctuation">{</span>  Uploading<span class="token punctuation">,</span>  Success<span class="token punctuation">,</span>  Failed<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Status<span class="token punctuation">.</span>Uploading<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Status<span class="token punctuation">[</span><span class="token string">"Success"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Status<span class="token punctuation">.</span>Failed<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个枚举值包含三个字段,这个采用的默认序号</p><ul><li>修改默认编号</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">enum</span> Color<span class="token punctuation">{</span>  Red <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>  Blue<span class="token punctuation">,</span>  Yellow<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Red<span class="token operator">+</span><span class="token string">"||"</span><span class="token operator">+</span>Color<span class="token punctuation">.</span>Blue<span class="token operator">+</span><span class="token string">"||"</span><span class="token operator">+</span>Color<span class="token punctuation">.</span>Yellow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果就是2||3||4</span><span class="token comment" spellcheck="true">//指定任意字段的索引值</span><span class="token keyword">enum</span> Status<span class="token punctuation">{</span>  Success <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span>  NotFound <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">,</span>  Error <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Status<span class="token punctuation">.</span>Success<span class="token punctuation">,</span>Status<span class="token punctuation">.</span>NotFound<span class="token punctuation">,</span>Status<span class="token punctuation">.</span>Error<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//200 404 500</span><span class="token comment" spellcheck="true">//指定部分字段,其他使用默认递增索引</span><span class="token keyword">enum</span> Status2<span class="token punctuation">{</span> Ok<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> Created<span class="token punctuation">,</span> Accepted<span class="token punctuation">,</span> BadRequest<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">,</span> Unauthorized<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Status2<span class="token punctuation">.</span>Created<span class="token punctuation">,</span>Status2<span class="token punctuation">.</span>Accepted<span class="token punctuation">,</span>Status2<span class="token punctuation">.</span>Unauthorized<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 201 202 401</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>数字枚举还可以使用计算值或者常量来代替，但是设置了以后必须要在后面设置初始值</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> getValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">enum</span> ErrorIndex<span class="token punctuation">{</span>  a <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  b <span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//error枚举成员必须具有初始化值</span>  c<span class="token punctuation">}</span><span class="token keyword">enum</span> RightIndex<span class="token punctuation">{</span>  a <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  b <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//error枚举成员必须具有初始化值</span>  c<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>反向映射 反向反射只支持数字枚举,字符枚举是不支持的</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">enum</span> Status<span class="token punctuation">{</span>  Success <span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span>  NotFound <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">,</span>  Error <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Status<span class="token punctuation">[</span><span class="token string">"Success"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 200</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Status<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Success</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Status<span class="token punctuation">[</span>Status<span class="token punctuation">[</span><span class="token string">"Success"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Success</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串枚举"><a href="#字符串枚举" class="headerlink" title="字符串枚举"></a>字符串枚举</h2><blockquote><p>字符串枚举值要求每个字段的值都必须是字符串字面量,或者是该枚举值中另一个字符串枚举成员</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">enum</span> Message<span class="token punctuation">{</span>  Error <span class="token operator">=</span> <span class="token string">"Sorry,error"</span><span class="token punctuation">,</span>  Success <span class="token operator">=</span> Error<span class="token punctuation">,</span>  ClientError <span class="token operator">=</span> Error<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Message<span class="token punctuation">.</span>Error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Sorry ,error</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Message<span class="token punctuation">.</span>Success<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Sorry,error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="异构枚举-不推荐使用"><a href="#异构枚举-不推荐使用" class="headerlink" title="异构枚举(不推荐使用)"></a>异构枚举(不推荐使用)</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">enum</span> Result<span class="token punctuation">{</span>  Faild <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  Success <span class="token operator">=</span> <span class="token string">"Success"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="枚举成员类型和联合枚举类型"><a href="#枚举成员类型和联合枚举类型" class="headerlink" title="枚举成员类型和联合枚举类型"></a>枚举成员类型和联合枚举类型</h2><blockquote><p>如果枚举值所有成员的值都是字面量类型的值,那么这个枚举的每个成员和枚举值本身都可以作为类型使用</p></blockquote><ul><li>我们可以把符合条件的枚举值的成员当作类型使用</li></ul><h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">enum</span> Animal <span class="token punctuation">{</span>  Dog<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>  Cat<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>  type<span class="token punctuation">:</span>Animal<span class="token punctuation">.</span>Dog<span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Cat</span><span class="token punctuation">{</span>  type<span class="token punctuation">:</span>Animal<span class="token punctuation">.</span>Cat<span class="token punctuation">}</span><span class="token keyword">let</span> cat1<span class="token punctuation">:</span>Cat <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token punctuation">:</span>Animal<span class="token punctuation">.</span>Dog <span class="token comment" spellcheck="true">//error 报错</span><span class="token punctuation">}</span><span class="token keyword">let</span> dog1<span class="token punctuation">:</span>Dog <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token punctuation">:</span>Animal<span class="token punctuation">.</span>Dog <span class="token comment" spellcheck="true">//能通过</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="联合枚举类型"><a href="#联合枚举类型" class="headerlink" title="联合枚举类型"></a>联合枚举类型</h3><ul><li>当我们的枚举值符合条件时,这个枚举值就可以看作一个包含所有成员的联合类型</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">enum</span> Status<span class="token punctuation">{</span>  off<span class="token punctuation">,</span>  on<span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Light</span><span class="token punctuation">{</span>  status<span class="token punctuation">:</span>Status<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">enum</span> Animal<span class="token punctuation">{</span>  Dog<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>  Cat<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">const</span> light1<span class="token punctuation">:</span>Light <span class="token operator">=</span> <span class="token punctuation">{</span>  status<span class="token punctuation">:</span>Animal<span class="token punctuation">.</span>Dog  <span class="token comment" spellcheck="true">//报错</span><span class="token punctuation">}</span><span class="token keyword">const</span> light2<span class="token punctuation">:</span>Light <span class="token operator">=</span> <span class="token punctuation">{</span>  status<span class="token punctuation">:</span>Status<span class="token punctuation">.</span>off<span class="token punctuation">}</span><span class="token keyword">const</span> light3<span class="token punctuation">:</span>Light <span class="token operator">=</span> <span class="token punctuation">{</span>  status<span class="token punctuation">:</span>Status<span class="token punctuation">.</span>on<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上面例子定义接口 Light 的 status 字段的类型为枚举值,那么此时 status 的属性值必须为 Status.Off 和 Status.On 中的一个。相当于 status:Status.Off|| Status.On</p></blockquote><h2 id="const-enum"><a href="#const-enum" class="headerlink" title="const enum"></a>const enum</h2><p>有的时候我们不需要编译后对象，只需要取出值就行</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">enum</span> Status <span class="token punctuation">{</span>  Off<span class="token punctuation">,</span>  On<span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">enum</span> Animal <span class="token punctuation">{</span>  Dog<span class="token punctuation">,</span>  Cat<span class="token punctuation">}</span><span class="token keyword">const</span> status <span class="token operator">=</span> Status<span class="token punctuation">.</span>On<span class="token punctuation">;</span><span class="token keyword">const</span> animal <span class="token operator">=</span> Animal<span class="token punctuation">.</span>Dog<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>数字类型的枚举,能反转</p></li><li><p>字符类型的枚举不能反转，只能是字面量或者内部的属性值</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript(四) Symbol-ES6 新基础类型</title>
      <link href="/2019/12/17/typescriptbasic4/"/>
      <url>/2019/12/17/typescriptbasic4/</url>
      
        <content type="html"><![CDATA[<h1 id="Symbol-ES6-新基础类型"><a href="#Symbol-ES6-新基础类型" class="headerlink" title="Symbol-ES6 新基础类型"></a>Symbol-ES6 新基础类型</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>Symbol 是 ES6 新增的一种数据类型,它和 number,string,boolean,null,undefined,object 一样.它用来表示独一无二的值,通过 Symbol 函数生成</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>我们使用 Symbol 函数生成一个 symbol 类型的值 s</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">typeof</span> s <span class="token comment" spellcheck="true">//结果symbol</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>注意 Symbol 前面不能加 new 关键字,直接调用即可创建一个独一无二的 symbol 类型的值</p></blockquote><ul><li>我们也可以创建 symbol 类型的时候传入一个参数,这个参数需要是字符串,如果传入的不是字符串,它会优先调用 toString 方法转为字符串</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'lison'</span><span class="token punctuation">)</span><span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'lison'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上述例子中使用 Symbol 方法创建了两个 symbol 值,方法都传入了相同的字符串”lison”,但是 s1===s2 却是 false.所以说明 Symbol 会返回一个独一无二的值,这个值和任何值都不等</p></blockquote><ul><li>可以简单理解为 Symbol 值为字符串类型的值,但是它不可以和其他类型的值进行运算,但是可以传为字符串和布尔类型</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'lision'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 'Symbol(lision)'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>转化</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'lison'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 'Symbol(lison)'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="作为属性名"><a href="#作为属性名" class="headerlink" title="作为属性名"></a>作为属性名</h2><blockquote><p>在 ES6 中你可以使用一个变量作为属性名,但是表达式必须放到方括号里</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> prop <span class="token operator">=</span> <span class="token string">'name'</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'Lison'</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>而 Symbol 值可以作为属性名,因为 Symbol 值是独一无二的所以当它作为属性名的时候不会和其他任何属性名重复</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'lison'</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// {Symbol():'lison'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候打出来的对象有一个属性名是 symbol 值,我们如果想访问这个属性值,就只能用 name，必须加[]</p><pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'lison'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>后面学到 ES6 的类(Class)的时候,会利用此特性实现私有属性和私有方法</p></blockquote><h2 id="属性名的遍历"><a href="#属性名的遍历" class="headerlink" title="属性名的遍历"></a>属性名的遍历</h2><blockquote><p>使用 Symbol 类型值作为属性名,这个属性不会被 for..in 遍历到,也不会被 Object.keys(),Object.getOwnPropertyNames()、JSON.stringify()获取到</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'lison'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// => 'age'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ['age']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ['age']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// '{ "age": 18 }'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="我们可以使用-Object-getOwnPropertySymbols-方法获取对象的所有-symbol-类型的属性名-他返回的类型是一个数组"><a href="#我们可以使用-Object-getOwnPropertySymbols-方法获取对象的所有-symbol-类型的属性名-他返回的类型是一个数组" class="headerlink" title="我们可以使用 Object.getOwnPropertySymbols 方法获取对象的所有 symbol 类型的属性名,他返回的类型是一个数组"></a>我们可以使用 Object.getOwnPropertySymbols 方法获取对象的所有 symbol 类型的属性名,他返回的类型是一个数组</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'lisa'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token keyword">const</span> SymbolPropNames <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>SymbolPropNames<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [Symbol(name)]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>SymbolPropNames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// lisa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="也可以使用第二种方法-ES6-提供的-Reflect-对象的静态方法-Reflect-ownKeys，它可以返回所有类型的属性名-Symbol-也会被返回"><a href="#也可以使用第二种方法-ES6-提供的-Reflect-对象的静态方法-Reflect-ownKeys，它可以返回所有类型的属性名-Symbol-也会被返回" class="headerlink" title="也可以使用第二种方法 ES6 提供的 Reflect 对象的静态方法 Reflect.ownKeys，它可以返回所有类型的属性名,Symbol 也会被返回"></a>也可以使用第二种方法 ES6 提供的 Reflect 对象的静态方法 Reflect.ownKeys，它可以返回所有类型的属性名,Symbol 也会被返回</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'lisa'</span><span class="token punctuation">)</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'lision'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//['age',Symbol(lisa)]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Symbol-for-和-Symbol-keyFor"><a href="#Symbol-for-和-Symbol-keyFor" class="headerlink" title="Symbol.for()和 Symbol.keyFor()"></a>Symbol.for()和 Symbol.keyFor()</h2><blockquote><p>Symbol 包含两个静态方法 for 和 keyFor</p></blockquote><h3 id="1-Symbol-for"><a href="#1-Symbol-for" class="headerlink" title="1.Symbol.for()"></a>1.Symbol.for()</h3><ul><li>我们知道使用 Symbol 方法创建的 symbol 值是独一无二的,每一个值都不和任意其他值相等,而我们使用 Symbol.for 方法的时候 它会检查有没有使用该字符串调用 Symbol.for 方法创建的 Symbol 值，如果有则返回,如果没有则新建</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'lisa'</span><span class="token punctuation">)</span><span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'lisa'</span><span class="token punctuation">)</span><span class="token keyword">const</span> s3 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">'lisa'</span><span class="token punctuation">)</span><span class="token keyword">const</span> s4 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">'lisa'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false 不相等</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s3 <span class="token operator">===</span> s4<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true 相等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>特别注意 使用该方法创建的 symbol 值后会在全局范围进行注册</p></blockquote><h3 id="2-Symbol-keyFor-反转获取到参数"><a href="#2-Symbol-keyFor-反转获取到参数" class="headerlink" title="2.Symbol.keyFor()反转获取到参数"></a>2.Symbol.keyFor()反转获取到参数</h3><blockquote><p>该方法传入了一个 symbol 值,返回该值在全局注册的键名</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> sym <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">'lisa'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>sym<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//结果就是lisa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>Symbol 独一无二</p></li><li><p>Symbol.for()和 Symbol.keyFor()使用</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript(三) TS中补充的六个类型</title>
      <link href="/2019/12/16/typescriptbasic3/"/>
      <url>/2019/12/16/typescriptbasic3/</url>
      
        <content type="html"><![CDATA[<h1 id="TS-中补充的六个类型"><a href="#TS-中补充的六个类型" class="headerlink" title="TS 中补充的六个类型"></a>TS 中补充的六个类型</h1><h2 id="1-元祖"><a href="#1-元祖" class="headerlink" title="(1)元祖"></a>(1)元祖</h2><ul><li>元祖可以是看作数组的拓展,他表示已知元素数量和类型的数组。确切的说,是已知数组中每一个位置上的元素的类型</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> tuple<span class="token punctuation">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> number<span class="token punctuation">,</span> boolean<span class="token punctuation">]</span>tuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span>tuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//会报错误类型对不上</span>tuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//会报错误因为少了个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上面我们定义了一个元祖 tuple，它包含了三个元素,每个元素都是固定的.当我们为 tuple 赋值的时候,各个位置上的元素类型都要对应,元素个数也要一致</p></blockquote><p>我们还可以给单个元素赋值</p><pre class="line-numbers language-javascript"><code class="language-javascript">tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>元祖的序号也是从 0 开始的,因为第二个类型是 number,所以我们赋值 3 没有问题</p></blockquote><h2 id="2-枚举"><a href="#2-枚举" class="headerlink" title="(2) 枚举"></a>(2) 枚举</h2><ul><li>enum 枚举类型 就是比如我们要定义一组角色，每一个角色用一个数字代表，就可以用枚举类型来定义</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">enum</span> Roles<span class="token punctuation">{</span>  SUPER_ADMIN<span class="token punctuation">,</span>  ADMIN<span class="token punctuation">,</span>  USER<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面定义枚举类型里面有三个值,TypeScript 会为他们的每个值都编号,默认从 0 开始,依次排列，所以它们对应的值是</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">enum</span> Roles<span class="token punctuation">{</span>  SUPER_ADMIN <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>  ADMIN<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>  USER<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们使用的时候就可以使用名字而不需要记住数字和名称的对照关系</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> superAdmin <span class="token operator">=</span> Roles<span class="token punctuation">.</span>SUPER_ADMINconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>superAdmin<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>要是不想从 0 开始也可以从任何数开始</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">enum</span> Roles<span class="token punctuation">{</span>   SUPER_ADMIN <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>  ADMIN<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>  USER<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过名字 Roles.SUPER_ADMIN 可以获取到它对应的值 1,同时你也可以通过值获取到它的名字,以上面任意数值这个例子</p><pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Roles<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//ADMIN</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-Any"><a href="#3-Any" class="headerlink" title="(3) Any"></a>(3) Any</h2><ul><li>有的时候我们不能清楚的知道数据的类型这个时候就要用到 any 类型，即任何类型</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> value<span class="token punctuation">:</span> anyvalue <span class="token operator">=</span> <span class="token number">123</span>value <span class="token operator">=</span> <span class="token string">'abc'</span>value <span class="token operator">=</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们定义变量 value 制定他的类型为 any,接下来赋予任何类型的值</p><p>我们还可以在定义数组类型的时候使用 any 来指定数组中任意的值</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr<span class="token punctuation">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-void"><a href="#4-void" class="headerlink" title="(4) void"></a>(4) void</h2><p>void 和 any 正相反,any 表示任意类型,而 void 表示没有任意类型,就是什么类型都不是.在这里我们定义函数,函数没有返回值的时候会用到</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> consoleText <span class="token operator">=</span> <span class="token punctuation">(</span>text<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个函数没有返回任何的值,所以他的返回类型是 void，现在你只需要知道 void 表达的含义即可</p><blockquote><p>void 类型的变量只能赋值为 undefined 和 null,其他类型不能赋值给 void 类型</p></blockquote><h2 id="5-never"><a href="#5-never" class="headerlink" title="(5) never"></a>(5) never</h2><blockquote><p>never 类型指的是那些永不存在的值的类型,它是那些会抛出异常或根本不会有返回值的函数表达式的返回值类型,当变量被永不为真的类型保护所约束,该变量是 never 类型</p></blockquote><ul><li>例如</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> errorFunc <span class="token operator">=</span> <span class="token punctuation">(</span>message<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>这个 errorFunc 函数总是会抛出异常,所以他的返回值类型是 never,用来表明他的返回值是永远不存在</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> infiniteFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>infiniteFunc 也是根本不会有返回值的函数,它和之前讲 void 类型的 consoleText 函数不同,consoleText 函数没有返回值,是我们在定义函数的时候没有给他返回值,而 infiniteFunc 是死循环根本不会有返回值。所以二者还是有区别的</p><blockquote><p>never 可以赋值给任何类型。但是任何类型不能赋值给 never</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> neverVariable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>neverVariable <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment" spellcheck="true">// error 不能将类型"number"分配给类型"never"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-unknow-类型表示未知类型"><a href="#6-unknow-类型表示未知类型" class="headerlink" title="(6) unknow 类型表示未知类型"></a>(6) unknow 类型表示未知类型</h2><blockquote><p>从结果上看 unknow 和 any 类型差不多。但是 unknow 类型的值是不可以随便操作的.</p></blockquote><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="1-交叉类型"><a href="#1-交叉类型" class="headerlink" title="(1) 交叉类型"></a>(1) 交叉类型</h3><blockquote><p>交叉类型就是取多个类型的并集,并用&amp;符号定义,被&amp;符连接的多个类型构成一个交叉类型.表示这个类型同时具备这几个链接起来的类型的特点(类似与)</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token operator">></span><span class="token punctuation">(</span>arg1<span class="token punctuation">:</span> T<span class="token punctuation">,</span> arg2<span class="token punctuation">:</span> U<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token operator">&amp;</span> U <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token operator">&lt;</span>T <span class="token operator">&amp;</span> U<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这里指定返回值的类型兼备T和U两个类型变量代表的类型的特点</span>  res <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这里使用Object.assign方法，返回一个合并后的对象</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> info1 <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"lison"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> info2 <span class="token operator">=</span> <span class="token punctuation">{</span>  age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> lisonInfo <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>info1<span class="token punctuation">,</span> info2<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lisonInfo<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error 类型“{ name: string; } &amp; { age: number; }”上不存在属性“address”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到传入的两个参数分别带有 name 和 age 的两个对象,所以它俩的交叉类型要求返回的对象既有 name 属性也得有 age 属性</p><h3 id="2-联合类型"><a href="#2-联合类型" class="headerlink" title="(2) 联合类型"></a>(2) 联合类型</h3><ul><li>联合类型的要求只要符合联合类型中任意一种类型即可，他用| 来定义.当我们的程序具有多样性，元素类型不唯一的时候,使用联合类型(类似或)</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> getLength <span class="token operator">=</span> <span class="token punctuation">(</span>content<span class="token punctuation">:</span> string <span class="token operator">|</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span> number <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> content <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> content<span class="token punctuation">.</span>length  <span class="token keyword">else</span> <span class="token keyword">return</span> content<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们指定了参数既可以是字符串类型也可以是数值类型</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>元祖[xx,xxx]</li><li>枚举 enum</li><li>Any 任意</li><li>void 没有返回值</li><li>never 永远不存在返回值</li><li>unknown 不确定类型,值不可以随意操作</li></ul><blockquote><p>void 与 never 区别 void return void 而 never 就是 never never return</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript(二) 基本语法</title>
      <link href="/2019/12/15/typescriptbasic2/"/>
      <url>/2019/12/15/typescriptbasic2/</url>
      
        <content type="html"><![CDATA[<h1 id="TyoeScript-基本语法"><a href="#TyoeScript-基本语法" class="headerlink" title="TyoeScript 基本语法"></a>TyoeScript 基本语法</h1><h2 id="1-八个-JS-中你见过的类型"><a href="#1-八个-JS-中你见过的类型" class="headerlink" title="(1) 八个 JS 中你见过的类型"></a>(1) 八个 JS 中你见过的类型</h2><ul><li>为一个变量指定类型的语法</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> num<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">123</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你没有为这个变量指定类型编译器会自动根据你赋给这个变量的值来推断这个变量的类型</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">123</span>num <span class="token operator">=</span> <span class="token string">'abc'</span> <span class="token comment" spellcheck="true">//error 不能将类型"123"分配给类型number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>当我们给 num 赋值为 123 但没有指定类型时,编译器推断出 num 类型为 number 数值类型,所以当给 num 在赋值为字符串”abc”时,就会报错</p></blockquote><blockquote><p>还有一点特别注意就是 number 和 Number 的区别,TS 中指定类型的时候是小写的 number 而大写的 Number 是 JS 的源生构造函数,所以以后指定类型的时候都是小写,string,boolean 等等类同于此.</p></blockquote><h2 id="2-八个-JS-中你见过的类型"><a href="#2-八个-JS-中你见过的类型" class="headerlink" title="(2) 八个 JS 中你见过的类型"></a>(2) 八个 JS 中你见过的类型</h2><h3 id="1-布尔类型"><a href="#1-布尔类型" class="headerlink" title="1.布尔类型"></a>1.布尔类型</h3><ul><li>类型为布尔只能是 true 或者 false</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> bool<span class="token punctuation">:</span> boolean <span class="token operator">=</span> <span class="token boolean">true</span>bool <span class="token operator">=</span> <span class="token boolean">false</span>bool <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment" spellcheck="true">//error 报错误因为类型不对</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>也可以分配一个计算之后是布尔值的表达式</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> bool<span class="token punctuation">:</span> boolean <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token number">0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-数值类型"><a href="#2-数值类型" class="headerlink" title="2.数值类型"></a>2.数值类型</h3><ul><li>TypeScript 和 Javascript 一样,所有数字都是浮点数.所以只有一个 number 类型,而没有 int 或者 float 类型</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> num<span class="token punctuation">:</span> numbernum <span class="token operator">=</span> <span class="token number">123</span>num <span class="token operator">=</span> <span class="token string">'123'</span> <span class="token comment" spellcheck="true">//error类型不对</span>num <span class="token operator">=</span> <span class="token number">0b1111011</span> <span class="token comment" spellcheck="true">//二进制的123</span>num <span class="token operator">=</span> <span class="token number">0o173</span> <span class="token comment" spellcheck="true">//八进制的123</span>num <span class="token operator">=</span> <span class="token number">0x7b</span> <span class="token comment" spellcheck="true">//十六进制的123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-字符串"><a href="#3-字符串" class="headerlink" title="3.字符串"></a>3.字符串</h3><ul><li>字符串类型中你可以使用单引号或者双引号来包裹内容,但是你可能会使用 tslint 对引号进行检测,使用单引号或者双引号可以在 tslint 里面配置,你还可以使用 ES6 语法模板字符串,拼接变量和字符串</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> str<span class="token punctuation">:</span> string <span class="token operator">=</span> <span class="token string">'Lison'</span>str <span class="token operator">=</span> <span class="token string">'Li'</span><span class="token keyword">const</span> first <span class="token operator">=</span> <span class="token string">'Lison'</span><span class="token keyword">const</span> last <span class="token operator">=</span> <span class="token string">'Li'</span>str <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>first<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>last<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>还有个类型叫做字符串字面量类型。即吧一个字符串字面量当作一种类型。这样就不能再赋值为其他字符串值了.</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> str<span class="token punctuation">:</span> <span class="token string">'Lision'</span>str <span class="token operator">=</span> <span class="token string">'haha'</span> <span class="token comment" spellcheck="true">//error 因为类型是Lision不能在赋值了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-数组"><a href="#4-数组" class="headerlink" title="4.数组"></a>4.数组</h3><ul><li>在 TS 中有两种定义数组的方式</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> list1<span class="token punctuation">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">let</span> list2<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>number<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>这两种都代表指定这个数组里面的元素必须是数字类型,个人推荐第一种,要是这个数组里面的元素既有数字也有字符串可以这样写</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> list1<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>number <span class="token operator">|</span> string<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">,</span> <span class="token string">'222'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-null-和-undefined"><a href="#5-null-和-undefined" class="headerlink" title="5.null 和 undefined"></a>5.null 和 undefined</h3><ul><li>null 和 undefined 有一些共同点。因为在 JS 中 undefined 和 null 是两个基本数据类型,而在 Typescript 中这两者都有自己的类型即 undefined 和 null，也就是说他们既是实际的值,也是类型.</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> u<span class="token punctuation">:</span> undefined <span class="token operator">=</span> undefined <span class="token comment" spellcheck="true">// 这里可能会报一个tslint的错误：Unnecessary initialization to 'undefined'，就是不能给一个值赋undefined，但我们知道这是可以的，所以如果你的代码规范想让这种代码合理化，可以配置tslint，将"no-unnecessary-initializer"设为false即可</span><span class="token keyword">let</span> n<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>默认情况下 undefined 和 null 可以给赋值给任意类型的值,也就是说你可以把 undefined 赋值给 void 类型,也可以赋值给 number 类型.但是当你在 tscondig.json 的”compilerOptions”里设置了”strictNullChecks”: true 时候,那必须严格对待.undefined 和 null 只能赋值给他们自身和 void 类型</p></blockquote><h3 id="6-object"><a href="#6-object" class="headerlink" title="6. object"></a>6. object</h3><ul><li>object 在 JS 中是引用类型,他和 JS 中的其他类型不一样,像 number,string,boolean,undefined,null 这些都是基本类型.这些类型的变量存的都是他们的值。而 object 存的是引用</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> obj<span class="token punctuation">:</span> objectobj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Lision'</span> <span class="token punctuation">}</span>obj <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment" spellcheck="true">//error 不能将类型123分配给类型obj</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>这里特别注意比如你想通过访问对象的属性来获取值的时候，你这样写是错误的</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> obj<span class="token punctuation">:</span> objectobj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Lision'</span> <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//error 类型object上没有name属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当你先要获取值，就需要后面的接口概念了。</p><ul><li>有的时候我们定义了一个函数,参数就是对象</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getKeys</span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//会以数组的形式返回obj中的值</span><span class="token punctuation">}</span><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token function">getKeys</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token string">'c'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//结果就是["a","b","c"]</span><span class="token function">getKeys</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// eror 参数必须是对象类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a>symbol</h3><p>后面单独讲</p><h2 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h2><h3 id="八大类型"><a href="#八大类型" class="headerlink" title="八大类型"></a>八大类型</h3><ul><li>布尔:boolean</li><li>数值: number</li><li>字符串: string</li><li>数组:Array<type> 或者 type[]</li><li>对象类型 object</li><li>Symbol 类型: symbol</li><li>null 和 undefined 他们本身就是类型</li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript(一) 介绍和环境配置</title>
      <link href="/2019/12/14/typescriptbasic1/"/>
      <url>/2019/12/14/typescriptbasic1/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-介绍和环境配置"><a href="#TypeScript-介绍和环境配置" class="headerlink" title="TypeScript 介绍和环境配置"></a>TypeScript 介绍和环境配置</h1><h2 id="TypeScript-介绍"><a href="#TypeScript-介绍" class="headerlink" title="TypeScript 介绍"></a>TypeScript 介绍</h2><p>TypeScript 是 Javascript 的一个超集。我们都知道 Javascript 是一门动态脚本语言,他不需要二进制代码运行。这个特性使得 Javascript 的所有调试必须都要在运行时候进行,在代码编译期间是无法提前知晓的。而 TypeScript 不同它可以在你编写代码的时候就对一些错误提示。它还能在你使用某个数据的时候,为你列出这个数据可以访问的属性和方法.多人协作的时候,一些接口的定义,方法的使用都可能因为个人的喜欢或者沟通不畅导致逻辑实现的差异。而如果引入了 TypeScript,则会对一些实现进行强校验.如果不按照接口实现,编译就没法通过,如果对代码质量要求高,可以将严格检查打开.</p><h2 id="TypeScript-搭建开发环境"><a href="#TypeScript-搭建开发环境" class="headerlink" title="TypeScript 搭建开发环境"></a>TypeScript 搭建开发环境</h2><h3 id="1-安装-Node"><a href="#1-安装-Node" class="headerlink" title="(1) 安装 Node"></a>(1) 安装 Node</h3><h3 id="2-全局安装-tslint-模块"><a href="#2-全局安装-tslint-模块" class="headerlink" title="(2) 全局安装 tslint 模块"></a>(2) 全局安装 tslint 模块</h3><pre class="line-numbers language-javascript"><code class="language-javascript">npm install <span class="token operator">-</span>g tslint<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-初始化项目"><a href="#3-初始化项目" class="headerlink" title="(3) 初始化项目"></a>(3) 初始化项目</h3><ul><li><p>新建一个文件夹例如 TSweb</p></li><li><p>用 vscode 开发工具打开它</p></li></ul><h3 id="4-利用-npm-初始化项目"><a href="#4-利用-npm-初始化项目" class="headerlink" title="(4) 利用 npm 初始化项目"></a>(4) 利用 npm 初始化项目</h3><ul><li>使用 npm 默认 package.json 配置</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">npm init <span class="token operator">-</span>y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个时候我们看到了在根目录创建了 package.json 文件</p><h3 id="5-在根目录下创建几个文件夹"><a href="#5-在根目录下创建几个文件夹" class="headerlink" title="(5) 在根目录下创建几个文件夹"></a>(5) 在根目录下创建几个文件夹</h3><h4 id="i-src-用来存放项目的开发资源-在-src-创建如下文件夹"><a href="#i-src-用来存放项目的开发资源-在-src-创建如下文件夹" class="headerlink" title="(i) src 用来存放项目的开发资源,在 src 创建如下文件夹"></a>(i) src 用来存放项目的开发资源,在 src 创建如下文件夹</h4><ul><li><p>utils: 和业务相关的可复用方法</p></li><li><p>tools: 和业务无关的纯工具函数</p></li><li><p>assets: 图片字体等静态资源</p></li><li><p>api: 可复用的接口请求方法</p></li><li><p>config: 配置文件</p></li></ul><h4 id="ii-typings-模块声明文件"><a href="#ii-typings-模块声明文件" class="headerlink" title="(ii) typings: 模块声明文件"></a>(ii) typings: 模块声明文件</h4><h4 id="iii-build-webpack-构建配置"><a href="#iii-build-webpack-构建配置" class="headerlink" title="(iii) build: webpack 构建配置"></a>(iii) build: webpack 构建配置</h4><h3 id="6-全局安装-typescript-全局安装后你可以在任意文件夹使用-tsc-命令"><a href="#6-全局安装-typescript-全局安装后你可以在任意文件夹使用-tsc-命令" class="headerlink" title="(6) 全局安装 typescript,全局安装后你可以在任意文件夹使用 tsc 命令"></a>(6) 全局安装 typescript,全局安装后你可以在任意文件夹使用 tsc 命令</h3><pre class="line-numbers language-javascript"><code class="language-javascript">npm i typescript <span class="token operator">-</span>g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>安装完成后我们进入项目的根目录,利用 typescript 初始化</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">tsc <span class="token operator">--</span>init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>这个时候我们会发现在项目的根目录多了一个 tsconfig.json 文件,在这个文件下有个属性 lib 被注释掉了, 我们需要开启他，然后在这个数组里面添加”es6”和”dom”其它的暂时不用修改</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token string">'dom'</span><span class="token punctuation">,</span> <span class="token string">'es6'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>我们还需要在项目下安装 typescript 因为我们要搭配 webpack 开发</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">npm i typescript<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-配置-TSLint"><a href="#7-配置-TSLint" class="headerlink" title="(7) 配置 TSLint"></a>(7) 配置 TSLint</h3><p>接下来我们要安装 tslint</p><h4 id="i-全局安装-TSLint"><a href="#i-全局安装-TSLint" class="headerlink" title="(i) 全局安装 TSLint"></a>(i) 全局安装 TSLint</h4><pre class="line-numbers language-javascript"><code class="language-javascript">npm i tslint <span class="token operator">-</span>g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="ii-然后我们在项目的根目录下使用-TSLint-初始化配置文件"><a href="#ii-然后我们在项目的根目录下使用-TSLint-初始化配置文件" class="headerlink" title="(ii) 然后我们在项目的根目录下使用 TSLint 初始化配置文件"></a>(ii) 然后我们在项目的根目录下使用 TSLint 初始化配置文件</h4><pre class="line-numbers language-javascript"><code class="language-javascript">tslint <span class="token operator">-</span> i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="iii-这个时候项目的根目录下会多了一个-tslint-json-文件生成的-tslint-json-文件会有以下几个字段"><a href="#iii-这个时候项目的根目录下会多了一个-tslint-json-文件生成的-tslint-json-文件会有以下几个字段" class="headerlink" title="(iii)这个时候项目的根目录下会多了一个 tslint.json 文件生成的 tslint.json 文件会有以下几个字段"></a>(iii)这个时候项目的根目录下会多了一个 tslint.json 文件生成的 tslint.json 文件会有以下几个字段</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"defaultSeverity"</span><span class="token punctuation">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>  <span class="token string">"extends"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"tslint:recommended"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"jsRules"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"rules"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"rulesDirectory"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>defaultSeverity 设置提醒级别如果为 error 则会报错,如果是 warning 自则会警告,如果是 off 则关闭.那 TSLint 就关闭了</p><p>extands 指定继承指定的预设配置规则</p><p>jsRules 用来配置对.js 和 jsx 文件的校验,配置规则的方法和下面的 rules 一样</p><p>rules 重点中的重点,我们要让 TSLint 依据怎样的规则来校验代码比如我们不允许代码中使用 eval 就要配置”no-eval”:true</p><p>rulesDirectory 可以指定规则配置文件,这里是相对路径</p><h4 id="iv-配置-webpack"><a href="#iv-配置-webpack" class="headerlink" title="(iv)配置 webpack"></a>(iv)配置 webpack</h4><ul><li>先来安装 webpack,webpack-cli,和 webpack-dev-server</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">npm install webpack webpack<span class="token operator">-</span>cli webpack<span class="token operator">-</span>dev<span class="token operator">-</span>server <span class="token operator">-</span>D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在 build 文件夹下,我们给这个文件起名 webpack.config.js 然后在 package.json 里面启动命令</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"start"</span><span class="token punctuation">:</span> <span class="token string">"cross-env NODE_ENV=development webpack-dev-server --mode=development --config build/webpack.config.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里我们用到一个插件”cross-env”，并且后面跟着一个参数 NODE_ENV=development，这个用来在 webpack.config.js 里通过 process.env.NODE_ENV 来获取当前是开发还是生产环境，这个插件要安装：</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript">npm install cross<span class="token operator">-</span>env<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>紧接着我们要在 webpack.config.js 中书写配置</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 指定入口文件</span>  <span class="token comment" spellcheck="true">// 这里我们在src文件夹下创建一个index.ts</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.ts'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 指定输出文件名</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'main.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 自动解析一下拓展，当我们要引入src/index.ts的时候，只需要写src/index即可</span>    <span class="token comment" spellcheck="true">// 后面我们讲TS模块解析的时候，写src也可以</span>    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.tsx'</span><span class="token punctuation">,</span> <span class="token string">'.ts'</span><span class="token punctuation">,</span> <span class="token string">'.js'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 配置以.ts/.tsx结尾的文件都用ts-loader解析</span>    <span class="token comment" spellcheck="true">// 这里我们用到ts-loader，所以要安装一下</span>    <span class="token comment" spellcheck="true">// npm install ts-loader -D</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.tsx?$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token string">'ts-loader'</span><span class="token punctuation">,</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 指定编译后是否生成source-map，这里判断如果是生产打包环境则不生产source-map</span>  devtool<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token punctuation">:</span> <span class="token string">'inline-source-map'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 这里使用webpack-dev-server，进行本地开发调试</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    contentBase<span class="token punctuation">:</span> <span class="token string">'./dist'</span><span class="token punctuation">,</span>    stats<span class="token punctuation">:</span> <span class="token string">'errors-only'</span><span class="token punctuation">,</span>    compress<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token number">8089</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 这里用到两个插件，所以首先我们要记着安装</span>  <span class="token comment" spellcheck="true">// npm install html-webpack-plugin clean-webpack-plugin -D</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// 这里在编译之前先删除dist文件夹</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      cleanOnceBeforeBuildPatterns<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'./dist'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 这里我们指定编译需要用模板，模板文件是./src/template/index.html，所以接下来我们要创建一个index.html文件</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'./src/template/index.html'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>按照上面的步骤代码中的步骤一步步走，最后一步创建 index.html 时候，代码里面写</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"ie=edge"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>TS<span class="token operator">-</span>Learning<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>  <span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最后一步 运行命令启动服务</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">npm run start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// index.ts</span><span class="token keyword">let</span> a<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">123</span><span class="token keyword">const</span> h1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span>h1<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'Hello, I am Typescript'</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>h1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果没有意外的话。页面上会出现 Hello, I am Typescript</p></blockquote><ul><li>再来配置一下打包命令在 package.json 的 script 里增加 build 命令</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>    <span class="token string">"start"</span><span class="token punctuation">:</span> <span class="token string">"cross-env NODE_ENV=development webpack-dev-server --mode=development --config ./build/webpack.config.js"</span><span class="token punctuation">,</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"cross-env NODE_ENV=production webpack --mode=production --config ./build/webpack.config.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>打包的时候运行</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">npm run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>Typescript 概述</p></li><li><p>Typescript 总结和设置开发环境</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript学习笔记</title>
      <link href="/2019/12/14/typescriptall/"/>
      <url>/2019/12/14/typescriptall/</url>
      
        <content type="html"><![CDATA[<h2 id="TypeScript-学习笔记"><a href="#TypeScript-学习笔记" class="headerlink" title="TypeScript 学习笔记"></a>TypeScript 学习笔记</h2><h3 id="TypeScript-一-介绍和环境配置"><a href="#TypeScript-一-介绍和环境配置" class="headerlink" title="TypeScript(一) 介绍和环境配置"></a><a href="https://jsopy.gitee.io/2019/12/14/typescriptbasic1/">TypeScript(一) 介绍和环境配置</a></h3><h3 id="TypeScript-二-基本语法"><a href="#TypeScript-二-基本语法" class="headerlink" title="TypeScript(二) 基本语法"></a><a href="https://jsopy.gitee.io/2019/12/15/typescriptbasic2/">TypeScript(二) 基本语法</a></h3><h3 id="TypeScript-三-TS-中补充的六个类型"><a href="#TypeScript-三-TS-中补充的六个类型" class="headerlink" title="TypeScript(三) TS 中补充的六个类型"></a><a href="https://jsopy.gitee.io/2019/12/16/typescriptbasic3/">TypeScript(三) TS 中补充的六个类型</a></h3><h3 id="TypeScript-四-Symbol-ES6-新基础类型"><a href="#TypeScript-四-Symbol-ES6-新基础类型" class="headerlink" title="TypeScript(四) Symbol-ES6 新基础类型"></a><a href="https://jsopy.gitee.io/2019/12/17/typescriptbasic4/">TypeScript(四) Symbol-ES6 新基础类型</a></h3><h3 id="TypeScript-五-Typescript-深入学习枚举"><a href="#TypeScript-五-Typescript-深入学习枚举" class="headerlink" title="TypeScript(五) Typescript 深入学习枚举"></a><a href="https://jsopy.gitee.io/2019/12/18/typescriptbasic5/">TypeScript(五) Typescript 深入学习枚举</a></h3><h3 id="TypeScript-六-使用类型断言达到预期"><a href="#TypeScript-六-使用类型断言达到预期" class="headerlink" title="TypeScript(六) 使用类型断言达到预期"></a><a href="https://jsopy.gitee.io/2019/12/19/typescriptbasic6/">TypeScript(六) 使用类型断言达到预期</a></h3><h3 id="TypeScript-七-使用接口几乎可以定义任何结构"><a href="#TypeScript-七-使用接口几乎可以定义任何结构" class="headerlink" title="TypeScript(七) 使用接口几乎可以定义任何结构"></a><a href="https://jsopy.gitee.io/2019/12/20/typescriptbasic7/">TypeScript(七) 使用接口几乎可以定义任何结构</a></h3><h3 id="TypeScript-八-接口的高阶用法"><a href="#TypeScript-八-接口的高阶用法" class="headerlink" title="TypeScript(八) 接口的高阶用法"></a><a href="https://jsopy.gitee.io/2019/12/21/typescriptbasic8/">TypeScript(八) 接口的高阶用法</a></h3><h3 id="TypeScript-九-为函数和函数参数定义类型"><a href="#TypeScript-九-为函数和函数参数定义类型" class="headerlink" title="TypeScript(九) 为函数和函数参数定义类型"></a><a href="https://jsopy.gitee.io/2019/12/22/typescriptbasic9/">TypeScript(九) 为函数和函数参数定义类型</a></h3><h3 id="TypeScript-十-使用泛型拯救你的-any"><a href="#TypeScript-十-使用泛型拯救你的-any" class="headerlink" title="TypeScript(十) 使用泛型拯救你的 any"></a><a href="https://jsopy.gitee.io/2019/12/23/typescriptbasic10/">TypeScript(十) 使用泛型拯救你的 any</a></h3><h3 id="TypeScript-十一-TS-中的类与-ES-标准的差异"><a href="#TypeScript-十一-TS-中的类与-ES-标准的差异" class="headerlink" title="TypeScript(十一) TS 中的类与 ES 标准的差异"></a><a href="https://jsopy.gitee.io/2019/12/24/typescriptbasic11/">TypeScript(十一) TS 中的类与 ES 标准的差异</a></h3><h3 id="TypeScript-十二-Vue-中使用-TS"><a href="#TypeScript-十二-Vue-中使用-TS" class="headerlink" title="TypeScript(十二) Vue 中使用 TS"></a><a href="https://jsopy.gitee.io/2019/12/25/typescriptbasic12/">TypeScript(十二) Vue 中使用 TS</a></h3>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 基础笔记(React 路由 版本)(二十一)</title>
      <link href="/2019/12/13/reactbasic21/"/>
      <url>/2019/12/13/reactbasic21/</url>
      
        <content type="html"><![CDATA[<h2 id="React-路由必须要用-React-router-dom"><a href="#React-路由必须要用-React-router-dom" class="headerlink" title="React 路由必须要用 React-router-dom"></a>React 路由必须要用 React-router-dom</h2><pre class="line-numbers language-javascript"><code class="language-javascript">npm i  react<span class="token operator">-</span>router<span class="token operator">-</span>dom <span class="token operator">-</span>S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="基础版本"><a href="#基础版本" class="headerlink" title="基础版本"></a>基础版本</h2><h3 id="1-在要使用的路由页面使用-BrowserRouter-Route"><a href="#1-在要使用的路由页面使用-BrowserRouter-Route" class="headerlink" title="(1)在要使用的路由页面使用 BrowserRouter,Route"></a>(1)在要使用的路由页面使用 BrowserRouter,Route</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter<span class="token punctuation">,</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>引用 BrowersRouter,Route 组件 Router 里面有四个属性 一个 path 一个 render 渲染函数,一个 exact 表示绝对匹配 一个 component 渲染组件</p></li><li><p>不加 exact 的话 你访问/detail 的时候它会把前面的主页也渲染出来，路径不是绝对匹配</p></li><li><p>Route 相当于 Vue 里面的 router-view</p></li><li><p>代码如下</p></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Link<span class="token punctuation">,</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">import</span> List <span class="token keyword">from</span> <span class="token string">'../layout/home-page-layout'</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>BrowserRouter<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>Route      path<span class="token operator">=</span><span class="token string">"/"</span>      render<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>主页<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>      exact    <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/detail"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>List<span class="token punctuation">}</span> exact <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>BrowserRouter<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-组件里面使用的时候跳转用-Link-最好使用-NavLink-后面会介绍"><a href="#2-组件里面使用的时候跳转用-Link-最好使用-NavLink-后面会介绍" class="headerlink" title="(2)组件里面使用的时候跳转用 Link(最好使用 NavLink,后面会介绍)"></a>(2)组件里面使用的时候跳转用 Link(最好使用 NavLink,后面会介绍)</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>Router<span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>ul<span class="token operator">></span>            <span class="token operator">&lt;</span>li<span class="token operator">></span>              <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>            <span class="token operator">&lt;</span>li<span class="token operator">></span>              <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/other"</span><span class="token operator">></span>其他页<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-完整版"><a href="#3-完整版" class="headerlink" title="(3) 完整版"></a>(3) 完整版</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">class</span> <span class="token class-name">Home</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token keyword">this</span> a Home page<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Other</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token keyword">this</span> a Other page<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>Router<span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>ul<span class="token operator">></span>            <span class="token operator">&lt;</span>li<span class="token operator">></span>              <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/home"</span><span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>            <span class="token operator">&lt;</span>li<span class="token operator">></span>              <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/other"</span><span class="token operator">></span>其他页<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>          <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/home"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>          <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/other"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Other<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Main <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="路由传递参数"><a href="#路由传递参数" class="headerlink" title="路由传递参数"></a>路由传递参数</h2><h3 id="params"><a href="#params" class="headerlink" title="params"></a>params</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/path/:name'</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Path<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>link to<span class="token operator">=</span><span class="token string">"/path/2"</span><span class="token operator">></span>xxx<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>pathname<span class="token punctuation">:</span><span class="token string">"/path/"</span> <span class="token operator">+</span> name<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>读取参数用<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>match<span class="token punctuation">.</span>params<span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>好处刷新地址栏参数依旧存在,坏处只能传递字符串，URL 过长</p></blockquote><h3 id="query"><a href="#query" class="headerlink" title="query"></a>query</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/query'</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Query<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> pathname <span class="token punctuation">:</span> <span class="token string">' /query'</span> <span class="token punctuation">,</span> query <span class="token punctuation">:</span> <span class="token punctuation">{</span> name <span class="token punctuation">:</span> <span class="token string">'sunny'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>pathname<span class="token punctuation">:</span><span class="token string">"/query"</span><span class="token punctuation">,</span>query<span class="token punctuation">:</span> <span class="token punctuation">{</span> name <span class="token punctuation">:</span> <span class="token string">'sunny'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>读取参数用<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>query<span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>好处 传参优雅 坏处刷新页面 参数消失</p></blockquote><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/sort '</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Sort<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> pathname <span class="token punctuation">:</span> <span class="token string">' /sort '</span> <span class="token punctuation">,</span> state <span class="token punctuation">:</span> <span class="token punctuation">{</span> name <span class="token punctuation">:</span> <span class="token string">'sunny'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>pathname<span class="token punctuation">:</span><span class="token string">"/sort "</span><span class="token punctuation">,</span>state <span class="token punctuation">:</span> <span class="token punctuation">{</span> name <span class="token punctuation">:</span> <span class="token string">'sunny'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>读取参数用<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>query<span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>好处坏处同 query</p></blockquote><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/web/departManange '</span> component<span class="token operator">=</span><span class="token punctuation">{</span>DepartManange<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>link to<span class="token operator">=</span><span class="token string">"web/departManange?tenantId=12121212"</span><span class="token operator">></span>xxx<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>pathname<span class="token punctuation">:</span><span class="token string">"/web/departManange?tenantId"</span> <span class="token operator">+</span> row<span class="token punctuation">.</span>tenantId<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>读取参数用<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>好坏处同 params</p></blockquote><blockquote><p>注意事项</p><ol><li>Router 里面只能出现一个子节点.</li><li>Link 必须放在 BrowserRouter 的里面否则不能用</li></ol></blockquote><h2 id="要是使用函数跳转的话-必须要在页面上引用-withRouter-否则不起作用-要是子路由获取参数也需要-withRouter"><a href="#要是使用函数跳转的话-必须要在页面上引用-withRouter-否则不起作用-要是子路由获取参数也需要-withRouter" class="headerlink" title="要是使用函数跳转的话,必须要在页面上引用 withRouter,否则不起作用,要是子路由获取参数也需要 withRouter"></a>要是使用函数跳转的话,必须要在页面上引用 withRouter,否则不起作用,要是子路由获取参数也需要 withRouter</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> Fragment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Toppic <span class="token keyword">as</span> Topwrapper <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../style'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> withRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span> <span class="token comment" spellcheck="true">//引入withRouter</span><span class="token keyword">class</span> <span class="token class-name">Toppic</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      showflag<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        _this<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          showflag<span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        _this<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          showflag<span class="token punctuation">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>showflag<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>Fragment<span class="token operator">></span>          <span class="token operator">&lt;</span>Topwrapper onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handletop<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>顶部<span class="token operator">&lt;</span><span class="token operator">/</span>Topwrapper<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span>      <span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">handletop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> pathname<span class="token punctuation">:</span> <span class="token string">'/detail'</span><span class="token punctuation">,</span> query<span class="token punctuation">:</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//重点看</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withRouter</span><span class="token punctuation">(</span>Toppic<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//暴露出去</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Switch-作用就是优先匹配，他要是找到第一个，后面的就不再匹配"><a href="#Switch-作用就是优先匹配，他要是找到第一个，后面的就不再匹配" class="headerlink" title="Switch 作用就是优先匹配，他要是找到第一个，后面的就不再匹配"></a>Switch 作用就是优先匹配，他要是找到第一个，后面的就不再匹配</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>Router<span class="token operator">></span>  <span class="token operator">&lt;</span>Switch<span class="token operator">></span>    <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Jsdemo<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/Jsdemob"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Jsdemob<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">/*canshu和aa是要传递的两个参数对应的名词*/</span>    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/Jsdemoc/:canshu/:aa"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Jsdemoc<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Redirect <span class="token keyword">from</span><span class="token operator">=</span><span class="token string">"/redirect"</span> to<span class="token operator">=</span><span class="token string">"/Jsdemob"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Route component<span class="token operator">=</span><span class="token punctuation">{</span>Error<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span> <span class="token comment" spellcheck="true">//这个一定要在所有连接最后</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="NavLink-标准-个人建议使用"><a href="#NavLink-标准-个人建议使用" class="headerlink" title="NavLink 标准 个人建议使用"></a>NavLink 标准 个人建议使用</h2><ul><li>Link 的属性他都有,他是 link 的一个特定的版本,会在匹配上当前的 URL 的时候给已经渲染的元素添加参数</li></ul><ol><li><p>activeClassName(string) 设置选中样式,默认值 active</p></li><li><p>activeStyle(object) 当前元素被选中时,为元素添加样式</p></li><li><p>exact(bool)为 true 时 只有当导致和完全匹配 class 和 style 才会用</p></li><li><p>strict(bool) 为 true 时,在确定为位置是否与当前 URL 匹配时，将考虑位置 pathname 后的斜线</p></li><li><p>isActive(func)判断链接是否激活额外逻辑的功能</p></li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>  BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span>  Route<span class="token punctuation">,</span>  Link<span class="token punctuation">,</span>  NavLink<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// activeClassName选中时样式为selected</span><span class="token operator">&lt;</span>NavLink  to<span class="token operator">=</span><span class="token string">"/faq"</span>  activeClassName<span class="token operator">=</span><span class="token string">"selected"</span><span class="token operator">></span>FAQs<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span><span class="token comment" spellcheck="true">// 选中时样式为activeStyle的样式设置</span><span class="token operator">&lt;</span>NavLink  to<span class="token operator">=</span><span class="token string">"/faq"</span>  activeStyle<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>    fontWeight<span class="token punctuation">:</span> <span class="token string">'bold'</span><span class="token punctuation">,</span>    color<span class="token punctuation">:</span> <span class="token string">'red'</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>FAQs<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span><span class="token comment" spellcheck="true">// 当event id为奇数的时候，激活链接</span><span class="token keyword">const</span> oddEvent <span class="token operator">=</span> <span class="token punctuation">(</span>match<span class="token punctuation">,</span> location<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> eventID <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>params<span class="token punctuation">.</span>eventID<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span>eventID<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> eventID <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>NavLink  to<span class="token operator">=</span><span class="token string">"/events/123"</span>  isActive<span class="token operator">=</span><span class="token punctuation">{</span>oddEvent<span class="token punctuation">}</span><span class="token operator">></span>Event <span class="token number">123</span><span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>Router 里面要有包裹层</p></li><li><p>NavLink 是链接,可以添加类名之类的</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 基础笔记(CSS react-transition-group 过渡动画 版本)(二十)</title>
      <link href="/2019/12/12/reactbasic20/"/>
      <url>/2019/12/12/reactbasic20/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-React-动画必须安装包-react-transition-group"><a href="#安装-React-动画必须安装包-react-transition-group" class="headerlink" title="安装 React 动画必须安装包 react-transition-group"></a>安装 React 动画必须安装包 react-transition-group</h2><pre class="line-numbers language-javascript"><code class="language-javascript">npm i react<span class="token operator">-</span>transition<span class="token operator">-</span>group <span class="token operator">-</span>S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="利用-CSSTransition-作为壳子套-html-标签"><a href="#利用-CSSTransition-作为壳子套-html-标签" class="headerlink" title="利用 CSSTransition 作为壳子套 html 标签"></a>利用 CSSTransition 作为壳子套 html 标签</h2><ul><li><p>in 表示开关是否执行</p></li><li><p>timeout 表示动画执行的时间</p></li><li><p>appear 表示是否一加载就执行</p></li><li><p>className 动画执行的名称</p></li><li><p>unmountOnExit 动画执行完节点消失</p></li><li><p>onEnter 表示钩子函数刚进入的时候，里面就一个参数 el</p></li><li><p>onEnter onEntering onEntered onExit onExiting onExited 钩子函数</p></li></ul><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">'./donghua.css'</span><span class="token keyword">class</span> <span class="token class-name">Donghua</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      flag<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>CSSTransition        <span class="token keyword">in</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>flag<span class="token punctuation">}</span>        timeout<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">2000</span><span class="token punctuation">}</span>        appear<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>        classNames<span class="token operator">=</span><span class="token string">"fade"</span>        unmountOnExit        onEnter<span class="token operator">=</span><span class="token punctuation">{</span>el <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">></span>        <span class="token operator">&lt;</span>Fragment<span class="token operator">></span>          <span class="token operator">&lt;</span>div<span class="token operator">></span>红色<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>CSSTransition<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="donghua-css"><a href="#donghua-css" class="headerlink" title="donghua.css"></a>donghua.css</h3><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.fade-enter</span>,<span class="token class">.fade-appear</span> </span><span class="token punctuation">{</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.fade-appear-active</span> </span><span class="token punctuation">{</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">80%</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">2</span>s linear<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.fade-enter-active</span> </span><span class="token punctuation">{</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">80%</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">2</span>s linear<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.fade-enter-done</span> </span><span class="token punctuation">{</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">80%</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.fade-exit</span> </span><span class="token punctuation">{</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">80%</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.fade-exit-active</span> </span><span class="token punctuation">{</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">2</span>s linear<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.fade-exit-done</span> </span><span class="token punctuation">{</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ReactCss-动画组合"><a href="#ReactCss-动画组合" class="headerlink" title="ReactCss 动画组合"></a>ReactCss 动画组合</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>TransitionGroup key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token operator">></span>  <span class="token operator">&lt;</span>CSSTransition    <span class="token keyword">in</span>    timeout<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">2000</span><span class="token punctuation">}</span>    appear<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>    classNames<span class="token operator">=</span><span class="token string">"fade"</span>    unmountOnExit    onEnter<span class="token operator">=</span><span class="token punctuation">{</span>el <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token operator">></span>    <span class="token operator">&lt;</span>List content<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span> index<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span> deletedate<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>deleteone<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>CSSTransition<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>TransitionGroup<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>react-transition-group 使用</p></li><li><p>react-transition-group 使用规则</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 基础笔记(CSS 样式冲突, 使用中间件 styled-components 版本)(十九)</title>
      <link href="/2019/12/11/reactbasic19/"/>
      <url>/2019/12/11/reactbasic19/</url>
      
        <content type="html"><![CDATA[<h1 id="React-基础笔记-CSS-样式冲突-使用中间件-styled-components-版本-十九"><a href="#React-基础笔记-CSS-样式冲突-使用中间件-styled-components-版本-十九" class="headerlink" title="React 基础笔记(CSS 样式冲突, 使用中间件 styled-components 版本)(十九)"></a>React 基础笔记(CSS 样式冲突, 使用中间件 styled-components 版本)(十九)</h1><blockquote><p>styled-components 他的作用就是怕组件里面个个 CSS 之间相互重叠，覆盖,犯冲突,所以引入了这个组件,因为它只对本组件管用</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-javascript"><code class="language-javascript">npm install <span class="token operator">--</span>save styled<span class="token operator">-</span>components<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><blockquote><p>用组件的形式编写 css</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//必须要引入</span><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token keyword">export</span> <span class="token keyword">const</span> HomeWraper <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token string">`  width: 100%;  height: 100px;  border-bottom: 1px solid #ccc;`</span></span><span class="token keyword">export</span> <span class="token keyword">const</span> ContentWraper <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token string">`  max-width: 1200px;  height: 100px;  margin: 0 auto;  border-bottom: 0px;`</span></span><span class="token keyword">export</span> <span class="token keyword">const</span> LogoWraper <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token string">`  width: 100px;  height: 80px;  float: left;  margin-top: 10px;  margin-left: 20px;`</span></span><span class="token keyword">export</span> <span class="token keyword">const</span> MiddleWraper <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token string">`  width: 880px;  height: 100px;  float: left;`</span></span><span class="token keyword">export</span> <span class="token keyword">const</span> RightWraper <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token string">`  width: 100px;  height: 100px;  float: left;`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>上面的代码定义了 5 个组件 HomeWraper,ContentWraper,LogoWraper,MiddleWraper,RightWraper,这样每一个组件对应唯一的样式，不出现污染的状况</li></ul><blockquote><p>组件里面这样写</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> Fragment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  HomeWraper<span class="token punctuation">,</span>  ContentWraper<span class="token punctuation">,</span>  LogoWraper<span class="token punctuation">,</span>  MiddleWraper<span class="token punctuation">,</span>  RightWraper<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../css/header'</span><span class="token keyword">class</span> <span class="token class-name">Header</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>Fragment<span class="token operator">></span>        <span class="token operator">&lt;</span>HomeWraper<span class="token operator">></span>          <span class="token operator">&lt;</span>ContentWraper<span class="token operator">></span>            <span class="token operator">&lt;</span>LogoWraper <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>MiddleWraper <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>RightWraper <span class="token operator">/</span><span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>ContentWraper<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>HomeWraper<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Header<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="全局样式"><a href="#全局样式" class="headerlink" title="全局样式"></a>全局样式</h2><ul><li><p>styled-components 提供了 createGlobalStyle 可以设置全局样式</p></li><li><p>例如 下面就是简单版本的全局引入，里面有了 iconfont 请注意路径要匹配对</p></li><li><p>代码</p></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createGlobalStyle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token keyword">const</span> GrobalStyle <span class="token operator">=</span> createGlobalStyle<span class="token template-string"><span class="token string">`    html, body, div, span {    margin: 0;    padding: 0;    border: 0;    font-size: 100%;    font: inherit;    vertical-align: baseline;    }    /* HTML5 display-role reset for older browsers */    article, aside, details, figcaption, figure,    footer, header, hgroup, menu, nav, section {    display: block;    }    body {    line-height: 1;    background:red;    }    ol, ul {    list-style: none;    }    blockquote, q {    quotes: none;    }    blockquote:before, blockquote:after,    q:before, q:after {    content: '';    content: none;    }    table {    border-collapse: collapse;    border-spacing: 0;    }  @font-face {font-family: "iconfont";  src: url('../iconfont/iconfont.eot?t=1563781351915'); /* IE9 */}.iconfont {  font-family: "iconfont" !important;  font-size: 16px;  font-style: normal;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}.icon-tupian:before {  content: "\e643";}.icon-fanhui:before {  content: "\e624";}.icon-jiantouxia:before {  content: "\e62d";}.icon-sousuo:before {  content: "\e632";}`</span></span><span class="token keyword">export</span> <span class="token keyword">default</span> GrobalStyle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>页面上引入全局样式的时候千万注意 它也是组件，但是不能包含其他组件 必须优先引入，在 app.js 里面 Global 必须放在外面</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Global <span class="token keyword">from</span> <span class="token string">'./pages/commonstyle'</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>Fragment<span class="token operator">></span>        <span class="token operator">&lt;</span>Global <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>PageUi          inputValue<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>inputValue<span class="token punctuation">}</span>          handchange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handchange<span class="token punctuation">}</span>          handClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handClick<span class="token punctuation">}</span>          deleteItem<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>deleteItem<span class="token punctuation">}</span>          list<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>list<span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Index <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="styled-components-规则"><a href="#styled-components-规则" class="headerlink" title="styled-components 规则"></a>styled-components 规则</h2><h3 id="背景图片引入"><a href="#背景图片引入" class="headerlink" title="背景图片引入"></a>背景图片引入</h3><ul><li>${}里面放的变量</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token keyword">import</span> Middleimg <span class="token keyword">from</span> <span class="token string">'../../../images/2019-07-20_200948.png'</span><span class="token keyword">export</span> <span class="token keyword">const</span> MiddleWraper <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token string">`  width: 880px;  height: 100px;  float: left;  background: url(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Middleimg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">);`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组件传值的形式也可以"><a href="#组件传值的形式也可以" class="headerlink" title="组件传值的形式也可以"></a>组件传值的形式也可以</h3><ul><li><p>组件传值也只能是地址不能是相对路径</p></li><li><p>父组件</p></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> Fragment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> Header <span class="token keyword">from</span> <span class="token string">'./components/Header.js'</span><span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      imgurl<span class="token punctuation">:</span>        <span class="token string">'http://fuss10.elemecdn.com/c/cd/c12745ed8a5171e13b427dbc39401jpeg.jpeg?imageView2/1/w/114/h/114'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>Fragment<span class="token operator">></span>        <span class="token operator">&lt;</span>Header imgurl<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>imgurl<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Index<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>子组件 里面把值放到属性里面</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>RightWraper imgurl<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>imgurl<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>然后 css 里面变量就是$(props)=&gt;{props.imgurl}</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> RightWraper <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token string">`  width: 100px;  height: 100px;  float: left;  background-image: url(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props <span class="token operator">=</span><span class="token operator">></span> props<span class="token punctuation">.</span>imgurl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">);  background-size: contain;`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="标签属性"><a href="#标签属性" class="headerlink" title="标签属性"></a>标签属性</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> NavSearch <span class="token operator">=</span> styled<span class="token punctuation">.</span>input<span class="token punctuation">.</span><span class="token function">attrs</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    placeholder<span class="token punctuation">:</span> <span class="token string">'搜索'</span>，    type<span class="token punctuation">:</span> <span class="token string">'text'</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token template-string"><span class="token string">`  width: 160px;  height: 38px;  margin-top: 9px;  padding: 0 40px 0 20px;  box-sizing: border-box;  background-color: #eee;  outline: none;  border: none;  border-radius: 19px;  color: #666;  &amp;::placeholder {    color: #999;  }  &amp;.focused {    width: 240px;  }`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li><p>比如一个按钮 button 只想改变颜色,大小宽度和高度都不变</p></li><li><p>styled(Button)</p></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> Button <span class="token operator">=</span> styled<span class="token punctuation">.</span>button<span class="token template-string"><span class="token string">`  width: 50px;  height: 50px;  float: left;  background: black;  color: white;`</span></span><span class="token keyword">export</span> <span class="token keyword">const</span> Button1 <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span class="token template-string"><span class="token string">`  background: red;  color: yellow;`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>利用 styled-components 这样可以避免 css 混淆</p></li><li><p>styled-components 法则</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 基础笔记(redux 拆分成多个小 redux 版本)(十八)</title>
      <link href="/2019/12/10/reactbasic18/"/>
      <url>/2019/12/10/reactbasic18/</url>
      
        <content type="html"><![CDATA[<h1 id="React-基础笔记-redux-拆分成多个小-redux-版本-十八"><a href="#React-基础笔记-redux-拆分成多个小-redux-版本-十八" class="headerlink" title="React 基础笔记(redux 拆分成多个小 redux 版本)(十八)"></a>React 基础笔记(redux 拆分成多个小 redux 版本)(十八)</h1><blockquote><p>有时候逻辑非常复杂我们需要将各个部件分成多个 reducer 这样好区分</p></blockquote><h2 id="建立组件里面小的-reducer-文件"><a href="#建立组件里面小的-reducer-文件" class="headerlink" title="建立组件里面小的 reducer 文件"></a>建立组件里面小的 reducer 文件</h2><h3 id="在每个组件下面建立文件夹起名叫-reducer-文件夹里面创建个-reducer-js-文件"><a href="#在每个组件下面建立文件夹起名叫-reducer-文件夹里面创建个-reducer-js-文件" class="headerlink" title="在每个组件下面建立文件夹起名叫 reducer 文件夹里面创建个 reducer.js 文件"></a>在每个组件下面建立文件夹起名叫 reducer 文件夹里面创建个 reducer.js 文件</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ACTION_FOCUSED_CHANGE <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../../../store/actionTypes'</span><span class="token keyword">const</span> defaultState <span class="token operator">=</span> <span class="token punctuation">{</span>  focused<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> defaultState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> ACTION_FOCUSED_CHANGE<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> newState <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>    newState<span class="token punctuation">.</span>focused <span class="token operator">=</span> <span class="token operator">!</span>newState<span class="token punctuation">.</span>focused    <span class="token keyword">return</span> newState  <span class="token punctuation">}</span>  <span class="token keyword">return</span> state<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改总的-reducer-文件，引入小组件的-reducer-文件"><a href="#修改总的-reducer-文件，引入小组件的-reducer-文件" class="headerlink" title="修改总的 reducer 文件，引入小组件的 reducer 文件"></a>修改总的 reducer 文件，引入小组件的 reducer 文件</h3><ul><li>必须借助 redux 里面的 combineReducers</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token keyword">import</span> headerReducer <span class="token keyword">from</span> <span class="token string">'../commoncomponents/header/reducer/reducer'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  header<span class="token punctuation">:</span> headerReducer<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改组件里面的文件-引入-state-的时候变量名称必须变了-重要"><a href="#修改组件里面的文件-引入-state-的时候变量名称必须变了-重要" class="headerlink" title="修改组件里面的文件 引入 state 的时候变量名称必须变了(重要)"></a>修改组件里面的文件 引入 state 的时候变量名称必须变了(重要)</h3><ul><li>原先 state.focuesd 现在变成了 state.header.focused 对应就是总的 redux 起的名字</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mapStateToProps <span class="token operator">=</span> state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    focused<span class="token punctuation">:</span> state<span class="token punctuation">.</span>header<span class="token punctuation">.</span>focused <span class="token comment" spellcheck="true">//要改变了</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> mapDispatchToProps <span class="token operator">=</span> dispatch <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token function">handlefocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token function">METHOD_ACTION_CHANGEFOCUSED</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">dispatch</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">handleblur</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token function">METHOD_ACTION_CHANGEFOCUSED</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">dispatch</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>  mapStateToProps<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//这里面放的是数据</span>  mapDispatchToProps <span class="token comment" spellcheck="true">//里面放的是操作的数据的方法</span><span class="token punctuation">)</span><span class="token punctuation">(</span>HeaderWrap<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.要是业务量大了,就必须要拆分</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 基础笔记(Redux-redux 版本)(十七)</title>
      <link href="/2019/12/09/reactbasic17/"/>
      <url>/2019/12/09/reactbasic17/</url>
      
        <content type="html"><![CDATA[<h1 id="React-基础笔记-Redux-redux-版本-十七"><a href="#React-基础笔记-Redux-redux-版本-十七" class="headerlink" title="React 基础笔记(Redux-redux 版本)(十七)"></a>React 基础笔记(Redux-redux 版本)(十七)</h1><blockquote><p>他前面的步骤和基础版本差不多，也得创建仓库和模板,他的作用就是把一些需要处理公共数据的逻辑放到组件的外面,这样组件就是变成 UI 组件</p></blockquote><h2 id="1-使用-Redux-就必须要提前安装"><a href="#1-使用-Redux-就必须要提前安装" class="headerlink" title="(1)使用 Redux 就必须要提前安装"></a>(1)使用 Redux 就必须要提前安装</h2><pre class="line-numbers language-javascript"><code class="language-javascript">npm i redux <span class="token operator">-</span>S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-安装-React-redux"><a href="#2-安装-React-redux" class="headerlink" title="(2) 安装 React-redux"></a>(2) 安装 React-redux</h2><pre class="line-numbers language-javascript"><code class="language-javascript">npm i react<span class="token operator">-</span>redux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-在-src-目录下创建一个-store-文件夹-里面创建一个-index-js-文件作为公共仓库"><a href="#3-在-src-目录下创建一个-store-文件夹-里面创建一个-index-js-文件作为公共仓库" class="headerlink" title="(3)在 src 目录下创建一个 store 文件夹,里面创建一个 index.js 文件作为公共仓库"></a>(3)在 src 目录下创建一个 store 文件夹,里面创建一个 index.js 文件作为公共仓库</h2><ul><li>公共模板</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token comment" spellcheck="true">// 引入reducer</span><span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">'./reducer'</span><span class="token comment" spellcheck="true">// 放入reducer</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-创建-reducer-文件他里面接受两个参数-state-action-state-就是获取所有的公共数据"><a href="#4-创建-reducer-文件他里面接受两个参数-state-action-state-就是获取所有的公共数据" class="headerlink" title="(4)创建 reducer 文件他里面接受两个参数(state,action) state 就是获取所有的公共数据"></a>(4)创建 reducer 文件他里面接受两个参数(state,action) state 就是获取所有的公共数据</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> CHANGE_VALUE<span class="token punctuation">,</span> CLICK_CHANGE<span class="token punctuation">,</span> DELETE_ITEM <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./actiontypes'</span><span class="token keyword">const</span> defaultState <span class="token operator">=</span> <span class="token punctuation">{</span>  inputValue<span class="token punctuation">:</span> <span class="token string">'123'</span><span class="token punctuation">,</span>  list<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">'Racing car sprays burning fuel into crowd.'</span><span class="token punctuation">,</span>    <span class="token string">'Japanese princess to wed commoner.'</span><span class="token punctuation">,</span>    <span class="token string">'Australian walks 100km after outback crash.'</span><span class="token punctuation">,</span>    <span class="token string">'Man charged over missing wedding girl.'</span><span class="token punctuation">,</span>    <span class="token string">'Los Angeles battles huge wildfires.'</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> defaultState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//这里判断action的type然后在返回state</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> CHANGE_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> newresult <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//必须要重新生成一个新的对象,也不能使用Object.asign这样有的时候不起作用,而且每个判断里面必须有返回值</span>    newresult<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> action<span class="token punctuation">.</span>value    <span class="token keyword">return</span> newresult  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> CLICK_CHANGE<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> newState <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newData<span class="token punctuation">.</span>inputValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      newData<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newData<span class="token punctuation">.</span>inputValue<span class="token punctuation">)</span>      newData<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> <span class="token string">''</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newData  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 这里就是删除方法,必须返回新数据</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> DELETE_ITEM<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> newState <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>    newData<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> newData  <span class="token punctuation">}</span>  <span class="token keyword">return</span> state<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-调试的时候要借助-redux-工具-store-里面必须要加入这句话-window-开头的"><a href="#5-调试的时候要借助-redux-工具-store-里面必须要加入这句话-window-开头的" class="headerlink" title="(5)调试的时候要借助 redux 工具,store 里面必须要加入这句话 window 开头的"></a>(5)调试的时候要借助 redux 工具,store 里面必须要加入这句话 window 开头的</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token comment" spellcheck="true">//引入reducer</span><span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">'./reducer'</span><span class="token comment" spellcheck="true">//放入reducer</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>  reducer<span class="token punctuation">,</span>  window<span class="token punctuation">.</span>__REDUX_DEVTOOLS_EXTENSION__ <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span><span class="token function">__REDUX_DEVTOOLS_EXTENSION__</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这样后端基本上完事，下面就是前台的</p></blockquote><h2 id="6-在-index-js-第一个渲染的时候提供一个壳子，让所有的组件都能使用-store"><a href="#6-在-index-js-第一个渲染的时候提供一个壳子，让所有的组件都能使用-store" class="headerlink" title="(6) 在 index.js 第一个渲染的时候提供一个壳子，让所有的组件都能使用 store"></a>(6) 在 index.js 第一个渲染的时候提供一个壳子，让所有的组件都能使用 store</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">import</span> TodoList <span class="token keyword">from</span> <span class="token string">'./Todolist'</span><span class="token comment" spellcheck="true">//引入react-redux 提供的一个标签</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store/index'</span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token comment" spellcheck="true">// {Todolist组件还有下面的组件都可以使用store}</span>  <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator">&lt;</span>TodoList <span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* {类似a组件之类的} */</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* &lt;a>&lt;/a> */</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span><span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>App<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-组件里面使用"><a href="#7-组件里面使用" class="headerlink" title="(7) 组件里面使用"></a>(7) 组件里面使用</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//必须要引入connect</span><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token comment" spellcheck="true">//然后在类的外面定义两个常量,两个常量都是方法,返回的都是对象</span><span class="token keyword">const</span> mapStateToProps <span class="token operator">=</span> state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    inputValue<span class="token punctuation">:</span> state<span class="token punctuation">.</span>inputValue<span class="token punctuation">,</span>    list<span class="token punctuation">:</span> state<span class="token punctuation">.</span>list  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> mapDispatchToProps <span class="token operator">=</span> dispatch <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token function">handleChange</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> value <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value      <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">'change_value'</span><span class="token punctuation">,</span>        value      <span class="token punctuation">}</span>      <span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">changeList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> action <span class="token operator">=</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">'change_list'</span>      <span class="token punctuation">}</span>      <span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">deleteItem</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> action <span class="token operator">=</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">'deleteItem'</span><span class="token punctuation">,</span>        value<span class="token punctuation">:</span> index      <span class="token punctuation">}</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>      <span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//最后利用store挂钩</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>  mapStateToProps<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//这里面放的是数据</span>  mapDispatchToProps <span class="token comment" spellcheck="true">//里面放的是操作的数据的方法</span><span class="token punctuation">)</span><span class="token punctuation">(</span>TodoList<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-完整版本"><a href="#8-完整版本" class="headerlink" title="(8) 完整版本"></a>(8) 完整版本</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> Fragment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token comment" spellcheck="true">// import store from './store/index'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token keyword">class</span> <span class="token class-name">TodoList</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>      changeList<span class="token punctuation">,</span>      inputValue<span class="token punctuation">,</span>      handleChange<span class="token punctuation">,</span>      list<span class="token punctuation">,</span>      deleteItem    <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>Fragment<span class="token operator">></span>        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* {做完了映射,里面的数据就是继承了,因为最开始有个标签，他的级别高} */</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>input value<span class="token operator">=</span><span class="token punctuation">{</span>inputValue<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>handleChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span>changeList<span class="token punctuation">}</span><span class="token operator">></span>          点击我        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>ul<span class="token operator">></span>          <span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>              <span class="token operator">&lt;</span>li                key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span>                onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                  <span class="token function">deleteItem</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span>              <span class="token operator">></span>                <span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span>              <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>            <span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//第一步映射把state数据映射到公共数据上</span><span class="token keyword">const</span> mapStateToProps <span class="token operator">=</span> state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    inputValue<span class="token punctuation">:</span> state<span class="token punctuation">.</span>inputValue<span class="token punctuation">,</span>    list<span class="token punctuation">:</span> state<span class="token punctuation">.</span>list  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> mapDispatchToProps <span class="token operator">=</span> dispatch <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token function">handleChange</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> value <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value      <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">'change_value'</span><span class="token punctuation">,</span>        value      <span class="token punctuation">}</span>      <span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">changeList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> action <span class="token operator">=</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">'change_list'</span>      <span class="token punctuation">}</span>      <span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">deleteItem</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> action <span class="token operator">=</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">'deleteItem'</span><span class="token punctuation">,</span>        value<span class="token punctuation">:</span> index      <span class="token punctuation">}</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>      <span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//导出这里要变化了,它的意思就是TodoList和store做链接</span><span class="token comment" spellcheck="true">//第二步连接</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>  mapStateToProps<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//这里面放的是数据</span>  mapDispatchToProps <span class="token comment" spellcheck="true">//里面放的是操作的数据的方法</span><span class="token punctuation">)</span><span class="token punctuation">(</span>TodoList<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>react-redux 使用流程</li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 基础笔记(Redux sage 版本)(十六)</title>
      <link href="/2019/12/08/reactbasic16/"/>
      <url>/2019/12/08/reactbasic16/</url>
      
        <content type="html"><![CDATA[<h1 id="React-基础笔记-Redux-sage-版本-十六"><a href="#React-基础笔记-Redux-sage-版本-十六" class="headerlink" title="React 基础笔记(Redux sage 版本)(十六)"></a>React 基础笔记(Redux sage 版本)(十六)</h1><blockquote><p>Saga 和 chunk 不一样。thunk 是子弹形成前封装,Saga 是子弹发射出去后封装，相当于多了一步</p></blockquote><h2 id="1-安装-redux"><a href="#1-安装-redux" class="headerlink" title="(1) 安装 redux"></a>(1) 安装 redux</h2><pre class="line-numbers language-javascript"><code class="language-javascript"> npm i redux <span class="token operator">-</span>S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-安装-redux-saga-插件"><a href="#2-安装-redux-saga-插件" class="headerlink" title="(2) 安装 redux-saga 插件"></a>(2) 安装 redux-saga 插件</h2><pre class="line-numbers language-javascript"><code class="language-javascript">npm i redux<span class="token operator">-</span>saga <span class="token operator">-</span>S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-建立仓库模板"><a href="#3-建立仓库模板" class="headerlink" title="(3)建立仓库模板"></a>(3)建立仓库模板</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> applyMiddleware<span class="token punctuation">,</span> compose <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token keyword">import</span> createSagaMiddleware <span class="token keyword">from</span> <span class="token string">'redux-saga'</span><span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">'./reducer'</span><span class="token keyword">import</span> mySaga <span class="token keyword">from</span> <span class="token string">'./saga'</span><span class="token comment" spellcheck="true">// create the saga middleware</span><span class="token keyword">const</span> sagaMiddleware <span class="token operator">=</span> <span class="token function">createSagaMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// mount it on the Store</span><span class="token keyword">const</span> composeEnhancers <span class="token operator">=</span>  <span class="token keyword">typeof</span> window <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>__REDUX_DEVTOOLS_EXTENSION_COMPOSE__    <span class="token operator">?</span> window<span class="token punctuation">.</span><span class="token function">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">:</span> compose<span class="token keyword">const</span> enhancer <span class="token operator">=</span> <span class="token function">composeEnhancers</span><span class="token punctuation">(</span><span class="token function">applyMiddleware</span><span class="token punctuation">(</span>sagaMiddleware<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> enhancer<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// then run the saga</span>sagaMiddleware<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>mySaga<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-新建-saga-文件-saga-子弹合并工厂"><a href="#4-新建-saga-文件-saga-子弹合并工厂" class="headerlink" title="(4)新建 saga 文件,saga 子弹合并工厂"></a>(4)新建 saga 文件,saga 子弹合并工厂</h2><ul><li>可以先写 yield 函数,里面就是 console.log 值</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> put<span class="token punctuation">,</span> takeEvery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux-saga/effects'</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">initlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>"执行了<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">mySaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">yield</span> <span class="token function">takeEvery</span><span class="token punctuation">(</span>MAKE_INIT<span class="token punctuation">,</span> initlist<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> mySaga<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>正式文件</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> put<span class="token punctuation">,</span> takeEvery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux-saga/effects'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> MAKE_INIT <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./actiontypes'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ACTION_INIT_LIST <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./actionCreater'</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">initlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">yield</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/api/data1'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//必须有yield</span>  <span class="token keyword">let</span> data <span class="token operator">=</span> value<span class="token punctuation">.</span>data  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">ACTION_INIT_LIST</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//子弹做好了</span>  <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//必须有yield</span><span class="token punctuation">}</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">mySaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">yield</span> <span class="token function">takeEvery</span><span class="token punctuation">(</span>MAKE_INIT<span class="token punctuation">,</span> initlist<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> mySaga<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-reducer-文件"><a href="#5-reducer-文件" class="headerlink" title="(5) reducer 文件"></a>(5) reducer 文件</h2><pre class="line-numbers language-javascript"><code class="language-javascript">mport <span class="token punctuation">{</span> CHANGE_VALUE<span class="token punctuation">,</span> CLICK_CHANGE<span class="token punctuation">,</span> DELETE_ITEM <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./actiontypes'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> defaultState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> CHANGE_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> newresult <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>    newresult<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> action<span class="token punctuation">.</span>value    <span class="token keyword">return</span> newresult  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> CLICK_CHANGE<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> newState <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newData<span class="token punctuation">.</span>inputValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      newData<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newData<span class="token punctuation">.</span>inputValue<span class="token punctuation">)</span>      newData<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> <span class="token string">''</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newData  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 这里就是删除方法,必须返回新数据</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> DELETE_ITEM<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> newState <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>    newData<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> newData  <span class="token punctuation">}</span>  <span class="token keyword">return</span> state<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-actiontype-js-和-actioncreater-js"><a href="#6-actiontype-js-和-actioncreater-js" class="headerlink" title="(6) actiontype.js 和 actioncreater.js"></a>(6) actiontype.js 和 actioncreater.js</h2><ul><li>actioncreater.js</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> CHANGE_VALUE<span class="token punctuation">,</span> CLICK_CHANGE<span class="token punctuation">,</span> DELETE_ITEM <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./actiontypes'</span><span class="token keyword">export</span> <span class="token keyword">const</span> ACTION_CHANGE_VALUE <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> CHANGE_VALUE<span class="token punctuation">,</span>    value  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> ACTION_CLICK_CHANGE <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> CLICK_CHANGE  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> ACTION_DELETE_ITEM <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> DELETE_ITEM<span class="token punctuation">,</span>    value  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>actiontype.js</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> CHANGE_VALUE <span class="token operator">=</span> <span class="token string">'change_value'</span><span class="token keyword">export</span> <span class="token keyword">const</span> CLICK_CHANGE <span class="token operator">=</span> <span class="token string">'click_change'</span><span class="token keyword">export</span> <span class="token keyword">const</span> DELETE_ITEM <span class="token operator">=</span> <span class="token string">'delete_item'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="7-在组件里面使用"><a href="#7-在组件里面使用" class="headerlink" title="(7)在组件里面使用"></a>(7)在组件里面使用</h2><ul><li>在构造函数里面监听数据的改变</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//获取仓库的数据就是store.getState()</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 输出的结果就是indexValue,list</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>storechange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storechange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//监听,事件里面更新数据</span>    store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>storechange<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方法里面直接更新数据</span>  <span class="token function">storechange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>不推荐使用 saga 使用 thunk 足以</li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 基础笔记(Redux thunk 版本)(十五)</title>
      <link href="/2019/12/07/reactbasic15/"/>
      <url>/2019/12/07/reactbasic15/</url>
      
        <content type="html"><![CDATA[<h1 id="React-基础笔记-Redux-thunk-版本-十五"><a href="#React-基础笔记-Redux-thunk-版本-十五" class="headerlink" title="React 基础笔记(Redux thunk 版本)(十五)"></a>React 基础笔记(Redux thunk 版本)(十五)</h1><blockquote><p>React-redux 最主要的作用就是让 action 返回内容除了对象还可以是方法</p></blockquote><h2 id="1-安装-redux"><a href="#1-安装-redux" class="headerlink" title="(1) 安装 redux"></a>(1) 安装 redux</h2><pre class="line-numbers language-javascript"><code class="language-javascript"> npm i redux <span class="token operator">-</span>S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-安装-redux-thunk-插件"><a href="#2-安装-redux-thunk-插件" class="headerlink" title="(2) 安装 redux-thunk 插件"></a>(2) 安装 redux-thunk 插件</h2><pre class="line-numbers language-javascript"><code class="language-javascript">npm i redux<span class="token operator">-</span>thunk <span class="token operator">-</span>S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-使用中间件改变仓库-store-下面的-index-js"><a href="#3-使用中间件改变仓库-store-下面的-index-js" class="headerlink" title="(3) 使用中间件改变仓库 store 下面的 index.js"></a>(3) 使用中间件改变仓库 store 下面的 index.js</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> applyMiddleware<span class="token punctuation">,</span> compose <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token keyword">import</span> thunk <span class="token keyword">from</span> <span class="token string">'redux-thunk'</span><span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">'./reducer'</span><span class="token keyword">const</span> middleware <span class="token operator">=</span> <span class="token punctuation">[</span>thunk<span class="token punctuation">]</span><span class="token keyword">const</span> composeEnhancers <span class="token operator">=</span>  <span class="token keyword">typeof</span> window <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>__REDUX_DEVTOOLS_EXTENSION_COMPOSE__    <span class="token operator">?</span> window<span class="token punctuation">.</span><span class="token function">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">:</span> compose<span class="token keyword">const</span> enhancer <span class="token operator">=</span> <span class="token function">composeEnhancers</span><span class="token punctuation">(</span>  <span class="token function">applyMiddleware</span><span class="token punctuation">(</span><span class="token operator">...</span>middleware<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// other store enhancers if any</span><span class="token punctuation">)</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> enhancer<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-创建-reducer-文件他里面接受两个参数-state-action-state-就是获取所有的公共数据"><a href="#4-创建-reducer-文件他里面接受两个参数-state-action-state-就是获取所有的公共数据" class="headerlink" title="(4) 创建 reducer 文件他里面接受两个参数(state,action) state 就是获取所有的公共数据"></a>(4) 创建 reducer 文件他里面接受两个参数(state,action) state 就是获取所有的公共数据</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> CHANGE_VALUE<span class="token punctuation">,</span> CLICK_CHANGE<span class="token punctuation">,</span> DELETE_ITEM <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./actiontypes'</span><span class="token keyword">const</span> defaultState <span class="token operator">=</span> <span class="token punctuation">{</span>  inputValue<span class="token punctuation">:</span> <span class="token string">'123'</span><span class="token punctuation">,</span>  list<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">'Racing car sprays burning fuel into crowd.'</span><span class="token punctuation">,</span>    <span class="token string">'Japanese princess to wed commoner.'</span><span class="token punctuation">,</span>    <span class="token string">'Australian walks 100km after outback crash.'</span><span class="token punctuation">,</span>    <span class="token string">'Man charged over missing wedding girl.'</span><span class="token punctuation">,</span>    <span class="token string">'Los Angeles battles huge wildfires.'</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> defaultState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//这里判断action的type然后在返回state</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> CHANGE_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> newresult <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//必须要重新生成一个新的对象,也不能使用Object.asign这样有的时候不起作用,而且每个判断里面必须有返回值</span>    newresult<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> action<span class="token punctuation">.</span>value    <span class="token keyword">return</span> newresult  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> CLICK_CHANGE<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> newState <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newData<span class="token punctuation">.</span>inputValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      newData<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newData<span class="token punctuation">.</span>inputValue<span class="token punctuation">)</span>      newData<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> <span class="token string">''</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newData  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 这里就是删除方法,必须返回新数据</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> DELETE_ITEM<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> newState <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>    newData<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> newData  <span class="token punctuation">}</span>  <span class="token keyword">return</span> state<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-创建子弹两个文件-actiontypes-js-和-actionCreater-js-actionCreater-js-里面可以返回一个方法"><a href="#5-创建子弹两个文件-actiontypes-js-和-actionCreater-js-actionCreater-js-里面可以返回一个方法" class="headerlink" title="(5) 创建子弹两个文件 actiontypes.js 和 actionCreater.js ,actionCreater.js 里面可以返回一个方法"></a>(5) 创建子弹两个文件 actiontypes.js 和 actionCreater.js ,actionCreater.js 里面可以返回一个方法</h2><ul><li>actiontypes.js 可以理解为子弹名称</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> CHANGE_VALUE <span class="token operator">=</span> <span class="token string">'change_value'</span><span class="token keyword">export</span> <span class="token keyword">const</span> CLICK_CHANGE <span class="token operator">=</span> <span class="token string">'click_change'</span><span class="token keyword">export</span> <span class="token keyword">const</span> DELETE_ITEM <span class="token operator">=</span> <span class="token string">'delete_item'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>actionCreater.js 创建子弹</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> ACTION_INIT_LIST <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> CHANGE_VALUE<span class="token punctuation">,</span>    value  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//利用redux-thunk 返回方法</span><span class="token keyword">export</span> <span class="token keyword">const</span> ACTION_METHOD_INIT <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> dispatch <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/api/data1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>      <span class="token keyword">let</span> value <span class="token operator">=</span> res<span class="token punctuation">.</span>data <span class="token comment" spellcheck="true">//获取到数据</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">ACTION_INIT_LIST</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//把数据封装到actions里面</span>      <span class="token function">dispatch</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//然后发射出去</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-组件里面发射出去"><a href="#6-组件里面发射出去" class="headerlink" title="(6) 组件里面发射出去"></a>(6) 组件里面发射出去</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//先引入子弹</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  ACTION_CHANGE_VALUE<span class="token punctuation">,</span>  ACTION_CLICK_CHANGE<span class="token punctuation">,</span>  ACTION_DELETE_ITEM<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./store/actionCreater'</span> <span class="token operator">&lt;</span>Button  type<span class="token operator">=</span><span class="token string">"primary"</span>  style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>    width<span class="token punctuation">:</span> <span class="token string">'150px'</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">'30px'</span><span class="token punctuation">,</span>    marginTop<span class="token punctuation">:</span> <span class="token string">'20px'</span><span class="token punctuation">,</span>    marginLeft<span class="token punctuation">:</span> <span class="token string">'50px'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>  onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handClick<span class="token punctuation">}</span><span class="token operator">></span>  请输入文字<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span> <span class="token comment" spellcheck="true">// 发射出去子弹</span> <span class="token function">handClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">ACTION_METHOD_INIT</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-组件里面使用的时候"><a href="#7-组件里面使用的时候" class="headerlink" title="(7)组件里面使用的时候"></a>(7)组件里面使用的时候</h3><ul><li>在构造函数里面监听数据的改变</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//获取仓库的数据就是store.getState()</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 输出的结果就是indexValue,list</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>storechange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storechange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//监听,事件里面更新数据</span>    store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>storechange<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方法里面直接更新数据</span>  <span class="token function">storechange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>常用方法</li></ol><ul><li><p>store.dispatch(action) 发射出去 action</p></li><li><p>store.getState() 获取 redux 数据</p></li><li><p>store.subscribe() 监听数据变化的</p></li></ul><ol start="2"><li><p>创建公共数据流程</p></li><li><p>redux 里面可以返回一个函数 里面必须有 dispatch 发射出去</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 基础笔记(Redux 基础版本)(十四)</title>
      <link href="/2019/12/06/reactbasic14/"/>
      <url>/2019/12/06/reactbasic14/</url>
      
        <content type="html"><![CDATA[<h2 id="Redux-就是存放公共数据的地方"><a href="#Redux-就是存放公共数据的地方" class="headerlink" title="Redux 就是存放公共数据的地方"></a>Redux 就是存放公共数据的地方</h2><blockquote><p>Redux 里面有使用插件的比如 thunk,saga,react-redux 也有什么都不使用的。</p></blockquote><h2 id="Redux-基础版本"><a href="#Redux-基础版本" class="headerlink" title="Redux 基础版本"></a>Redux 基础版本</h2><ol><li>首先要建立仓库架构体系</li></ol><ul><li><p>(store,reduce,actiontypes,actioncreater) 4 个文件</p></li><li><p>actioncreater 里面是方法，必须返回一个对象. 里面就两个属性 一个 type 一个 value,value 可以没有</p></li></ul><ol start="2"><li><p>派发 action,利用 store.dispatch(action) actions 里面必须有 return 返回数据</p></li><li><p>监听数据的改变 store.subscribe(this.事件)</p></li><li><p>然后在上面的事件中更新数据 this.setState(store.getState())</p></li></ol><h3 id="1-使用-Redux-就必须要提前安装"><a href="#1-使用-Redux-就必须要提前安装" class="headerlink" title="(1)使用 Redux 就必须要提前安装"></a>(1)使用 Redux 就必须要提前安装</h3><pre class="line-numbers language-javascript"><code class="language-javascript">npm i redux <span class="token operator">-</span>S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-在-src-目录下创建一个-store-文件夹-里面创建一个-index-js-文件作为公共仓库"><a href="#2-在-src-目录下创建一个-store-文件夹-里面创建一个-index-js-文件作为公共仓库" class="headerlink" title="(2)在 src 目录下创建一个 store 文件夹,里面创建一个 index.js 文件作为公共仓库"></a>(2)在 src 目录下创建一个 store 文件夹,里面创建一个 index.js 文件作为公共仓库</h3><ul><li>公共模板</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token comment" spellcheck="true">// 引入reducer</span><span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">'./reducer'</span><span class="token comment" spellcheck="true">// 放入reducer</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-创建-reducer-文件他里面接受两个参数-state-action-state-就是获取所有的公共数据"><a href="#3-创建-reducer-文件他里面接受两个参数-state-action-state-就是获取所有的公共数据" class="headerlink" title="(3)创建 reducer 文件他里面接受两个参数(state,action) state 就是获取所有的公共数据"></a>(3)创建 reducer 文件他里面接受两个参数(state,action) state 就是获取所有的公共数据</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> CHANGE_VALUE<span class="token punctuation">,</span> CLICK_CHANGE<span class="token punctuation">,</span> DELETE_ITEM <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./actiontypes'</span><span class="token keyword">const</span> defaultState <span class="token operator">=</span> <span class="token punctuation">{</span>  inputValue<span class="token punctuation">:</span> <span class="token string">'123'</span><span class="token punctuation">,</span>  list<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">'Racing car sprays burning fuel into crowd.'</span><span class="token punctuation">,</span>    <span class="token string">'Japanese princess to wed commoner.'</span><span class="token punctuation">,</span>    <span class="token string">'Australian walks 100km after outback crash.'</span><span class="token punctuation">,</span>    <span class="token string">'Man charged over missing wedding girl.'</span><span class="token punctuation">,</span>    <span class="token string">'Los Angeles battles huge wildfires.'</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> defaultState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//这里判断action的type然后在返回state</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> CHANGE_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> newresult <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//必须要重新生成一个新的对象,也不能使用Object.asign这样有的时候不起作用,而且每个判断里面必须有返回值</span>    newresult<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> action<span class="token punctuation">.</span>value    <span class="token keyword">return</span> newresult  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> CLICK_CHANGE<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> newState <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newData<span class="token punctuation">.</span>inputValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      newData<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newData<span class="token punctuation">.</span>inputValue<span class="token punctuation">)</span>      newData<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> <span class="token string">''</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newData  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 这里就是删除方法,必须返回新数据</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> DELETE_ITEM<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> newState <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>    newData<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> newData  <span class="token punctuation">}</span>  <span class="token keyword">return</span> state<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-调试的时候要借助-redux-工具-store-里面必须要加入这句话-window-开头的"><a href="#4-调试的时候要借助-redux-工具-store-里面必须要加入这句话-window-开头的" class="headerlink" title="(4)调试的时候要借助 redux 工具,store 里面必须要加入这句话 window 开头的"></a>(4)调试的时候要借助 redux 工具,store 里面必须要加入这句话 window 开头的</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token comment" spellcheck="true">//引入reducer</span><span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">'./reducer'</span><span class="token comment" spellcheck="true">//放入reducer</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>  reducer<span class="token punctuation">,</span>  window<span class="token punctuation">.</span>__REDUX_DEVTOOLS_EXTENSION__ <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span><span class="token function">__REDUX_DEVTOOLS_EXTENSION__</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这样后端基本上完事，下面就是前台的</p></blockquote><h3 id="5-创建子弹两个文件-actiontypes-js-和-actionCreater-js"><a href="#5-创建子弹两个文件-actiontypes-js-和-actionCreater-js" class="headerlink" title="(5) 创建子弹两个文件 actiontypes.js 和 actionCreater.js"></a>(5) 创建子弹两个文件 actiontypes.js 和 actionCreater.js</h3><ul><li>actiontypes.js 可以理解为子弹名称</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> CHANGE_VALUE <span class="token operator">=</span> <span class="token string">'change_value'</span><span class="token keyword">export</span> <span class="token keyword">const</span> CLICK_CHANGE <span class="token operator">=</span> <span class="token string">'click_change'</span><span class="token keyword">export</span> <span class="token keyword">const</span> DELETE_ITEM <span class="token operator">=</span> <span class="token string">'delete_item'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>actioncreater.js 制造子弹(必须是方法，返回的是一个对象)</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> CHANGE_VALUE<span class="token punctuation">,</span> CLICK_CHANGE<span class="token punctuation">,</span> DELETE_ITEM <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./actiontypes'</span><span class="token keyword">export</span> <span class="token keyword">const</span> ACTION_CHANGE_VALUE <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> CHANGE_VALUE<span class="token punctuation">,</span>    value  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> ACTION_CLICK_CHANGE <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> CLICK_CHANGE  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> ACTION_DELETE_ITEM <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> DELETE_ITEM<span class="token punctuation">,</span>    value  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-组件里面发射出去"><a href="#6-组件里面发射出去" class="headerlink" title="(6)组件里面发射出去"></a>(6)组件里面发射出去</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//先引入子弹</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  ACTION_CHANGE_VALUE<span class="token punctuation">,</span>  ACTION_CLICK_CHANGE<span class="token punctuation">,</span>  ACTION_DELETE_ITEM<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./store/actionCreater'</span> <span class="token operator">&lt;</span>Button  type<span class="token operator">=</span><span class="token string">"primary"</span>  style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>    width<span class="token punctuation">:</span> <span class="token string">'150px'</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">'30px'</span><span class="token punctuation">,</span>    marginTop<span class="token punctuation">:</span> <span class="token string">'20px'</span><span class="token punctuation">,</span>    marginLeft<span class="token punctuation">:</span> <span class="token string">'50px'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>  onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handClick<span class="token punctuation">}</span><span class="token operator">></span>  请输入文字<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span> <span class="token comment" spellcheck="true">// 发射出去子弹</span> <span class="token function">handClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">ACTION_CLICK_CHANGE</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-组件里面使用的时候"><a href="#7-组件里面使用的时候" class="headerlink" title="(7)组件里面使用的时候"></a>(7)组件里面使用的时候</h3><ul><li>在构造函数里面监听数据的改变</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//获取仓库的数据就是store.getState()</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 输出的结果就是indexValue,list</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>storechange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storechange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//监听,事件里面更新数据</span>    store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>storechange<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方法里面直接更新数据</span>  <span class="token function">storechange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>常用方法</li></ol><ul><li><p>store.dispatch(action) 发射出去 action</p></li><li><p>store.getState() 获取 redux 数据</p></li><li><p>store.subscribe() 监听数据变化的</p></li></ul><ol start="2"><li>创建公共数据流程</li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 基础笔记(使用 PropTypes 进行类型检查)(十三)</title>
      <link href="/2019/12/05/reactbasic13/"/>
      <url>/2019/12/05/reactbasic13/</url>
      
        <content type="html"><![CDATA[<h2 id="要是想检查-PropTypes-必须配置-PropTypes-属性"><a href="#要是想检查-PropTypes-必须配置-PropTypes-属性" class="headerlink" title="要是想检查 PropTypes 必须配置 PropTypes 属性"></a>要是想检查 PropTypes 必须配置 PropTypes 属性</h2><ul><li>例如 子组件</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">'prop-types'</span><span class="token keyword">class</span> <span class="token class-name">Greeting</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>Greeting<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>propTypes 仅在开发模式下检查</p></blockquote><h2 id="PropTypes-验证不同类型的举例"><a href="#PropTypes-验证不同类型的举例" class="headerlink" title="PropTypes 验证不同类型的举例"></a>PropTypes 验证不同类型的举例</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">'prop-types'</span>MyComponent<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 你可以将属性声明为 JS 原生类型，默认情况下</span>  <span class="token comment" spellcheck="true">// 这些属性都是可选的。</span>  optionalArray<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>array<span class="token punctuation">,</span>  optionalBool<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>bool<span class="token punctuation">,</span>  optionalFunc<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">,</span>  optionalNumber<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span>  optionalObject<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>object<span class="token punctuation">,</span>  optionalString<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>  optionalSymbol<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>symbol<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 任何可被渲染的元素（包括数字、字符串、元素或数组）</span>  <span class="token comment" spellcheck="true">// (或 Fragment) 也包含这些类型。</span>  optionalNode<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>node<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 一个 React 元素。</span>  optionalElement<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>element<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 一个 React 元素类型（即，MyComponent）。</span>  optionalElementType<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>elementType<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 你也可以声明 prop 为类的实例，这里使用</span>  <span class="token comment" spellcheck="true">// JS 的 instanceof 操作符。</span>  optionalMessage<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">instanceOf</span><span class="token punctuation">(</span>Message<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 你可以让你的 prop 只能是特定的值，指定它为</span>  <span class="token comment" spellcheck="true">// 枚举类型。</span>  optionalEnum<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">oneOf</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'News'</span><span class="token punctuation">,</span> <span class="token string">'Photos'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 一个对象可以是几种类型中的任意一个类型</span>  optionalUnion<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">oneOfType</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>    PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span>    PropTypes<span class="token punctuation">.</span><span class="token function">instanceOf</span><span class="token punctuation">(</span>Message<span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 可以指定一个数组由某一类型的元素组成</span>  optionalArrayOf<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">arrayOf</span><span class="token punctuation">(</span>PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 可以指定一个对象由某一类型的值组成</span>  optionalObjectOf<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">objectOf</span><span class="token punctuation">(</span>PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 可以指定一个对象由特定的类型值组成</span>  optionalObjectWithShape<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">shape</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    color<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>    fontSize<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>number  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// An object with warnings on extra properties</span>  optionalObjectWithStrictShape<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">exact</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>    quantity<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>number  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 你可以在任何 PropTypes 属性后面加上 `isRequired` ，确保</span>  <span class="token comment" spellcheck="true">// 这个 prop 没有被提供时，会打印警告信息。</span>  requiredFunc<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 任意类型的数据</span>  requiredAny<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>any<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 你可以指定一个自定义验证器。它在验证失败时应返回一个 Error 对象。</span>  <span class="token comment" spellcheck="true">// 请不要使用 `console.warn` 或抛出异常，因为这在 `onOfType` 中不会起作用。</span>  customProp<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> propName<span class="token punctuation">,</span> componentName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex">/matchme/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>props<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>        'Invalid prop <span class="token template-string"><span class="token string">`' +          propName +          '`</span></span> supplied to' <span class="token operator">+</span>          ' <span class="token template-string"><span class="token string">`' +          componentName +          '`</span></span><span class="token punctuation">.</span> Validation failed<span class="token punctuation">.</span>'      <span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 你也可以提供一个自定义的 `arrayOf` 或 `objectOf` 验证器。</span>  <span class="token comment" spellcheck="true">// 它应该在验证失败时返回一个 Error 对象。</span>  <span class="token comment" spellcheck="true">// 验证器将验证数组或对象中的每个值。验证器的前两个参数</span>  <span class="token comment" spellcheck="true">// 第一个是数组或对象本身</span>  <span class="token comment" spellcheck="true">// 第二个是他们当前的键。</span>  customArrayProp<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>    propValue<span class="token punctuation">,</span>    key<span class="token punctuation">,</span>    componentName<span class="token punctuation">,</span>    location<span class="token punctuation">,</span>    propFullName  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex">/matchme/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>propValue<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>        'Invalid prop <span class="token template-string"><span class="token string">`' +          propFullName +          '`</span></span> supplied to' <span class="token operator">+</span>          ' <span class="token template-string"><span class="token string">`' +          componentName +          '`</span></span><span class="token punctuation">.</span> Validation failed<span class="token punctuation">.</span>'      <span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>使用 PropTypes 对传递过来的数据进行验证</li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 基础笔记(补充说明 ref,语义等等)(十二)</title>
      <link href="/2019/12/04/reactbasic12/"/>
      <url>/2019/12/04/reactbasic12/</url>
      
        <content type="html"><![CDATA[<h2 id="Fragment-语义化标签"><a href="#Fragment-语义化标签" class="headerlink" title="Fragment 语义化标签"></a>Fragment 语义化标签</h2><ul><li>当最外层不想用 div 又必须使用包裹层的时候</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Fragment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">function</span> <span class="token function">ListItem</span><span class="token punctuation">(</span><span class="token punctuation">{</span> item <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Fragment<span class="token operator">></span>      <span class="token operator">&lt;</span>dt<span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>term<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>dt<span class="token operator">></span>      <span class="token operator">&lt;</span>dd<span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>description<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>dd<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Glossary</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>dl<span class="token operator">></span>      <span class="token punctuation">{</span>props<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>ListItem item<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span> key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dl<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="htmlFor-比如-label-不能直接写-for"><a href="#htmlFor-比如-label-不能直接写-for" class="headerlink" title="htmlFor 比如 label 不能直接写 for"></a>htmlFor 比如 label 不能直接写 for</h2><ul><li>要用 htmlFor 来代替</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">htmlFor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>namedInput<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>namedInput<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="ref-来控制节点"><a href="#ref-来控制节点" class="headerlink" title="ref 来控制节点"></a>ref 来控制节点</h2><h3 id="1-给元素绑定-ref-ref-里面必须是方法"><a href="#1-给元素绑定-ref-ref-里面必须是方法" class="headerlink" title="1.给元素绑定 ref,ref 里面必须是方法"></a>1.给元素绑定 ref,ref 里面必须是方法</h3><pre class="line-numbers language-html"><code class="language-html">&lt;input type="text" value={this.state.value} onChange = {this.changeall}ref={(content)=>{this.content=content}} ><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-使用的时候"><a href="#2-使用的时候" class="headerlink" title="2. 使用的时候"></a>2. 使用的时候</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">changeall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>value  <span class="token comment" spellcheck="true">/*这种情况就是异步操作*/</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      value    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Context-可以直接传递很多层"><a href="#Context-可以直接传递很多层" class="headerlink" title="Context 可以直接传递很多层"></a>Context 可以直接传递很多层</h2><blockquote><p>有的时候父组件给子组件一层层传递数据非常麻烦，所以可以利用 Context 来传递</p></blockquote><h3 id="1-创建上下文的组件"><a href="#1-创建上下文的组件" class="headerlink" title="1. 创建上下文的组件"></a>1. 创建上下文的组件</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> Provider<span class="token punctuation">,</span> Consumer <span class="token punctuation">}</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>defaultValue<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-父组件放置共享数据"><a href="#2-父组件放置共享数据" class="headerlink" title="2. 父组件放置共享数据"></a>2. 父组件放置共享数据</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*要共享的数据*/</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token comment" spellcheck="true">/*里面是要渲染的东西比如子组件*/</span><span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-子组件要使用父组件的数据了"><a href="#3-子组件要使用父组件的数据了" class="headerlink" title="3.子组件要使用父组件的数据了"></a>3.子组件要使用父组件的数据了</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Consumer<span class="token operator">></span>  <span class="token punctuation">{</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*value就是父组件传递过来的数据子组件可以使用*/</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Consumer<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实例的例子"><a href="#实例的例子" class="headerlink" title="实例的例子"></a>实例的例子</h2><h3 id="1-App-js-父组件"><a href="#1-App-js-父组件" class="headerlink" title="1. App.js 父组件"></a>1. App.js 父组件</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//App.js</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> Son <span class="token keyword">from</span> <span class="token string">'./son'</span> <span class="token comment" spellcheck="true">//引入子组件</span><span class="token comment" spellcheck="true">// 创建一个 theme Context,</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> Provider<span class="token punctuation">,</span> Consumer <span class="token punctuation">}</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token string">'默认名称'</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'小人头'</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token comment" spellcheck="true">//Provider共享容器 接收一个name属性</span>      <span class="token operator">&lt;</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div          style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>            border<span class="token punctuation">:</span> <span class="token string">'1px solid red'</span><span class="token punctuation">,</span>            width<span class="token punctuation">:</span> <span class="token string">'30%'</span><span class="token punctuation">,</span>            margin<span class="token punctuation">:</span> <span class="token string">'50px auto'</span><span class="token punctuation">,</span>            textAlign<span class="token punctuation">:</span> <span class="token string">'center'</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">></span>          <span class="token operator">&lt;</span>p<span class="token operator">></span>父组件定义的值<span class="token punctuation">:</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>          <span class="token operator">&lt;</span>Son <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-son-js-子组件"><a href="#2-son-js-子组件" class="headerlink" title="2.son.js 子组件"></a>2.son.js 子组件</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//son.js 子类</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Consumer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./index'</span> <span class="token comment" spellcheck="true">//引入父组件的Consumer容器</span><span class="token keyword">import</span> Grandson <span class="token keyword">from</span> <span class="token string">'./grandson.js'</span> <span class="token comment" spellcheck="true">//引入子组件</span><span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">//Consumer容器,可以拿到上文传递下来的name属性,并可以展示对应的值</span>    <span class="token operator">&lt;</span>Consumer<span class="token operator">></span>      <span class="token punctuation">{</span>name <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div          style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>            border<span class="token punctuation">:</span> <span class="token string">'1px solid blue'</span><span class="token punctuation">,</span>            width<span class="token punctuation">:</span> <span class="token string">'60%'</span><span class="token punctuation">,</span>            margin<span class="token punctuation">:</span> <span class="token string">'20px auto'</span><span class="token punctuation">,</span>            textAlign<span class="token punctuation">:</span> <span class="token string">'center'</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">></span>          <span class="token operator">&lt;</span>p<span class="token operator">></span>子组件。获取父组件的值<span class="token punctuation">:</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>          <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 孙组件内容 */</span><span class="token punctuation">}</span>          <span class="token operator">&lt;</span>Grandson <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Consumer<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Son<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-grandson-js-孙组件"><a href="#3-grandson-js-孙组件" class="headerlink" title="3. grandson.js 孙组件"></a>3. grandson.js 孙组件</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//grandson.js 孙类</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Consumer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./index'</span> <span class="token comment" spellcheck="true">//引入父组件的Consumer容器</span><span class="token keyword">function</span> <span class="token function">Grandson</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">//Consumer容器,可以拿到上文传递下来的name属性,并可以展示对应的值</span>    <span class="token operator">&lt;</span>Consumer<span class="token operator">></span>      <span class="token punctuation">{</span>name <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div          style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>            border<span class="token punctuation">:</span> <span class="token string">'1px solid green'</span><span class="token punctuation">,</span>            width<span class="token punctuation">:</span> <span class="token string">'60%'</span><span class="token punctuation">,</span>            margin<span class="token punctuation">:</span> <span class="token string">'50px auto'</span><span class="token punctuation">,</span>            textAlign<span class="token punctuation">:</span> <span class="token string">'center'</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">></span>          <span class="token operator">&lt;</span>p<span class="token operator">></span>孙组件。获取传递下来的值<span class="token punctuation">:</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Consumer<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Grandson<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>Fragment 可以当个包裹标签</p></li><li><p>ref 可以控制接待你</p></li><li><p>爷爷组件给孙组件传值,利用 Context 这样父给子，子给孙.没有必要一级一级传递</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 基础笔记(卡槽)(十一)</title>
      <link href="/2019/12/03/reactbasic11/"/>
      <url>/2019/12/03/reactbasic11/</url>
      
        <content type="html"><![CDATA[<h2 id="不具名卡槽-直接使用"><a href="#不具名卡槽-直接使用" class="headerlink" title="不具名卡槽,直接使用"></a>不具名卡槽,直接使用</h2><blockquote><p>在 React 中要是想传递 html 必须借助 children prop 来渲染</p></blockquote><ul><li>例如父组件</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">FancyBorder</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'FancyBorder-'</span> <span class="token operator">+</span> props<span class="token punctuation">.</span>color<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token comment" spellcheck="true">/*重点来了*/</span>      <span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>子组件</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">WelcomeDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>FancyBorder color<span class="token operator">=</span><span class="token string">"blue"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token string">"Dialog-title"</span><span class="token operator">></span>welcome<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">"Dialog-message"</span><span class="token operator">></span>Thank you <span class="token keyword">for</span> you visting<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>FancyBorder<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这样的话子组件通过传递 props.children 来渲染父组件传递的 html</p></blockquote><h2 id="带有名称的卡槽"><a href="#带有名称的卡槽" class="headerlink" title="带有名称的卡槽"></a>带有名称的卡槽</h2><p>有的时候我们要传递的 html 不止一处,所以需要命名卡槽</p><blockquote><p>通过传递 left,right</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SolitPane</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>     <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"SplitPane"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"left"</span><span class="token operator">></span>          <span class="token punctuation">{</span>props<span class="token punctuation">.</span>left<span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>         <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"right"</span><span class="token operator">></span>        <span class="token punctuation">{</span>props<span class="token punctuation">.</span>right<span class="token punctuation">}</span>         <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>   <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>SolitPane    left<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>Contacts<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span>    right<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>Chat<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span>    <span class="token operator">></span> <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="卡槽和属性一起传递"><a href="#卡槽和属性一起传递" class="headerlink" title="卡槽和属性一起传递"></a>卡槽和属性一起传递</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Dialog</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>FancyBorder color<span class="token operator">=</span><span class="token string">"blue"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token string">"Dialog-title"</span><span class="token operator">></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">"Dialog-message"</span><span class="token operator">></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>FancyBorder<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SignUpDialog</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleSignUp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleSignUp<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> login<span class="token punctuation">:</span> <span class="token string">''</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>Dialog        title<span class="token operator">=</span><span class="token string">"Mars Exploration Program"</span>        message<span class="token operator">=</span><span class="token string">"How should we refer to you?"</span>      <span class="token operator">></span>        <span class="token operator">&lt;</span>input value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>login<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSignUp<span class="token punctuation">}</span><span class="token operator">></span>Sign Me Up<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Dialog<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">handleChange</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> login<span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">handleSignUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Welcome aboard, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>login<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>利用 props.children 传递 html</p></li><li><p>利用属性起名字 left={<xxx/>} 来传递</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 基础笔记(父子组件传值)(十)</title>
      <link href="/2019/12/02/reactbasic10/"/>
      <url>/2019/12/02/reactbasic10/</url>
      
        <content type="html"><![CDATA[<h2 id="1-利用-props"><a href="#1-利用-props" class="headerlink" title="(1) 利用 props"></a>(1) 利用 props</h2><blockquote><p>React 中 props 在 react 中父给子传递的都是属性,方法都可以传递,子属性要是想改变父组件的值只有调用父组件的方法，而不是发射出去事件让父组件监听</p></blockquote><ul><li>父组件</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> Fragment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token string">'./Todolist.css'</span><span class="token keyword">import</span> TodoItem <span class="token keyword">from</span> <span class="token string">'./Todoitem.js'</span> <span class="token comment" spellcheck="true">// 引入子组件</span><span class="token keyword">class</span> <span class="token class-name">Todolist</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      value<span class="token punctuation">:</span> <span class="token string">'请输入内容'</span><span class="token punctuation">,</span>      list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>Fragment<span class="token operator">></span>        <span class="token operator">&lt;</span>input          type<span class="token operator">=</span><span class="token string">"text"</span>          value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span>          onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeall<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>button className<span class="token operator">=</span><span class="token string">"btn"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>dianji<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>          请点击        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>ul<span class="token operator">></span>          <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>              <span class="token operator">&lt;</span>TodoItem                data<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span>                index<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span>                deleteItem<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>deleteDate<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//props绑定事件,必须把bind this传进来</span>              <span class="token operator">/</span><span class="token operator">></span>            <span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">dianji</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>list<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      list<span class="token punctuation">:</span> result<span class="token punctuation">,</span>      value<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">changeall</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      value    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">deleteDate</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>list<span class="token punctuation">]</span>    result<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//删除数组制定项</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      list<span class="token punctuation">:</span> result    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Todolist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>子组件</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> Fragment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">class</span> <span class="token class-name">Todoitem</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>deleteData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deleteData<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>Fragment<span class="token operator">></span>        <span class="token operator">&lt;</span>li onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>deleteData<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">deleteData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>index    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">deleteItem</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Todoitem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>利用 props 进行给子组件传值</li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 基础学习---表单(九)</title>
      <link href="/2019/12/01/reactbasic9/"/>
      <url>/2019/12/01/reactbasic9/</url>
      
        <content type="html"><![CDATA[<h2 id="React-里-input"><a href="#React-里-input" class="headerlink" title="React 里 input"></a>React 里 input</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">NameForm</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      value<span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleChange</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      value<span class="token punctuation">:</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">handleSubmit</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"提交的名字:"</span><span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>   event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>label<span class="token operator">></span>名字<span class="token punctuation">:</span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"提交"</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过 value 属性绑定输入值,获取属性值的时候就是 e.target.value</p></blockquote><h2 id="textarea-标签"><a href="#textarea-标签" class="headerlink" title="textarea 标签"></a>textarea 标签</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">EssayForm</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      value<span class="token punctuation">:</span> <span class="token string">'请撰写一篇关于你喜欢的 DOM 元素的文章.'</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">handleChange</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> value<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">handleSubmit</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'提交的文章: '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span><span class="token operator">></span>        <span class="token operator">&lt;</span>label<span class="token operator">></span>          文章<span class="token punctuation">:</span>          <span class="token operator">&lt;</span>textarea value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"提交"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="select-标签"><a href="#select-标签" class="headerlink" title="select 标签"></a>select 标签</h2><ul><li>React 由于 selected 属性缘故,椰子选项默认被选中,React 并不会使用 selected 属性.而在根 select 标签上使用 value 属性,而是在根 select 标签上使用 value 属性</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">FlavorForm</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token string">'coconut'</span> <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">handleChange</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> value<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">handleSubmit</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'你喜欢的风味是: '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span><span class="token operator">></span>        <span class="token operator">&lt;</span>label<span class="token operator">></span>          选择你喜欢的风味<span class="token punctuation">:</span>          <span class="token operator">&lt;</span>select value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span><span class="token operator">></span>            <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"grapefruit"</span><span class="token operator">></span>葡萄柚<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>            <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"lime"</span><span class="token operator">></span>酸橙<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>            <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"coconut"</span><span class="token operator">></span>椰子<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>            <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"mango"</span><span class="token operator">></span>芒果<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"提交"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多个输入开始"><a href="#多个输入开始" class="headerlink" title="多个输入开始"></a>多个输入开始</h2><p>当需要处理多个 input 元素时候，我们可以给每个元素添加 name 属性,并让处理函数依据 event.target.name 的值选择要执行的操作</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Reservation</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      isGoing<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      numberOfGuests<span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleInputChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleInputChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">handleInputChange</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> target <span class="token operator">=</span> event<span class="token punctuation">.</span>target    <span class="token keyword">const</span> value <span class="token operator">=</span> target<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'checkbox'</span> <span class="token operator">?</span> target<span class="token punctuation">.</span>checked <span class="token punctuation">:</span> target<span class="token punctuation">.</span>value    <span class="token keyword">const</span> name <span class="token operator">=</span> target<span class="token punctuation">.</span>name    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">:</span> value    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>form<span class="token operator">></span>        <span class="token operator">&lt;</span>label<span class="token operator">></span>          参与<span class="token punctuation">:</span>          <span class="token operator">&lt;</span>input            name<span class="token operator">=</span><span class="token string">"isGoing"</span>            type<span class="token operator">=</span><span class="token string">"checkbox"</span>            checked<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isGoing<span class="token punctuation">}</span>            onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleInputChange<span class="token punctuation">}</span>          <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>        <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>label<span class="token operator">></span>          来宾人数<span class="token punctuation">:</span>          <span class="token operator">&lt;</span>input            name<span class="token operator">=</span><span class="token string">"numberOfGuests"</span>            type<span class="token operator">=</span><span class="token string">"number"</span>            value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>numberOfGuests<span class="token punctuation">}</span>            onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleInputChange<span class="token punctuation">}</span>          <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>表单内的元素可以通过设置 value 属性来赋值</p></li><li><p>获取值 e.target.value</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 基础学习---列表 key(八)</title>
      <link href="/2019/11/30/reactbasic8/"/>
      <url>/2019/11/30/reactbasic8/</url>
      
        <content type="html"><![CDATA[<h2 id="渲染多个组件"><a href="#渲染多个组件" class="headerlink" title="渲染多个组件"></a>渲染多个组件</h2><p>你可以通过使用{}在 JSX 内构建一个元素集合</p><blockquote><p>我们使用 Javascript 中的 map()方法来遍历 numbers 数组.将数组中的每个元素变成 li 标签,最后我们将得到的数组赋值给 listItems</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">const</span> listItems <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>number <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token punctuation">{</span>number<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们把整个 listItems 插入到 ul 元素中去,然后渲染 DOM</p><pre class="line-numbers language-javascript"><code class="language-javascript">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>ul<span class="token operator">></span><span class="token punctuation">{</span>listItems<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="基础列表组件"><a href="#基础列表组件" class="headerlink" title="基础列表组件"></a>基础列表组件</h2><ul><li>渲染一个列表组件</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">NumberList</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> numbers <span class="token operator">=</span> props<span class="token punctuation">.</span>numbers  <span class="token keyword">const</span> listItems <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>number <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">;</span><span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span>number<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>number<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>ul<span class="token operator">></span><span class="token punctuation">{</span>listItems<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>NumberList numbers<span class="token operator">=</span><span class="token punctuation">{</span>numbers<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>列表循环,必须要有 key 否则会报错,Key 值必须是独一无二的</p></blockquote><h2 id="key-只是兄弟节点之间必须唯一"><a href="#key-只是兄弟节点之间必须唯一" class="headerlink" title="key 只是兄弟节点之间必须唯一"></a>key 只是兄弟节点之间必须唯一</h2><p>数组元素中使用的 key 在其兄弟节点中应该是独一无二的,当我们生成两个不同的数组时候,我们可以使用相同的 key 值</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Blog</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//左边第一个组件</span>  <span class="token keyword">const</span> sidebar <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>      <span class="token punctuation">{</span>props<span class="token punctuation">.</span>posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>post <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token punctuation">;</span><span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//右边一个组件</span>  <span class="token keyword">const</span> content <span class="token operator">=</span> props<span class="token punctuation">.</span>posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>posts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">;</span><span class="token operator">&lt;</span>div key<span class="token operator">=</span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>content<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token punctuation">{</span>sidebar<span class="token punctuation">}</span>      <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span>      <span class="token punctuation">{</span>content<span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'Hello,world'</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token string">'Welcome to learning'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'Hello,world'</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token string">'Welcome to learning'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Blog posts<span class="token operator">=</span><span class="token punctuation">{</span>posts<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在-JSX-中嵌入-map"><a href="#在-JSX-中嵌入-map" class="headerlink" title="在 JSX 中嵌入 map()"></a>在 JSX 中嵌入 map()</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">NumberList</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> numbers <span class="token operator">=</span> props<span class="token punctuation">.</span>numbers  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>      <span class="token punctuation">{</span>numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>number <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token punctuation">;</span><span class="token operator">&lt;</span>ListItem key<span class="token operator">=</span><span class="token punctuation">{</span>number<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样的话代码就很清晰，逻辑上非常清楚</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>循环的话能嵌套多个组件.{}里面也能写</p></li><li><p>循环的话必须有 key 值</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 基础学习---条件渲染(七)</title>
      <link href="/2019/11/29/reactbasic7/"/>
      <url>/2019/11/29/reactbasic7/</url>
      
        <content type="html"><![CDATA[<h2 id="在-React-中-你可以创建不用的组件来封装你各种行为-然后依据不用的状态-你只渲染对应状态下的部分内容"><a href="#在-React-中-你可以创建不用的组件来封装你各种行为-然后依据不用的状态-你只渲染对应状态下的部分内容" class="headerlink" title="在 React 中,你可以创建不用的组件来封装你各种行为,然后依据不用的状态,你只渲染对应状态下的部分内容"></a>在 React 中,你可以创建不用的组件来封装你各种行为,然后依据不用的状态,你只渲染对应状态下的部分内容</h2><blockquote><p>React 中的条件渲染和 JS 一样,使用 if 或者条件运算符去创建元素来表现当前的状态</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">UserGreeting</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Welcome back<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">GuestGreeting</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Please sign up<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在创建一个 Greeting 组件,它会依据用户是否登陆来决定显示上面哪个组件</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Greeting</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> result_flag <span class="token operator">=</span> props<span class="token punctuation">.</span>flag  <span class="token keyword">if</span> <span class="token punctuation">(</span>result_flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>UserGreeting <span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>GuestGreeting <span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Greeting flag<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实际效果"><a href="#实际效果" class="headerlink" title="实际效果"></a>实际效果</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Greeting</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> props<span class="token punctuation">.</span>isLoggedIn  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoggedIn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>UserGreeting <span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>GuestGreeting <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">LoginControl</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleLoginClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleLoginClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleLogoutClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleLogoutClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> isLoggedIn<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">handleLoginClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> isLoggedIn<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">handleLogoutClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> isLoggedIn<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLoggedIn    <span class="token keyword">let</span> button <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoggedIn<span class="token punctuation">)</span> <span class="token punctuation">{</span>      button <span class="token operator">=</span> <span class="token operator">&lt;</span>LogoutButton onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLogoutClick<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      button <span class="token operator">=</span> <span class="token operator">&lt;</span>LoginButton onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLoginClick<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>Greeting isLoggedIn<span class="token operator">=</span><span class="token punctuation">{</span>isLoggedIn<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">{</span>button<span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>LoginControl <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="与-amp-amp-逻辑运算符"><a href="#与-amp-amp-逻辑运算符" class="headerlink" title="与&amp;&amp;逻辑运算符"></a>与&amp;&amp;逻辑运算符</h2><p>通过花括号包裹代码,可以在 JSX 中嵌入任何表达式,这也包括了 js 逻辑与预算符</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Mailbox</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> unreadMessages <span class="token operator">=</span> props<span class="token punctuation">.</span>unreadMessages  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token punctuation">{</span>unreadMessages<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>h2<span class="token operator">></span>You have <span class="token punctuation">{</span>unreadMessages<span class="token punctuation">.</span>length<span class="token punctuation">}</span> unread messages<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>      <span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'React'</span><span class="token punctuation">,</span> <span class="token string">'Re: React'</span><span class="token punctuation">,</span> <span class="token string">'Re:Re: React'</span><span class="token punctuation">]</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>Mailbox unreadMessages<span class="token operator">=</span><span class="token punctuation">{</span>messages<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      The user is <span class="token operator">&lt;</span>b<span class="token operator">></span><span class="token punctuation">{</span>isLoggedIn <span class="token operator">?</span> <span class="token string">'currently'</span> <span class="token punctuation">:</span> <span class="token string">'not'</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">></span> logged <span class="token keyword">in</span><span class="token punctuation">.</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>阻止条件渲染</p></blockquote><p>在极少数的情况下 要是 render 方法直接返回 null,从而不进行任何渲染</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">WarningBanner</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>props<span class="token punctuation">.</span>warn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"warning"</span><span class="token operator">></span>Warning<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>class 外面可以写方法传进来 props,渲染</li><li>if 判断</li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 基础学习---事件处理(六)</title>
      <link href="/2019/11/28/reactbasic6/"/>
      <url>/2019/11/28/reactbasic6/</url>
      
        <content type="html"><![CDATA[<h2 id="React-元素的事件处理和-DOM-元素相似-但是有一点不同"><a href="#React-元素的事件处理和-DOM-元素相似-但是有一点不同" class="headerlink" title="React 元素的事件处理和 DOM 元素相似,但是有一点不同"></a>React 元素的事件处理和 DOM 元素相似,但是有一点不同</h2><ol><li><p>React 事件的命名采用小驼峰式,而不是纯小写</p></li><li><p>使用 JSX 语法时你需要传一个函数作为事件处理函数，而不是一个字符串</p></li></ol><p>例如:传统的 HTML</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>activateLasers()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在 React 中则不同</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{activateLasers}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>在 React 中你不能通过返回 false 来阻止默认行为,你必须使用 e.preventDefault()来阻止</p></blockquote><p>例如</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"The Link was clicked"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span> onClick<span class="token operator">=</span><span class="token string">"handleClick"</span><span class="token operator">></span>      Click me    <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="特别注意-this-指向在使用事件以前必须要在-constructor-里面注册事件-绑定事件"><a href="#特别注意-this-指向在使用事件以前必须要在-constructor-里面注册事件-绑定事件" class="headerlink" title="特别注意 this 指向在使用事件以前必须要在 constructor 里面注册事件,绑定事件"></a>特别注意 this 指向在使用事件以前必须要在 constructor 里面注册事件,绑定事件</h2><blockquote><p>事件使用之前必须要绑定 this,要不然方法里面的 this 就是 undefined,绑定 this 写在构造函数里面</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Toggle</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      flag<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      flag<span class="token punctuation">:</span><span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span>          点击我      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>Toggle<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="向事件里面传递参数"><a href="#向事件里面传递参数" class="headerlink" title="向事件里面传递参数"></a>向事件里面传递参数</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Toggle</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      flag<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleClick</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      flag<span class="token punctuation">:</span><span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>          点击我      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>Toggle<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>在 React 中不能在 React 中你不能通过返回 false 来阻止默认行为,你必须使用 e.preventDefault()来阻止</p></li><li><p>事件使用之前必须要绑定 this,要不然方法里面的 this 就是 undefined,绑定 this 写在构造函数里面</p></li><li><p>事件里面传入参数</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 基础学习---State&amp;生命周期(五)</title>
      <link href="/2019/11/27/reactbasic5/"/>
      <url>/2019/11/27/reactbasic5/</url>
      
        <content type="html"><![CDATA[<h2 id="State-与-props-类似-但是-State-是私有的-并且完全受控于当前组件"><a href="#State-与-props-类似-但是-State-是私有的-并且完全受控于当前组件" class="headerlink" title="State 与 props 类似,但是 State 是私有的,并且完全受控于当前组件"></a>State 与 props 类似,但是 State 是私有的,并且完全受控于当前组件</h2><h3 id="创建一个-class-组件"><a href="#创建一个-class-组件" class="headerlink" title="创建一个 class 组件"></a>创建一个 class 组件</h3><ol><li>创建一个同名的 ES6 class 并且继承于 React.Component</li><li>添加一个空的 render()方法</li><li>在 render 中使用 this.props 替换 props</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span>world<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span>h2<span class="token operator">></span>It is <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每次组件更新时候 render 方法都会被调用,但只要在相同的 DOM 节点中渲染<Clock/>就仅有一个 Clock 组件的 class 实例被创建使用.这就使我们可以用 state 或者生命周期方法等很多其他特性</p><h3 id="向-class-组件中添加局部的-state"><a href="#向-class-组件中添加局部的-state" class="headerlink" title="向 class 组件中添加局部的 state"></a>向 class 组件中添加局部的 state</h3><ol><li>把 render()方法中的 this.props.date 替换成 this.state.date</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span>h2<span class="token operator">></span>It is <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>添加一个 class 构造函数,然后在该函数中为 this.state 赋初值</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//通过props传递到父类的构造函数中</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span>h2<span class="token operator">></span>It is <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Clock <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="将生命周期方法添加到-Class-中"><a href="#将生命周期方法添加到-Class-中" class="headerlink" title="将生命周期方法添加到 Class 中"></a>将生命周期方法添加到 Class 中</h2><h3 id="生命周期函数指的是在特定的时候才能运行的函数，React-有八大生命周期函数"><a href="#生命周期函数指的是在特定的时候才能运行的函数，React-有八大生命周期函数" class="headerlink" title="生命周期函数指的是在特定的时候才能运行的函数，React 有八大生命周期函数"></a>生命周期函数指的是在特定的时候才能运行的函数，React 有八大生命周期函数</h3><ol><li><p>componentWillMount 组件在被挂载的时候执行 render 之前</p></li><li><p>componentDidMount 组件挂载之后执行 render 之后,这里一般放请求数据一些异步操作</p></li><li><p>shouldComponentUpdate 无论是 props 还是 state，组件被更新前一定会执行它。它必须有返回值,它就是开关要是 false 就不更新了,它里面有两个参数第一个 nextProps，第二个 nextState . nextProps 表示下一个要传递的父数据，nextState 表示下一个 State 改变,这样子组件里面的 render 就不会重新渲染</p></li></ol><blockquote><p>shouldComponentUpdate 只是对本组件使用要是 false 对于 props 来说它只是渲染了 props 当父组件除了 props 以外的元素更新的话，它不会在更新.要是对于 state 来说,他不会渲染。所以加个判断会比较好</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">,</span>nextState<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">.</span>xxx<span class="token operator">!=</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>xxx<span class="token punctuation">)</span>  <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>componentWillUpdate 组件被更新前,并且 shouldComponentUpdate 返回 true 执行以后</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//只有shouldComponentUpdate</span><span class="token comment" spellcheck="true">// 组件被更新之前,并且shouldComponentUpdate返回true执行</span><span class="token function">componentWillUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"组件更新之前"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>componentDidUpdate 组件更新之后</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"组件更新之后"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="6"><li>componentWillReceiveProps(最难理解的)</li></ol><blockquote><p>当一个组件从父组件接受了参数，只要父组件的 render 函数被重新执行了(也就是大于第一次)子组件这个生命周期函数就执行</p></blockquote><ol start="7"><li>componentWillUnmount 组件被卸载</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"组件被卸载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="8"><li>render 渲染节点的函数,里面必须有 return</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>       <span class="token operator">&lt;</span>h1<span class="token operator">></span>哈哈哈<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>生命周期的函数执行顺序</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//第一步  componentWillMount</span><span class="token comment" spellcheck="true">//第二步  componentDidMount</span><span class="token comment" spellcheck="true">//第三步  render</span><span class="token comment" spellcheck="true">//第四步  shouldComponentUpdate</span><span class="token comment" spellcheck="true">//第五步  componentWillUpdate</span><span class="token comment" spellcheck="true">//第六步  componentDidUpdate</span><span class="token comment" spellcheck="true">//第七步  componentWillReceiveProps</span><span class="token comment" spellcheck="true">//第八步  componentWillUnmount</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新数据的时候必须要用-this-setState-来更新组件"><a href="#更新数据的时候必须要用-this-setState-来更新组件" class="headerlink" title="更新数据的时候必须要用 this.setState()来更新组件"></a>更新数据的时候必须要用 this.setState()来更新组件</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//构造函数</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//更新数据 获取数据</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>timeID <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      _this<span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//卸载组件的时候清除定时器</span>  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timeID<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//核心函数,利用setState改变</span>  <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="正确的使用-setState"><a href="#正确的使用-setState" class="headerlink" title="正确的使用 setState"></a>正确的使用 setState</h2><h3 id="不要直接修改-State"><a href="#不要直接修改-State" class="headerlink" title="不要直接修改 State"></a>不要直接修改 State</h3><ul><li>例如:此代码不会重新渲染组件(错误)</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>commet <span class="token operator">=</span> <span class="token string">'Hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>(正确)而是使用 setState()</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  commet<span class="token punctuation">:</span> <span class="token string">'Hello'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>构造函数是唯一可以给 this.setState()赋值的地方</p></blockquote><h3 id="State-的更新是异步的"><a href="#State-的更新是异步的" class="headerlink" title="State 的更新是异步的"></a>State 的更新是异步的</h3><ul><li>因为 this.props 和 this.state 可能会异步更新,所以不要依赖他们的值来更新下一个状态</li></ul><p>比如下面的这个无法更新计数器(错误的)</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>increment<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>setState 回调函数</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>  <span class="token punctuation">{</span>    foo<span class="token punctuation">:</span> <span class="token number">123</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>所以只有在 setState()接受一个函数而不是一个对象,这个函数用上一个 state 作为第一个参数,将此次更新被应用时的 props 作为第二个参数</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  counter<span class="token punctuation">:</span> state<span class="token punctuation">.</span>counter <span class="token operator">+</span> props<span class="token punctuation">.</span>increment<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>上面使用了箭头函数,不过也可以使用普通函数</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    counter<span class="token punctuation">:</span> state<span class="token punctuation">.</span>counter <span class="token operator">+</span> props<span class="token punctuation">.</span>increment  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据向下流动的"><a href="#数据向下流动的" class="headerlink" title="数据向下流动的"></a>数据向下流动的</h2><blockquote><p>不管父组件或者子组件都无法知道某个组件是有状态还是无状态的,并且它们不关心它是函数组件还是 class 组件</p></blockquote><blockquote><p>组件可以选择把它的 state 作为 props 向下传递到它的子组件中</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is {this.state.data.toLocaleTimeString()}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于自定义组件同样使用</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FormatteDate</span> <span class="token attr-name">date</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{this.state.date}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>每一个组件里面必须要有构造函数 super(props)</p></li><li><p>生命周期函数</p></li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//第一步  componentWillMount</span><span class="token comment" spellcheck="true">//第二步  componentDidMount</span><span class="token comment" spellcheck="true">//第三步  render</span><span class="token comment" spellcheck="true">//第四步  shouldComponentUpdate</span><span class="token comment" spellcheck="true">//第五步  componentWillUpdate</span><span class="token comment" spellcheck="true">//第六步  componentDidUpdate</span><span class="token comment" spellcheck="true">//第七步  componentWillReceiveProps</span><span class="token comment" spellcheck="true">//第八步  componentWillUnmount</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>单项数据流</li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 基础学习---组件&amp;Props(四)</title>
      <link href="/2019/11/26/reactbasic4/"/>
      <url>/2019/11/26/reactbasic4/</url>
      
        <content type="html"><![CDATA[<h2 id="组件的核心"><a href="#组件的核心" class="headerlink" title="组件的核心"></a>组件的核心</h2><blockquote><p>组件允许你将 UI 拆分成独立的可复用的代码片段,并且对每个片段进行独立构思。</p></blockquote><p>组件从概念上类似 JS 函数,它接受任意的入参(“props”),并返回用于描述页面展示内容的 React 元素</p><h2 id="函数组件与-class-组件"><a href="#函数组件与-class-组件" class="headerlink" title="函数组件与 class 组件"></a>函数组件与 class 组件</h2><h3 id="定义组件最简单的方式就是编写-JS-函数"><a href="#定义组件最简单的方式就是编写-JS-函数" class="headerlink" title="定义组件最简单的方式就是编写 JS 函数"></a>定义组件最简单的方式就是编写 JS 函数</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>该函数是一个有效的 React 组件,因为它接受唯一带有数据的”props”(代表属性)对象与并返回一个 React 元素,这类组件被称为”函数组件”,因为它本质就是 JS 函数</p></blockquote><h3 id="第二种方法还可以用-ES6-来定义组件"><a href="#第二种方法还可以用-ES6-来定义组件" class="headerlink" title="第二种方法还可以用 ES6 来定义组件"></a>第二种方法还可以用 ES6 来定义组件</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Welcome</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面两种方法在 React 里是等效的</p><h2 id="渲染组件"><a href="#渲染组件" class="headerlink" title="渲染组件"></a>渲染组件</h2><h3 id="React-也可以让用户自定义组件"><a href="#React-也可以让用户自定义组件" class="headerlink" title="React 也可以让用户自定义组件"></a>React 也可以让用户自定义组件</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">}</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token operator">&lt;</span>Welcome name<span class="token operator">=</span><span class="token string">"Sara"</span> <span class="token operator">/</span><span class="token operator">></span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码最后的渲染结果就是 Sara</p><ol><li><p>调用 ReactDOM.render()函数传入<Welcome name="Sara">作为参数</p></li><li><p>React 调用 Welcome 组件,并将{name:’Sara’}作为 props 传入</p></li><li><p>Welcome 组件将<code>&lt;h1&gt;Hello,Sara&lt;/h1&gt;</code>作为返回值</p></li><li><p>ReactDOM 将 DOM 高效的更新为<code>&lt;h1&gt;Hello,Sata&lt;/h1&gt;</code></p></li></ol><blockquote><p>特别注意: 组件名称必须以大写字母开头,React 会将以小写字母开头的组件视为原生 DOM 标签,例如<code>&lt;div/&gt;</code>代表 HTML 的 div 标签,而<Welcome/>则代表了一个组件,并且需要在作用域内使用 Welcome</p></blockquote><h2 id="组合组件"><a href="#组合组件" class="headerlink" title="组合组件"></a>组合组件</h2><ul><li><p>组件可以在其输出中引用其他组件。这就可以让我们用同一组件来抽象出任何层次的细节。按钮，表单，对话框。甚至整个屏幕的内容.在 React 应用程序中,这些都可以当作组件</p></li><li><p>例如我们可以多次渲染组件</p></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>Welcome name<span class="token operator">=</span><span class="token string">"Sara"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Welcome name<span class="token operator">=</span><span class="token string">"Cahal"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Welcome name<span class="token operator">=</span><span class="token string">"Edite"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="提取组件"><a href="#提取组件" class="headerlink" title="提取组件"></a>提取组件</h2><h3 id="全部组件"><a href="#全部组件" class="headerlink" title="全部组件"></a>全部组件</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Comment</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"Comment"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"UserInfo"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>img          className<span class="token operator">=</span><span class="token string">"Avatar"</span>          src<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>author<span class="token punctuation">.</span>avatarUrl<span class="token punctuation">}</span>          alt<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>author<span class="token punctuation">.</span>name<span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"UserInfo-name"</span><span class="token operator">></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>author<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"Commet-text"</span><span class="token operator">></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"Commet-date"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token function">formatDate</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个组件用于描述一个社交网站的评论功能,它接收 author(对象),text(字符串),以及 date(日期)作为 props</p><p>该组件由于嵌套关系,变的难以维护。而且很难复用它的个个部分.因此让我们从中提取一些组件出来.</p><h3 id="拆分第一步-Avatar-组件"><a href="#拆分第一步-Avatar-组件" class="headerlink" title="拆分第一步 Avatar 组件"></a>拆分第一步 Avatar 组件</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Avatar</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>user<span class="token punctuation">.</span>avatarUrl<span class="token punctuation">}</span> alt<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>Avatar 不需要知道它在 Commet 组件内部是如何渲染的，因此我们给它的 props 起了一个更通用的名字:user 而不是 author</p></li><li><p>我们建议从组件自身的角度命名 props 而不是依赖于调用组件的上下文命名</p></li></ul><p>下面针对上面那个做一下调整</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Commet</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>       <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"Comment"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"UserInfo"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Avatar user<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>author<span class="token punctuation">}</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"UserInfo-name"</span><span class="token operator">></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>author<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"Commet-text"</span><span class="token operator">></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"Commet-date"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token function">formatDate</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来我们将提取 UserInfo 组件,该组件在用户旁渲染 Avatar 组件</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">UserInfo</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"UserInfo"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Avatar user<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>user<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"UserInfo-name"</span><span class="token operator">></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样进一步简化</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Commet</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"Comment"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>UserInfo user<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>author<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"Comment-text"</span><span class="token operator">></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"Comment-date"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token function">formatDate</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Props-的只读性"><a href="#Props-的只读性" class="headerlink" title="Props 的只读性"></a>Props 的只读性</h2><blockquote><p>组件无论是使用函数声明还是通过 class 声明,都绝对不能修改自身的 props</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样的函数被称为”纯函数”,因为该函数不会尝试更改入参,且多次调用下相同的入参始终返回相同的结果</p><p>相反下面这个就不是纯函数</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>  account<span class="token punctuation">.</span>total <span class="token operator">-</span><span class="token operator">=</span> amount<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>props 里面的数据绝对不能更改</p></li><li><p>组件的定义里面必须要有 return,要是一行就不用()要是多行必须加()</p></li><li><p>组件里面可以嵌套组件。没有个数限制。为了更好的使用，建议强烈拆分组件</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 基础学习---元素渲染(三)</title>
      <link href="/2019/11/25/reactbasic3/"/>
      <url>/2019/11/25/reactbasic3/</url>
      
        <content type="html"><![CDATA[<h2 id="元素是构成-React-应用的最小砖块"><a href="#元素是构成-React-应用的最小砖块" class="headerlink" title="元素是构成 React 应用的最小砖块"></a>元素是构成 React 应用的最小砖块</h2><p>元素描述了你在屏幕上想看到的内容</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span>world<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>与浏览器 DOM 不同 ，React 元素是创建开销极小的普通对象.React DOM 会负责更新 DOM 来与 React 元素保持一致.</p></blockquote><h2 id="将一个元素渲染为-DOM"><a href="#将一个元素渲染为-DOM" class="headerlink" title="将一个元素渲染为 DOM"></a>将一个元素渲染为 DOM</h2><p>假设你的 HTML 文件某处有一个 div</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>我们将其称为根节点,因为根节点的所有内容都由 React DOM 管理</p></li><li><p>仅仅使用 React 构建的应用通常只有单一的根节点,但是如果你将 React 集成到一个已有的应用中,那么你可以在应用中包含任意多的独立根 DOM 节点.</p></li><li><p>想要一个 React 元素渲染到根 DOM 节点中,必须要通过 ReactDOM.render()</p></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span> Hello<span class="token punctuation">,</span>world<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="更新已渲染的元素"><a href="#更新已渲染的元素" class="headerlink" title="更新已渲染的元素"></a>更新已渲染的元素</h2><ul><li><p>React 元素是不可变对象.一旦被创建,你就无法更改它的子元素或者属性,一个元素就像电影里面的单帧,他表示某个特定时刻的 UI</p></li><li><p>而更新 UI 唯一的方式是创建一个全新的元素,并将其传入 ReactDOM.render()</p></li></ul><p>考虑一个计时器的例子:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span>world<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>h2<span class="token operator">></span>It is <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">setInterval</span><span class="token punctuation">(</span>tick<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="React-只会更新它需要更新的部分"><a href="#React-只会更新它需要更新的部分" class="headerlink" title="React 只会更新它需要更新的部分"></a>React 只会更新它需要更新的部分</h2><ul><li>ReactDOM 会将元素和它的子元素与它们之前的状态进行比较,并且只会进行必要的更新来使 DOM 达到预期的状态</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>元素是组件里面一个最小的部分</p></li><li><p>元素必须放在 render 函数下面,并且 render 函数下面必须有 return 返回值</p></li><li><p>React 只有在数据发生改变的时候,并且最终在 render 函数里面渲染的才会更新 DOM</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 基础学习---JSX(二)</title>
      <link href="/2019/11/24/reactbasic2/"/>
      <url>/2019/11/24/reactbasic2/</url>
      
        <content type="html"><![CDATA[<h2 id="JSX-简介"><a href="#JSX-简介" class="headerlink" title="JSX 简介"></a>JSX 简介</h2><ul><li>JSX 是一个 Javascript 的语法扩展,JSX 可以很好的描述 UI 呈现出它应有交互的本质形式，JSX 可能会让人联想到模板语言,但它具有 Javascript 的全部功能,JSX 可以生成 React 元素.</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="JSX-使用"><a href="#JSX-使用" class="headerlink" title="JSX 使用"></a>JSX 使用</h2><h3 id="在-JSX-中嵌入表达式"><a href="#在-JSX-中嵌入表达式" class="headerlink" title="在 JSX 中嵌入表达式"></a>在 JSX 中嵌入表达式</h3><p>举个例子,我们声明了一个 name 的变量,然后在 JSX 中使用它，并将它包裹在大括号中</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'John Perez'</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span> hello<span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在 JSX 语法中你可以在大括号中放置任何有效的 JS 表达式,例如 2+2,user.firstname 或者 formatName(user)都是有效的 JS 表达式</p></blockquote><ul><li>在下面的例子中我们将 formatName(user)结果,并将结果嵌套到 h1 元素中</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">formatName</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> user<span class="token punctuation">.</span>firstname <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> user<span class="token punctuation">.</span>lastname<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>  firstname<span class="token punctuation">:</span><span class="token string">"John"</span><span class="token punctuation">,</span>  lastname<span class="token punctuation">:</span><span class="token string">"smisth"</span><span class="token punctuation">}</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token operator">&lt;</span>h1<span class="token operator">></span>    Hello<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token function">formatName</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">!</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  element<span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在编译后 JSX 表达式会被转为普通的函数调用,并且会得到 JS 对象,也就是说里面必须有 return</p></blockquote><h3 id="JSX-也可以是一个表达式"><a href="#JSX-也可以是一个表达式" class="headerlink" title="JSX 也可以是一个表达式"></a>JSX 也可以是一个表达式</h3><ul><li>你也可以在 if 语句或者 for 循环的代码块中使用 JSX,将 JSX 赋值给变量,把 JSX 当参数传入,以及从函数中返回 JSX</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getGreetinf</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token function">formatName</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span>Stringer<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSX-特定属性"><a href="#JSX-特定属性" class="headerlink" title="JSX 特定属性"></a>JSX 特定属性</h3><ul><li>通过引号将属性值变成字符串</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token operator">&lt;</span>div tabindex<span class="token operator">=</span><span class="token string">"0"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>也可以使用大括号在属性中插入一个 JS 表达式</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>img<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>img<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>千万记得大括号或者引号只能用其中的一个,引号就是表示字符串,大括号就表示变量,对同一属性不能同时使用这两种符号</p></blockquote><blockquote><p>JSX 在这里使用的小驼峰法命名,比如 class 变成了 className ,而 tabindex 变成了 tabIndex</p></blockquote><h3 id="使用-JSX-指定子元素"><a href="#使用-JSX-指定子元素" class="headerlink" title="使用 JSX 指定子元素"></a>使用 JSX 指定子元素</h3><ul><li>假如一个标签里面没有内容,你可以使用/&gt;来闭合标签,就像 XML 语法一样</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>imgurl<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>JSX 标签里能够包含很多子元素</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>     <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>     <span class="token operator">&lt;</span>h2<span class="token operator">></span>Good to see you <span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSX-防止注入攻击"><a href="#JSX-防止注入攻击" class="headerlink" title="JSX 防止注入攻击"></a>JSX 防止注入攻击</h3><blockquote><p>ReactDom 在渲染所有输入内容之前,默认就会进行转义.他可以确保在你的应用中,永远不会注入哪些并非自己明确编写的内容,所有的内容在渲染之前都被转换成了字符串,这样防止攻击.</p></blockquote><h3 id="JSX-表示对象"><a href="#JSX-表示对象" class="headerlink" title="JSX 表示对象"></a>JSX 表示对象</h3><ul><li>Babel 会把 JSX 转译成一个名为 React.createElement()函数调用</li></ul><p>以下两种实例代码等效</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token string">"greeting"</span><span class="token operator">></span>     Hello<span class="token punctuation">,</span>world<span class="token operator">!</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>等价于</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>  <span class="token string">'h1'</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> className<span class="token punctuation">:</span> <span class="token string">'greeting'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">'Hello,world!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>所以 React.createElement()会预先执行一些检查,以帮助你编写无措代码,但实际上他创建了这样一个对象，这些对象被称为 React 元素,他们描述了你屏幕上看到的内容，然后使用它们来构建 DOM 以及保持更新.</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>JSX 语法里面可以用{}来表示变量，表达式等等</p></li><li><p>引号和{}只能二选一，引号就表示字符串,大括号就表示变量或者表达式。要是表达式外面套了层引号就就表示字符串了</p></li><li><p>在 JSX 里面 class 必须写成 className 否则它不识别 class,而且命名采用的是小驼峰法.</p></li><li><p>JSX 里面的元素必须有个包裹层，而且需要闭合</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React基础学记笔记</title>
      <link href="/2019/11/23/reactall/"/>
      <url>/2019/11/23/reactall/</url>
      
        <content type="html"><![CDATA[<h2 id="React-基础学习笔记包括"><a href="#React-基础学习笔记包括" class="headerlink" title="React 基础学习笔记包括"></a>React 基础学习笔记包括</h2><blockquote><p>React 全家桶动画以及 react-redux,thunk,saga 等等</p></blockquote><h3 id="React-基础笔记-简介和特点-一"><a href="#React-基础笔记-简介和特点-一" class="headerlink" title="React 基础笔记(简介和特点)(一)"></a><a href="https://jsopy.gitee.io/2019/11/23/reactone/">React 基础笔记(简介和特点)(一)</a></h3><h3 id="React-基础笔记-JSX-语法-二"><a href="#React-基础笔记-JSX-语法-二" class="headerlink" title="React 基础笔记(JSX 语法)(二)"></a><a href="https://jsopy.gitee.io/2019/11/24/reactbasic2/">React 基础笔记(JSX 语法)(二)</a></h3><h3 id="React-基础笔记-元素渲染-三"><a href="#React-基础笔记-元素渲染-三" class="headerlink" title="React 基础笔记(元素渲染)(三)"></a><a href="https://jsopy.gitee.io/2019/11/25/reactbasic3/">React 基础笔记(元素渲染)(三)</a></h3><h3 id="React-基础笔记-组件-amp-Props-四"><a href="#React-基础笔记-组件-amp-Props-四" class="headerlink" title="React 基础笔记(组件&amp;Props)(四)"></a><a href="https://jsopy.gitee.io/2019/11/26/reactbasic4/">React 基础笔记(组件&amp;Props)(四)</a></h3><h3 id="React-基础笔记-State-amp-生命周期-五"><a href="#React-基础笔记-State-amp-生命周期-五" class="headerlink" title="React 基础笔记(State&amp;生命周期)(五)"></a><a href="https://jsopy.gitee.io/2019/11/27/reactbasic5/">React 基础笔记(State&amp;生命周期)(五)</a></h3><h3 id="React-基础笔记-事件处理-六"><a href="#React-基础笔记-事件处理-六" class="headerlink" title="React 基础笔记(事件处理)(六)"></a><a href="https://jsopy.gitee.io/2019/11/28/reactbasic6/">React 基础笔记(事件处理)(六)</a></h3><h3 id="React-基础笔记-条件渲染-七"><a href="#React-基础笔记-条件渲染-七" class="headerlink" title="React 基础笔记(条件渲染)(七)"></a><a href="https://jsopy.gitee.io/2019/11/29/reactbasic7/">React 基础笔记(条件渲染)(七)</a></h3><h3 id="React-基础笔记-列表-key-八"><a href="#React-基础笔记-列表-key-八" class="headerlink" title="React 基础笔记(列表 key)(八)"></a><a href="https://jsopy.gitee.io/2019/11/30/reactbasic8/">React 基础笔记(列表 key)(八)</a></h3><h3 id="React-基础笔记-表单-九"><a href="#React-基础笔记-表单-九" class="headerlink" title="React 基础笔记(表单)(九)"></a><a href="https://jsopy.gitee.io/2019/12/01/reactbasic9/">React 基础笔记(表单)(九)</a></h3><h3 id="React-基础笔记-父子组件传值-十"><a href="#React-基础笔记-父子组件传值-十" class="headerlink" title="React 基础笔记(父子组件传值)(十)"></a><a href="https://jsopy.gitee.io/2019/12/02/reactbasic10/">React 基础笔记(父子组件传值)(十)</a></h3><h3 id="React-基础笔记-卡槽-十一"><a href="#React-基础笔记-卡槽-十一" class="headerlink" title="React 基础笔记(卡槽)(十一)"></a><a href="https://jsopy.gitee.io/2019/12/03/reactbasic11/">React 基础笔记(卡槽)(十一)</a></h3><h3 id="React-基础笔记-补充说明-ref-语义等等-十二"><a href="#React-基础笔记-补充说明-ref-语义等等-十二" class="headerlink" title="React 基础笔记(补充说明 ref,语义等等)(十二)"></a><a href="https://jsopy.gitee.io/2019/12/04/reactbasic12/">React 基础笔记(补充说明 ref,语义等等)(十二)</a></h3><h3 id="React-基础笔记-使用-PropTypes-进行类型检查-十三"><a href="#React-基础笔记-使用-PropTypes-进行类型检查-十三" class="headerlink" title="React 基础笔记(使用 PropTypes 进行类型检查)(十三)"></a><a href="https://jsopy.gitee.io/2019/12/05/reactbasic13/">React 基础笔记(使用 PropTypes 进行类型检查)(十三)</a></h3><h3 id="React-基础笔记-Redux-基础版本-十四"><a href="#React-基础笔记-Redux-基础版本-十四" class="headerlink" title="React 基础笔记(Redux 基础版本)(十四)"></a><a href="https://jsopy.gitee.io/2019/12/06/reactbasic14/">React 基础笔记(Redux 基础版本)(十四)</a></h3><h3 id="React-基础笔记-Redux-thunk-版本-十五"><a href="#React-基础笔记-Redux-thunk-版本-十五" class="headerlink" title="React 基础笔记(Redux thunk 版本)(十五)"></a><a href="https://jsopy.gitee.io/2019/12/07/reactbasic15/">React 基础笔记(Redux thunk 版本)(十五)</a></h3><h3 id="React-基础笔记-Redux-sage-版本-十六"><a href="#React-基础笔记-Redux-sage-版本-十六" class="headerlink" title="React 基础笔记(Redux sage 版本)(十六)"></a><a href="https://jsopy.gitee.io/2019/12/08/reactbasic16/">React 基础笔记(Redux sage 版本)(十六)</a></h3><h3 id="React-基础笔记-Redux-redux-版本-十七"><a href="#React-基础笔记-Redux-redux-版本-十七" class="headerlink" title="React 基础笔记(Redux-redux 版本)(十七)"></a><a href="https://jsopy.gitee.io/2019/12/09/reactbasic17/">React 基础笔记(Redux-redux 版本)(十七)</a></h3><h3 id="React-基础笔记-redux-拆分成多个小-redux-版本-十八"><a href="#React-基础笔记-redux-拆分成多个小-redux-版本-十八" class="headerlink" title="React 基础笔记(redux 拆分成多个小 redux 版本)(十八)"></a><a href="https://jsopy.gitee.io/2019/12/10/reactbasic18/">React 基础笔记(redux 拆分成多个小 redux 版本)(十八)</a></h3><h3 id="React-基础笔记-CSS-样式冲突-使用中间件-styled-components-版本-十九"><a href="#React-基础笔记-CSS-样式冲突-使用中间件-styled-components-版本-十九" class="headerlink" title="React 基础笔记(CSS 样式冲突, 使用中间件 styled-components 版本)(十九)"></a><a href="https://jsopy.gitee.io/2019/12/11/reactbasic19/">React 基础笔记(CSS 样式冲突, 使用中间件 styled-components 版本)(十九)</a></h3><h3 id="React-基础笔记-CSS-react-transition-group-过渡动画-版本-二十"><a href="#React-基础笔记-CSS-react-transition-group-过渡动画-版本-二十" class="headerlink" title="React 基础笔记(CSS react-transition-group 过渡动画 版本)(二十)"></a><a href="https://jsopy.gitee.io/2019/12/12/reactbasic20/">React 基础笔记(CSS react-transition-group 过渡动画 版本)(二十)</a></h3><h3 id="React-基础笔记-React-路由-版本-二十一"><a href="#React-基础笔记-React-路由-版本-二十一" class="headerlink" title="React 基础笔记(React 路由 版本)(二十一)"></a><a href="https://jsopy.gitee.io/2019/12/13/reactbasic21/">React 基础笔记(React 路由 版本)(二十一)</a></h3>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 基础笔记(简介和特点)(一)</title>
      <link href="/2019/11/23/reactone/"/>
      <url>/2019/11/23/reactone/</url>
      
        <content type="html"><![CDATA[<h1 id="React-基础笔记-简介和特点-一"><a href="#React-基础笔记-简介和特点-一" class="headerlink" title="React 基础笔记(简介和特点)(一)"></a>React 基础笔记(简介和特点)(一)</h1><h2 id="React-简介"><a href="#React-简介" class="headerlink" title="React 简介"></a>React 简介</h2><ol><li><p>react 发展 –Facebook 在构建 instagram 网站的时候遇见两个问题</p></li><li><p>数据绑定的时候，大量操作真实 DOM，性能成本太高</p></li><li><p>网站的数据流向太混乱,不好控制.</p></li></ol><blockquote><p>React 把用户界面抽象成一个个组件，如按钮组件 Button、对话框组件 Dialog、日期组件 Calendar。开发者通过组合这些组件，最终得到功能丰富、可交互的页面。通过引入 JSX 语法，复用组件变得非常容易，同时也能保证组件结构清晰。有了组件这层抽象，React 把代码和真实渲染目标隔离开来，除了可以在浏览器端渲染到 DOM 来开发网页外，还能用于开发原生移动应用</p></blockquote><h2 id="React-特点"><a href="#React-特点" class="headerlink" title="React 特点"></a>React 特点</h2><ul><li><p>声明式设计 – React 采用声明范式,可以轻松描述应用(自动 dom 操作)</p></li><li><p>高效 – React 通过对 DOM 的模拟(虚拟 DOM),最大限度的减少与 DOM 的交互</p></li><li><p>灵活 – React 可以与已知的库或者框架很好的配合</p></li><li><p>(重点)JSX – JSX 是 javascript 语法的拓展</p></li><li><p>(重点)组件 – 通过 React 构建组件,使得代码更加容易得到复用,能够很好的应用在大项目的开发</p></li><li><p>(重点)单向响应的数据流 – React 实现了单向相应的数据流,从而减少了重复代码,这也是它比传统的数据绑定更简单</p></li></ul><blockquote><p>React 的精髓是函数式编程,React 的核心是组件,组件的设计目的是提高代码复用率，降低测试难度和代码复杂度.</p></blockquote><h2 id="React-操作原理"><a href="#React-操作原理" class="headerlink" title="React 操作原理"></a>React 操作原理</h2><ul><li>传统 DOM 更新</li></ul><blockquote><p>在传统页面的开发模式中,每次需要更新页面时,都要手动操作 DOM 来更新</p></blockquote><ul><li>虚拟 DOM 更新</li></ul><blockquote><p>DOM 操作非常昂贵,前端性能开发中性能消耗最大的就是 DOM 操作,而这一部分会让整体项目的代码变得难以维护.React 把真实 DOM 树转换成 JS 对象树也就是虚拟 DOM 存在</p></blockquote><h2 id="React-函数式编程"><a href="#React-函数式编程" class="headerlink" title="React 函数式编程"></a>React 函数式编程</h2><blockquote><p>他的主要思想就是把运算过程尽量写成一系列嵌套的函数调用</p></blockquote><p>函数的编程好处</p><ol><li>代码简洁,快速开发</li><li>方便的代码管理</li><li>代码的热升级</li></ol><h2 id="React-JSX-语法的由来"><a href="#React-JSX-语法的由来" class="headerlink" title="React JSX 语法的由来"></a>React JSX 语法的由来</h2><blockquote><p>JSX 将 HTML 语法直接加入到 JS 代码中,通过翻译器转换到纯 JS 后，由浏览器执行。实际开发中 JSX 在产品打包阶段都已经编译成纯 JS，反而让代码更加直观易于维护</p></blockquote><ol><li><p>编译过程由 Babel 的 JSX 编译器来实现</p></li><li><p>JSX 的官方定义是类 XML 语法的 ECMAscript 扩展</p></li><li><p>组件就是一个集合体,就是把 html,js,css 放在一期形成一个组件,组件的写法就是 jsx 语法编写</p></li></ol><h2 id="React-事件机制"><a href="#React-事件机制" class="headerlink" title="React 事件机制"></a>React 事件机制</h2><ul><li><p>函数声明需要与 render 函数同级,因为在 react.creatClass 传入的是对象,声明的函数也是一个对象,是 React 对象对外暴露的原型链,render 会计算 return 方法,同样计算同级的方法</p></li><li><p>直接写事件机制 onClick={this.函数名}</p></li><li><p>将函数变量封装到全局变量中</p></li><li><p>原型链写法</p></li><li><p>在 jsx 中写逻辑 - 要写在 render 和 return 之间</p></li><li><p>注释的标签方法是</p></li></ul><p><code>{/* */}</code></p><ul><li>组件嵌套不能多个节点渲染，否则最后一个组件覆盖前面的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记</title>
      <link href="/2019/11/21/pythonall/"/>
      <url>/2019/11/21/pythonall/</url>
      
        <content type="html"><![CDATA[<h2 id="目录分类"><a href="#目录分类" class="headerlink" title="目录分类"></a>目录分类</h2><h3 id="数据类型和变量-开篇之字符串-一"><a href="#数据类型和变量-开篇之字符串-一" class="headerlink" title="数据类型和变量(开篇之字符串)(一)"></a><a href="https://jsopy.gitee.io/2020/01/01/pythonbasic1/">数据类型和变量(开篇之字符串)(一)</a></h3><h3 id="数字类型和注释-二"><a href="#数字类型和注释-二" class="headerlink" title="数字类型和注释(二)"></a><a href="https://jsopy.gitee.io/2020/01/02/pythonbasic2/">数字类型和注释(二)</a></h3><h3 id="列表-三"><a href="#列表-三" class="headerlink" title="列表(三)"></a><a href="https://jsopy.gitee.io/2020/01/03/pythonbasic3/">列表(三)</a></h3><h3 id="列表与元祖-四"><a href="#列表与元祖-四" class="headerlink" title="列表与元祖(四)"></a><a href="https://jsopy.gitee.io/2020/01/04/pythonbasic4/">列表与元祖(四)</a></h3><h3 id="IF-语句-五"><a href="#IF-语句-五" class="headerlink" title="IF 语句(五)"></a><a href="https://jsopy.gitee.io/2020/01/05/pythonbasic5/">IF 语句(五)</a></h3><h3 id="字典-六"><a href="#字典-六" class="headerlink" title="字典(六)"></a><a href="https://jsopy.gitee.io/2020/01/06/pythonbasic6/">字典(六)</a></h3><h3 id="用户输入和-while-循环-七"><a href="#用户输入和-while-循环-七" class="headerlink" title="用户输入和 while 循环(七)"></a><a href="https://jsopy.gitee.io/2020/01/07/pythonbasic7/">用户输入和 while 循环(七)</a></h3><h3 id="函数-八"><a href="#函数-八" class="headerlink" title="函数(八)"></a><a href="https://jsopy.gitee.io/2020/01/08/pythonbasic8/">函数(八)</a></h3><h3 id="类-九"><a href="#类-九" class="headerlink" title="类(九)"></a><a href="https://jsopy.gitee.io/2020/01/09/pythonbasic9/">类(九)</a></h3><h3 id="文件和异常-十"><a href="#文件和异常-十" class="headerlink" title="文件和异常(十)"></a><a href="https://jsopy.gitee.io/2020/01/10/pythonbasic10/">文件和异常(十)</a></h3><h3 id="单元测试-十一"><a href="#单元测试-十一" class="headerlink" title="单元测试(十一)"></a><a href="https://jsopy.gitee.io/2020/01/11/pythonbasic11/">单元测试(十一)</a></h3>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中使用数学计算</title>
      <link href="/2019/11/20/vuecha7/"/>
      <url>/2019/11/20/vuecha7/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-中使用数学计算"><a href="#Vue-中使用数学计算" class="headerlink" title="Vue 中使用数学计算"></a>Vue 中使用数学计算</h1><h2 id="计算的话推荐用-Math-js"><a href="#计算的话推荐用-Math-js" class="headerlink" title="计算的话推荐用 Math.js"></a>计算的话推荐用 Math.js</h2><h3 id="1-安装它"><a href="#1-安装它" class="headerlink" title="(1) 安装它"></a>(1) 安装它</h3><blockquote><p>Math.js 是专门为 JavaScript 和 Node.js 提供的一个广泛的数学库。它具有灵活的表达式解析器，支持符号计算，配有大量内置函数和常量，并提供集成解决方案来处理不同的数据类型<br>像数字，大数字(超出安全数的数字)，复数，分数，单位和矩阵。 功能强大，易于使用。</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript">npm install mathjs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="(2)使用"></a>(2)使用</h3><blockquote><p>引用</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> math <span class="token keyword">from</span> <span class="token string">'mathjs'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>使用</p></blockquote><ul><li><p>开方 math.sqrt(4)</p></li><li><p>加法 math.add()</p></li><li><p>减法 math.subtract()</p></li><li><p>除法 math.divide()</p></li><li><p>乘法 math.multiply()</p></li></ul><blockquote><p>加法</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//0.30000000000000004</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">bignumber</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">bignumber</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//'0.3'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>表达式也可以</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript">math<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'sqrt(4) + 2'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数据格式化"><a href="#数据格式化" class="headerlink" title="数据格式化"></a>数据格式化</h2><ul><li><p>千分位</p></li><li><p>金额</p></li><li><p>保留几位小数</p></li><li><p>舍去舍入</p></li></ul><h3 id="必须用类库"><a href="#必须用类库" class="headerlink" title="必须用类库"></a>必须用类库</h3><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="(1)安装"></a>(1)安装</h4><pre class="line-numbers language-javascript"><code class="language-javascript">npm i accounting<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-使用-1"><a href="#2-使用-1" class="headerlink" title="(2)使用"></a>(2)使用</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Default usage:</span>accounting<span class="token punctuation">.</span><span class="token function">formatMoney</span><span class="token punctuation">(</span><span class="token number">12345678</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// $12,345,678.00</span><span class="token comment" spellcheck="true">// European formatting (custom symbol and separators), can also use options object as second parameter:</span>accounting<span class="token punctuation">.</span><span class="token function">formatMoney</span><span class="token punctuation">(</span><span class="token number">4999.99</span><span class="token punctuation">,</span> <span class="token string">'€'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// €4.999,99</span><span class="token comment" spellcheck="true">// Negative values can be formatted nicely:</span>accounting<span class="token punctuation">.</span><span class="token function">formatMoney</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">500000</span><span class="token punctuation">,</span> <span class="token string">'£ '</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// £ -500,000</span><span class="token comment" spellcheck="true">// Simple `format` string allows control of symbol position (%v = value, %s = symbol):</span>accounting<span class="token punctuation">.</span><span class="token function">formatMoney</span><span class="token punctuation">(</span><span class="token number">5318008</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> symbol<span class="token punctuation">:</span> <span class="token string">'GBP'</span><span class="token punctuation">,</span> format<span class="token punctuation">:</span> <span class="token string">'%v %s'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 5,318,008.00 GBP</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="formatNumber"><a href="#formatNumber" class="headerlink" title="formatNumber"></a>formatNumber</h4><pre class="line-numbers language-javascript"><code class="language-javascript">accounting<span class="token punctuation">.</span><span class="token function">formatNumber</span><span class="token punctuation">(</span><span class="token number">5318008</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 5,318,008</span>accounting<span class="token punctuation">.</span><span class="token function">formatNumber</span><span class="token punctuation">(</span><span class="token number">9876543.21</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 9 876 543.210</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="toFixed"><a href="#toFixed" class="headerlink" title="toFixed()"></a>toFixed()</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">0.615</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "0.61"</span>accounting<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">0.615</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "0.62"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="unformat"><a href="#unformat" class="headerlink" title="unformat()"></a>unformat()</h4><pre class="line-numbers language-javascript"><code class="language-javascript">accounting<span class="token punctuation">.</span><span class="token function">unformat</span><span class="token punctuation">(</span><span class="token string">'£ 12,345,678.90 GBP'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 12345678.9</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中使用Stripe</title>
      <link href="/2019/11/18/vuecha6/"/>
      <url>/2019/11/18/vuecha6/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-中使用-Stripe-来验证信用卡"><a href="#Vue-中使用-Stripe-来验证信用卡" class="headerlink" title="Vue 中使用 Stripe 来验证信用卡"></a>Vue 中使用 Stripe 来验证信用卡</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-javascript"><code class="language-javascript">npm i vue<span class="token operator">-</span>stripe<span class="token operator">-</span>elements<span class="token operator">-</span>plus <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="第二部在开始的-index-html-引入-v3"><a href="#第二部在开始的-index-html-引入-v3" class="headerlink" title="第二部在开始的 index.html 引入 v3"></a>第二部在开始的 index.html 引入 v3</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://js.stripe.com/v3/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="重点两个参数"><a href="#重点两个参数" class="headerlink" title="重点两个参数"></a>重点两个参数</h2><blockquote><p>stripe 必须要你自己设定 options 必须要有参数可以参照下面的链接</p></blockquote><blockquote><p><a href="https://stripe.com/docs/stripe.js#element-options" target="_blank" rel="noopener">https://stripe.com/docs/stripe.js#element-options</a></p></blockquote><h2 id="验证信用卡号，CVC，过期日期"><a href="#验证信用卡号，CVC，过期日期" class="headerlink" title="验证信用卡号，CVC，过期日期"></a>验证信用卡号，CVC，过期日期</h2><blockquote><p>验证 Number,cvc,过期时间</p></blockquote><blockquote><p>完整版</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>credit-card-inputs<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ complete }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>card-number</span>      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stripe-element card-number<span class="token punctuation">"</span></span>      <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cardNumber<span class="token punctuation">"</span></span>      <span class="token attr-name">:stripe</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stripe<span class="token punctuation">"</span></span>      <span class="token attr-name">:options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>options<span class="token punctuation">"</span></span>      <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number <span class="token punctuation">=</span> $event.complete<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>card-expiry</span>      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stripe-element card-expiry<span class="token punctuation">"</span></span>      <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cardExpiry<span class="token punctuation">"</span></span>      <span class="token attr-name">:stripe</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stripe<span class="token punctuation">"</span></span>      <span class="token attr-name">:options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>options<span class="token punctuation">"</span></span>      <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>expiry <span class="token punctuation">=</span> $event.complete<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>card-cvc</span>      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stripe-element card-cvc<span class="token punctuation">"</span></span>      <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cardCvc<span class="token punctuation">"</span></span>      <span class="token attr-name">:stripe</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stripe<span class="token punctuation">"</span></span>      <span class="token attr-name">:options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>options<span class="token punctuation">"</span></span>      <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cvc <span class="token punctuation">=</span> $event.complete<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span> CardNumber<span class="token punctuation">,</span> CardExpiry<span class="token punctuation">,</span> CardCvc <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-stripe-elements-plus'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'stripe'</span><span class="token punctuation">,</span> <span class="token string">'options'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        complete<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        number<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        expiry<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        cvc<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span> CardNumber<span class="token punctuation">,</span> CardExpiry<span class="token punctuation">,</span> CardCvc <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>complete <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>expiry <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cvc        <span class="token comment" spellcheck="true">// field completed, find field to focus next</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>expiry<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>cardExpiry<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>cvc<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>cardCvc<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>expiry<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>cvc<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>cardCvc<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>cardNumber<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// no focus magic for the CVC field as it gets complete with three</span>        <span class="token comment" spellcheck="true">// numbers, but can also have four</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">expiry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">cvc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.credit-card-inputs.complete</span> </span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">2</span>px solid green<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="支持的方法"><a href="#支持的方法" class="headerlink" title="支持的方法"></a>支持的方法</h2><ul><li>createToken()</li></ul><blockquote><p><a href="https://stripe.com/docs/stripe-js/reference#stripe-create-token" target="_blank" rel="noopener">https://stripe.com/docs/stripe-js/reference#stripe-create-token</a></p></blockquote><ul><li>createSource()</li></ul><blockquote><p><a href="https://stripe.com/docs/stripe-js/reference#stripe-create-source" target="_blank" rel="noopener">https://stripe.com/docs/stripe-js/reference#stripe-create-source</a></p></blockquote><ul><li>retrieveSource()</li></ul><blockquote><p><a href="https://stripe.com/docs/stripe-js/reference#stripe-retrieve-source" target="_blank" rel="noopener">https://stripe.com/docs/stripe-js/reference#stripe-retrieve-source</a></p></blockquote><ul><li>paymentRequest()</li></ul><blockquote><p><a href="https://stripe.com/docs/stripe-js/reference#stripe-payment-request" target="_blank" rel="noopener">https://stripe.com/docs/stripe-js/reference#stripe-payment-request</a></p></blockquote><ul><li>redirectToCheckout()</li></ul><blockquote><p><a href="https://stripe.com/docs/stripe-js/reference#stripe-redirect-to-checkout" target="_blank" rel="noopener">https://stripe.com/docs/stripe-js/reference#stripe-redirect-to-checkout</a></p></blockquote><ul><li>retrievePaymentIntent()</li></ul><blockquote><p><a href="https://stripe.com/docs/stripe-js/reference#stripe-retrieve-payment-intent" target="_blank" rel="noopener">https://stripe.com/docs/stripe-js/reference#stripe-retrieve-payment-intent</a></p></blockquote><ul><li>handleCardPayment()</li></ul><blockquote><p><a href="https://stripe.com/docs/stripe-js/reference#stripe-handle-card-payment" target="_blank" rel="noopener">https://stripe.com/docs/stripe-js/reference#stripe-handle-card-payment</a></p></blockquote><ul><li>handleCardSetup()</li></ul><blockquote><p><a href="https://stripe.com/docs/stripe-js/reference#stripe-handle-card-setup" target="_blank" rel="noopener">https://stripe.com/docs/stripe-js/reference#stripe-handle-card-setup</a></p></blockquote><ul><li>handleCardAction()</li></ul><blockquote><p><a href="https://stripe.com/docs/stripe-js/reference#stripe-handle-card-action" target="_blank" rel="noopener">https://stripe.com/docs/stripe-js/reference#stripe-handle-card-action</a></p></blockquote><ul><li>confirmPaymentIntent()</li></ul><blockquote><p><a href="https://stripe.com/docs/stripe-js/reference#stripe-confirm-payment-intent" target="_blank" rel="noopener">https://stripe.com/docs/stripe-js/reference#stripe-confirm-payment-intent</a></p></blockquote><ul><li>createPaymentMethod()</li></ul><blockquote><p><a href="https://stripe.com/docs/stripe-js/reference#stripe-create-payment-method" target="_blank" rel="noopener">https://stripe.com/docs/stripe-js/reference#stripe-create-payment-method</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中使用Ueedit富文本</title>
      <link href="/2019/11/16/vuecha5/"/>
      <url>/2019/11/16/vuecha5/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-中使用-Ueedit-富文本"><a href="#Vue-中使用-Ueedit-富文本" class="headerlink" title="Vue 中使用 Ueedit 富文本"></a>Vue 中使用 Ueedit 富文本</h1><h2 id="1-安装-vue-ueditor-wrap"><a href="#1-安装-vue-ueditor-wrap" class="headerlink" title="(1) 安装 vue-ueditor-wrap"></a>(1) 安装 vue-ueditor-wrap</h2><pre class="line-numbers language-javascript"><code class="language-javascript">cnpm i vue<span class="token operator">-</span>ueditor<span class="token operator">-</span>wrap# 或者yarn add vue<span class="token operator">-</span>ueditor<span class="token operator">-</span>wrap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-下载-Ueedit-文件，并使用"><a href="#2-下载-Ueedit-文件，并使用" class="headerlink" title="(2) 下载 Ueedit 文件，并使用"></a>(2) 下载 Ueedit 文件，并使用</h2><p><a href="http://ueditor.baidu.com/website/download.html" target="_blank" rel="noopener">点此下载 Ueedit</a></p><h3 id="下载好以后在-public-目录下新建一个文件夹起名叫-UEditor-把对应的文件放进去"><a href="#下载好以后在-public-目录下新建一个文件夹起名叫-UEditor-把对应的文件放进去" class="headerlink" title="下载好以后在 public 目录下新建一个文件夹起名叫 UEditor,把对应的文件放进去"></a>下载好以后在 public 目录下新建一个文件夹起名叫 UEditor,把对应的文件放进去</h3><h3 id="引入-vue-ueditor-wrap-组件"><a href="#引入-vue-ueditor-wrap-组件" class="headerlink" title="引入 vue-ueditor-wrap 组件"></a>引入 vue-ueditor-wrap 组件</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> VueUeditorWrap <span class="token keyword">from</span> <span class="token string">'vue-ueditor-wrap'</span> <span class="token comment" spellcheck="true">// ES6 Module</span><span class="token comment" spellcheck="true">// 或者</span><span class="token keyword">const</span> VueUeditorWrap <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-ueditor-wrap'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// CommonJS</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="你可以通过外链的形式直接引入-cdn-来使用"><a href="#你可以通过外链的形式直接引入-cdn-来使用" class="headerlink" title="你可以通过外链的形式直接引入 cdn 来使用"></a>你可以通过外链的形式直接引入 cdn 来使用</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue-ueditor-wrap@latest/lib/vue-ueditor-wrap.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="注册组件"><a href="#注册组件" class="headerlink" title="注册组件"></a>注册组件</h3><pre class="line-numbers language-javascript"><code class="language-javascript">components<span class="token punctuation">:</span> <span class="token punctuation">{</span>  VueUeditorWrap<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 或者在 main.js 里将它注册为全局组件</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'vue-ueditor-wrap'</span><span class="token punctuation">,</span> VueUeditorWrap<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="v-model-绑定数据"><a href="#v-model-绑定数据" class="headerlink" title="v-model 绑定数据"></a>v-model 绑定数据</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vue-ueditor-wrap</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vue-ueditor-wrap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>data 数据里面</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript">data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    msg<span class="token punctuation">:</span> <span class="token string">'&lt;h2>&lt;img src="http://img.baidu.com/hi/jx2/j_0003.gif"/>Vue + UEditor + v-model双向绑定&lt;/h2>'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="这个时候页面应该一片空白，需要补充下数据"><a href="#这个时候页面应该一片空白，需要补充下数据" class="headerlink" title="这个时候页面应该一片空白，需要补充下数据"></a>这个时候页面应该一片空白，需要补充下数据</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vue-ueditor-wrap</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name">:config</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myConfig<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vue-ueditor-wrap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>data 里面的数据</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript">data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    msg<span class="token punctuation">:</span> <span class="token string">'&lt;h2>&lt;img src="http://img.baidu.com/hi/jx2/j_0003.gif"/>Vue + UEditor + v-model双向绑定&lt;/h2>'</span><span class="token punctuation">,</span>    myConfig<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 编辑器不自动被内容撑高</span>      autoHeightEnabled<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 初始容器高度</span>      initialFrameHeight<span class="token punctuation">:</span> <span class="token number">240</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 初始容器宽度</span>      initialFrameWidth<span class="token punctuation">:</span> <span class="token string">'100%'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 上传文件接口（这个地址是我为了方便各位体验文件上传功能搭建的临时接口，请勿在生产环境使用！！！）</span>      serverUrl<span class="token punctuation">:</span> <span class="token string">'http://35.201.165.105:8000/controller.php'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// UEditor 资源文件的存放路径，如果你使用的是 vue-cli 生成的项目，通常不需要设置该选项，vue-ueditor-wrap 会自动处理常见的情况，如果需要特殊配置，参考下方的常见问题2</span>      UEDITOR_HOME_URL<span class="token punctuation">:</span> <span class="token string">'/static/UEditor/'</span> <span class="token comment" spellcheck="true">//要是cli3.0的话直接就是/UEditor</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="到此为止-UEditor-组件正式完成。"><a href="#到此为止-UEditor-组件正式完成。" class="headerlink" title="到此为止 UEditor 组件正式完成。"></a>到此为止 UEditor 组件正式完成。</h3><h2 id="高级版本"><a href="#高级版本" class="headerlink" title="高级版本"></a>高级版本</h2><h3 id="1-如何获取-UEditor-实例"><a href="#1-如何获取-UEditor-实例" class="headerlink" title="(1) 如何获取 UEditor 实例"></a>(1) 如何获取 UEditor 实例</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vue-ueditor-wrap</span> <span class="token attr-name">@ready</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ready<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vue-ueditor-wrap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>JS 代码</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript">methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  ready <span class="token punctuation">(</span>editorInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`编辑器实例</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>editorInstance<span class="token punctuation">.</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: `</span></span><span class="token punctuation">,</span> editorInstance<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-设置组件的-beforeDestroy-钩子函数里销毁-UEditor-实例"><a href="#2-设置组件的-beforeDestroy-钩子函数里销毁-UEditor-实例" class="headerlink" title="(2)设置组件的 beforeDestroy 钩子函数里销毁 UEditor 实例"></a>(2)设置组件的 beforeDestroy 钩子函数里销毁 UEditor 实例</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vue-ueditor-wrap</span> <span class="token attr-name">:destroy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vue-ueditor-wrap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-每个-vue-ueditor-wrap-组件都是独立的，你甚至可以使用-v-for-一次渲染-100-个"><a href="#3-每个-vue-ueditor-wrap-组件都是独立的，你甚至可以使用-v-for-一次渲染-100-个" class="headerlink" title="(3) 每个 vue-ueditor-wrap 组件都是独立的，你甚至可以使用 v-for 一次渲染 100 个"></a>(3) 每个 vue-ueditor-wrap 组件都是独立的，你甚至可以使用 v-for 一次渲染 100 个</h3>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中使用无缝滚动</title>
      <link href="/2019/11/15/vuecha4/"/>
      <url>/2019/11/15/vuecha4/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-实现无缝滚动-vue-seamless-scroll"><a href="#Vue-实现无缝滚动-vue-seamless-scroll" class="headerlink" title="Vue 实现无缝滚动 vue-seamless-scroll"></a>Vue 实现无缝滚动 vue-seamless-scroll</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="(1) 安装"></a>(1) 安装</h2><pre class="line-numbers language-javascript"><code class="language-javascript">npm install vue<span class="token operator">-</span>seamless<span class="token operator">-</span>scroll <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-在-main-js-中使用"><a href="#2-在-main-js-中使用" class="headerlink" title="(2) 在 main.js 中使用"></a>(2) 在 main.js 中使用</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// **main.js**</span><span class="token comment" spellcheck="true">// 1.global install</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> scroll <span class="token keyword">from</span> <span class="token string">'vue-seamless-scroll'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>scroll<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//or you can set componentName default componentName is vue-seamless-scroll</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>scroll<span class="token punctuation">,</span> <span class="token punctuation">{</span> componentName<span class="token punctuation">:</span> <span class="token string">'scroll-seamless'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="(3)使用"></a>(3)使用</h2><blockquote><p>注意：需要给父容器一个 height 和:data=’Array’和 overfolw:hidden;左右滚动需要给 ul 容器一个初始化 css width。</p></blockquote><blockquote><p>参数 direction 0 down、 1 up 、 2 left 、 3 right</p></blockquote><blockquote><p>参数 autoPlay true or false</p></blockquote><blockquote><p>参数 navigation true or false</p></blockquote><blockquote><p>参数 ScrollEnd 方法 回调方法</p></blockquote><blockquote><p>参数 limitMoveNum 最低多少个数据开始滚动</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vue-seamless-scroll</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>listData<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>seamless-warp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in listData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span>        <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vue-seamless-scroll</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.seamless-warp</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">229</span>px<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        listData<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'无缝滚动第一行无缝滚动第一行'</span><span class="token punctuation">,</span>            date<span class="token punctuation">:</span> <span class="token string">'2017-12-16'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'无缝滚动第二行无缝滚动第二行'</span><span class="token punctuation">,</span>            date<span class="token punctuation">:</span> <span class="token string">'2017-12-16'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'无缝滚动第三行无缝滚动第三行'</span><span class="token punctuation">,</span>            date<span class="token punctuation">:</span> <span class="token string">'2017-12-16'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'无缝滚动第四行无缝滚动第四行'</span><span class="token punctuation">,</span>            date<span class="token punctuation">:</span> <span class="token string">'2017-12-16'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'无缝滚动第五行无缝滚动第五行'</span><span class="token punctuation">,</span>            date<span class="token punctuation">:</span> <span class="token string">'2017-12-16'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'无缝滚动第六行无缝滚动第六行'</span><span class="token punctuation">,</span>            date<span class="token punctuation">:</span> <span class="token string">'2017-12-16'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'无缝滚动第七行无缝滚动第七行'</span><span class="token punctuation">,</span>            date<span class="token punctuation">:</span> <span class="token string">'2017-12-16'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'无缝滚动第八行无缝滚动第八行'</span><span class="token punctuation">,</span>            date<span class="token punctuation">:</span> <span class="token string">'2017-12-16'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'无缝滚动第九行无缝滚动第九行'</span><span class="token punctuation">,</span>            date<span class="token punctuation">:</span> <span class="token string">'2017-12-16'</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>向下滚动</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vue-seamless-scroll</span>    <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>listData<span class="token punctuation">"</span></span>    <span class="token attr-name">:class-option</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classOption<span class="token punctuation">"</span></span>    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>seamless-warp<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in listData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span>        <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vue-seamless-scroll</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.seamless-warp</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">229</span>px<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        listData<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'无缝滚动第一行无缝滚动第一行'</span><span class="token punctuation">,</span>            date<span class="token punctuation">:</span> <span class="token string">'2017-12-16'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'无缝滚动第二行无缝滚动第二行'</span><span class="token punctuation">,</span>            date<span class="token punctuation">:</span> <span class="token string">'2017-12-16'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'无缝滚动第三行无缝滚动第三行'</span><span class="token punctuation">,</span>            date<span class="token punctuation">:</span> <span class="token string">'2017-12-16'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'无缝滚动第四行无缝滚动第四行'</span><span class="token punctuation">,</span>            date<span class="token punctuation">:</span> <span class="token string">'2017-12-16'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'无缝滚动第五行无缝滚动第五行'</span><span class="token punctuation">,</span>            date<span class="token punctuation">:</span> <span class="token string">'2017-12-16'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'无缝滚动第六行无缝滚动第六行'</span><span class="token punctuation">,</span>            date<span class="token punctuation">:</span> <span class="token string">'2017-12-16'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'无缝滚动第七行无缝滚动第七行'</span><span class="token punctuation">,</span>            date<span class="token punctuation">:</span> <span class="token string">'2017-12-16'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'无缝滚动第八行无缝滚动第八行'</span><span class="token punctuation">,</span>            date<span class="token punctuation">:</span> <span class="token string">'2017-12-16'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'无缝滚动第九行无缝滚动第九行'</span><span class="token punctuation">,</span>            date<span class="token punctuation">:</span> <span class="token string">'2017-12-16'</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">classOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          direction<span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>向左边滚动</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vue-seamless-scroll</span>    <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>newsList<span class="token punctuation">"</span></span>    <span class="token attr-name">:class-option</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>optionLeft<span class="token punctuation">"</span></span>    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>seamless-warp2<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in newsList<span class="token punctuation">"</span></span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vue-seamless-scroll</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.seamless-warp2</span> </span><span class="token punctuation">{</span>    <span class="token selector">overflow: hidden;    height: 25px;    width: 380px;    ul<span class="token class">.item</span> </span><span class="token punctuation">{</span>      <span class="token selector">width: 580px;      li </span><span class="token punctuation">{</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        newsList<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'A simple, seamless scrolling for Vue.js'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'A curated list of awesome things related to Vue.js'</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">optionLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          direction<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>          limitMoveNum<span class="token punctuation">:</span> <span class="token number">2</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中使用图片轮播</title>
      <link href="/2019/11/14/vuecha3/"/>
      <url>/2019/11/14/vuecha3/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-中使用-vue-awesome-swiper"><a href="#Vue-中使用-vue-awesome-swiper" class="headerlink" title="Vue 中使用 vue-awesome-swiper"></a>Vue 中使用 vue-awesome-swiper</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="(1) 安装"></a>(1) 安装</h2><blockquote><p>这里特别注意的就是必须要 2 版本的</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript">npm i vue<span class="token operator">-</span>awesome<span class="token operator">-</span>swiper@<span class="token number">2</span> <span class="token operator">-</span>S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-在-main-js-中引入组件"><a href="#2-在-main-js-中引入组件" class="headerlink" title="(2)在 main.js 中引入组件"></a>(2)在 main.js 中引入组件</h2><pre class="line-numbers language-javascript"><code class="language-javascript">mport Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token keyword">import</span> FastClick <span class="token keyword">from</span> <span class="token string">'fastclick'</span><span class="token keyword">import</span> <span class="token string">'styles/reset.css'</span><span class="token keyword">import</span> <span class="token string">'styles/border.css'</span><span class="token keyword">import</span> <span class="token string">'styles/iconfont.css'</span><span class="token keyword">import</span> VueAwesomeSwiper <span class="token keyword">from</span> <span class="token string">'vue-awesome-swiper'</span> <span class="token comment" spellcheck="true">//必须要引入</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store/index.js'</span><span class="token comment" spellcheck="true">// require styles</span><span class="token keyword">import</span> <span class="token string">'swiper/dist/css/swiper.css'</span> <span class="token comment" spellcheck="true">//必须要引入</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>FastClick<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">)</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueAwesomeSwiper<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//必须要使用的</span><span class="token comment" spellcheck="true">/* eslint-disable no-new */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span>  store<span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    App  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;App/>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-自己建一个基础的-swiper-vue-组件"><a href="#3-自己建一个基础的-swiper-vue-组件" class="headerlink" title="(3) 自己建一个基础的 swiper.vue 组件"></a>(3) 自己建一个基础的 swiper.vue 组件</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>swiperwrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 加v-if就是为了防止轮播图展现最后一个，必须要加length,这样等数据出来后就会看的到 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper</span> <span class="token attr-name">:options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>swiperOption<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mySwiper<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SwiperList.length<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- slides --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-slide</span>        <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item, index) in banners<span class="token punctuation">"</span></span>        <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span>        <span class="token attr-name">@click.native</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gotourl<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imgcontent<span class="token punctuation">"</span></span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.src<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-slide</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- Optional controls --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>swiper-pagination<span class="token punctuation">"</span></span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pagination<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'HomeSwiper'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        banners<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            src<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@/assets/images/banner1.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            link<span class="token punctuation">:</span> <span class="token string">'http://www.baidu.com'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            src<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@/assets/images/banner2.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            link<span class="token punctuation">:</span> <span class="token string">'http://piao.qunar.com/touch/'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            src<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@/assets/images/banner3.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            link<span class="token punctuation">:</span> <span class="token string">'http://www.sohu.com'</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        swiperOption<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// some swiper options/callbacks</span>          <span class="token comment" spellcheck="true">// 所有的参数同 swiper 官方 api 参数</span>          <span class="token comment" spellcheck="true">// ...</span>          autoplay<span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>          autoplayDisableOnInteraction<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          loop<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          pagination<span class="token punctuation">:</span> <span class="token string">'.swiper-pagination'</span><span class="token punctuation">,</span>          paginationType<span class="token punctuation">:</span> <span class="token string">'bullets'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">swiper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>mySwiper<span class="token punctuation">.</span>swiper      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// current swiper instance</span>      <span class="token comment" spellcheck="true">// 然后你就可以使用当前上下文内的swiper对象去做你想做的事了</span>      <span class="token comment" spellcheck="true">// console.log('this is current swiper instance object', this.swiper)</span>      <span class="token comment" spellcheck="true">// this.swiper.slideTo(3, 1000, false)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">gotourl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>swiper<span class="token punctuation">.</span>activeIndex        window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>banners<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>link      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token atrule"><span class="token rule">@import</span> <span class="token string">'~styles/common.less'</span><span class="token punctuation">;</span></span>  <span class="token selector"><span class="token class">.swiperwrapper</span> </span><span class="token punctuation">{</span>    <span class="token selector">width: 100%;    height: 26<span class="token class">.6vw</span>;    background: <span class="token id">#ccc</span>;    margin-bottom: 0<span class="token class">.2rem</span>;    <span class="token class">.imgcontent</span> </span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>      <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.swiper-pagination</span> </span><span class="token punctuation">{</span>      <span class="token selector"><span class="token class">.swiper-pagination-bullet</span> </span><span class="token punctuation">{</span>        <span class="token selector">width: 10px;        height: 10px;        background: white;        opacity: 1;        &amp;<span class="token class">.swiper-pagination-bullet-active</span> </span><span class="token punctuation">{</span>          <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中使用vue-lottie动画</title>
      <link href="/2019/11/13/vuecha2/"/>
      <url>/2019/11/13/vuecha2/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-中的动画"><a href="#Vue-中的动画" class="headerlink" title="Vue 中的动画"></a>Vue 中的动画</h1><h2 id="vue-lottie-使用-这个类库主要就是加载-JSON-形成动画"><a href="#vue-lottie-使用-这个类库主要就是加载-JSON-形成动画" class="headerlink" title="vue-lottie 使用 这个类库主要就是加载 JSON 形成动画"></a>vue-lottie 使用 这个类库主要就是加载 JSON 形成动画</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="(1) 安装"></a>(1) 安装</h3><pre class="line-numbers language-javascript"><code class="language-javascript">npm install <span class="token operator">--</span>save vue<span class="token operator">-</span>lottie<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-基础组件必须要有"><a href="#2-基础组件必须要有" class="headerlink" title="(2) 基础组件必须要有"></a>(2) 基础组件必须要有</h3><ul><li>lottie.vue</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">style</span><span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lavContainer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> lottie <span class="token keyword">from</span> <span class="token string">'lottie-web'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    props<span class="token punctuation">:</span> <span class="token punctuation">{</span>      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>        required<span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      height<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>      width<span class="token punctuation">:</span> Number    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        style<span class="token punctuation">:</span> <span class="token punctuation">{</span>          width<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">?</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px`</span></span> <span class="token punctuation">:</span> <span class="token string">'100%'</span><span class="token punctuation">,</span>          height<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">?</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px`</span></span> <span class="token punctuation">:</span> <span class="token string">'100%'</span><span class="token punctuation">,</span>          overflow<span class="token punctuation">:</span> <span class="token string">'hidden'</span><span class="token punctuation">,</span>          margin<span class="token punctuation">:</span> <span class="token string">'0 auto'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>anim <span class="token operator">=</span> lottie<span class="token punctuation">.</span><span class="token function">loadAnimation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        container<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>lavContainer<span class="token punctuation">,</span>        renderer<span class="token punctuation">:</span> <span class="token string">'svg'</span><span class="token punctuation">,</span>        loop<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>loop <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        autoplay<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>autoplay <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        animationData<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>animationData<span class="token punctuation">,</span>        rendererSettings<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>rendererSettings      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'animCreated'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>anim<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-使用的时候，引用-json-必须要有-default-否则会报错"><a href="#3-使用的时候，引用-json-必须要有-default-否则会报错" class="headerlink" title="(3)使用的时候，引用 json 必须要有 default 否则会报错"></a>(3)使用的时候，引用 json 必须要有 default 否则会报错</h3><ul><li>json 文件可以去官网下载 <a href="https://lottiefiles.com/" target="_blank" rel="noopener">点击下载</a></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lottie</span>      <span class="token attr-name">:options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultOptions<span class="token punctuation">"</span></span>      <span class="token attr-name">:height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span>      <span class="token attr-name">:width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">v-on:</span>animCreated</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleAnimation<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Speed: x{{animationSpeed}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>range<span class="token punctuation">"</span></span>        <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>        <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>        <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span>        <span class="token attr-name">step</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.5<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">v-on:</span>change</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onSpeedChange<span class="token punctuation">"</span></span>        <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>animationSpeed<span class="token punctuation">"</span></span>      <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stop<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>stop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pause<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>pause<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>play<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>play<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> Lottie <span class="token keyword">from</span> <span class="token string">'@/pages/Common/Lottie'</span>  <span class="token comment" spellcheck="true">// import * as animationData from '@/assets/197-glow-loading.json';</span>  <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> animationData <span class="token keyword">from</span> <span class="token string">'@/assets/data.json'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      Lottie<span class="token punctuation">:</span> Lottie    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        defaultOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span> animationData<span class="token punctuation">:</span> animationData<span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 必须有default</span>        animationSpeed<span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      handleAnimation<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>anim<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>anim <span class="token operator">=</span> anim      <span class="token punctuation">}</span><span class="token punctuation">,</span>      stop<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>anim<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      play<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>anim<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      pause<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>anim<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      onSpeedChange<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>anim<span class="token punctuation">.</span><span class="token function">setSpeed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>animationSpeed<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-axios-中使用-loading-动画"><a href="#4-axios-中使用-loading-动画" class="headerlink" title="(4) axios 中使用 loading 动画"></a>(4) axios 中使用 loading 动画</h3><h4 id="i-在-vuex-中写一个状态来控制-loading-组件的显示和隐藏"><a href="#i-在-vuex-中写一个状态来控制-loading-组件的显示和隐藏" class="headerlink" title="(i)在 vuex 中写一个状态来控制 loading 组件的显示和隐藏"></a>(i)在 vuex 中写一个状态来控制 loading 组件的显示和隐藏</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>    isShow<span class="token punctuation">:</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ii-Axios-拦截器配置"><a href="#ii-Axios-拦截器配置" class="headerlink" title="(ii) Axios 拦截器配置"></a>(ii) Axios 拦截器配置</h4><pre class="line-numbers language-javascript"><code class="language-javascript">axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>  store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//在请求发出之前进行一些操作</span>  <span class="token keyword">return</span> config<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//定义一个响应拦截器</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>  store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">//在这里对返回的数据进行处理</span>  <span class="token keyword">return</span> config<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="iii-在-app-vue-中引入-loading-组件"><a href="#iii-在-app-vue-中引入-loading-组件" class="headerlink" title="(iii)在 app.vue 中引入 loading 组件"></a>(iii)在 app.vue 中引入 loading 组件</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>loading v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"this.$store.state.isShow"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>loading<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue双语</title>
      <link href="/2019/11/12/vuecha1/"/>
      <url>/2019/11/12/vuecha1/</url>
      
        <content type="html"><![CDATA[<h1 id="在-Vue-中使用-vue-i18n，配套双语"><a href="#在-Vue-中使用-vue-i18n，配套双语" class="headerlink" title="在 Vue 中使用 vue-i18n，配套双语"></a>在 Vue 中使用 vue-i18n，配套双语</h1><h2 id="1-安装-vue-i18n"><a href="#1-安装-vue-i18n" class="headerlink" title="1 安装 vue-i18n"></a>1 安装 vue-i18n</h2><pre class="line-numbers language-javascript"><code class="language-javascript">npm install vue<span class="token operator">-</span>i18n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2 配置文件"></a>2 配置文件</h2><blockquote><p>在 src 目录下新建一个 i18n 文件夹，在 i18n 文件夹里分别创建 i18n.js、langs 文件夹，在 langs 文件夹下面创建你的语言文件（cn.js/en.js/ja.js）和 index.js 文件</p></blockquote><p><img src="http://qiniu.sadfog.com/222.png" alt="结构"></p><h2 id="3-i18n-js"><a href="#3-i18n-js" class="headerlink" title="3 i18n.js"></a>3 i18n.js</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueI18n <span class="token keyword">from</span> <span class="token string">'vue-i18n'</span><span class="token keyword">import</span> messages <span class="token keyword">from</span> <span class="token string">'./langs'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueI18n<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//从localStorage中拿到用户的语言选择，如果没有，那默认中文。</span><span class="token keyword">const</span> i18n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueI18n</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  locale<span class="token punctuation">:</span> localStorage<span class="token punctuation">.</span>lang <span class="token operator">||</span> <span class="token string">'cn'</span><span class="token punctuation">,</span>  messages<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> i18n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-index-js"><a href="#4-index-js" class="headerlink" title="4 index.js"></a>4 index.js</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> en <span class="token keyword">from</span> <span class="token string">'./en'</span><span class="token keyword">import</span> cn <span class="token keyword">from</span> <span class="token string">'./cn'</span><span class="token keyword">import</span> ja <span class="token keyword">from</span> <span class="token string">'./ja'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  en<span class="token punctuation">,</span>  cn<span class="token punctuation">,</span>  ja<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-cn-js"><a href="#5-cn-js" class="headerlink" title="5 cn.js"></a>5 cn.js</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> cn <span class="token operator">=</span> <span class="token punctuation">{</span>  message<span class="token punctuation">:</span> <span class="token punctuation">{</span>    hello<span class="token punctuation">:</span> <span class="token string">'你好'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> cn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-en-js"><a href="#6-en-js" class="headerlink" title="6 en.js"></a>6 en.js</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> en <span class="token operator">=</span> <span class="token punctuation">{</span>  message<span class="token punctuation">:</span> <span class="token punctuation">{</span>    hello<span class="token punctuation">:</span> <span class="token string">'hello'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> en<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在配置语言包的时候，key 值一定要保持统一，因为 i18n 是通过你的 key 值来切换语言的，如果 key 值有误，就不能正确的切换语言包，这一点千万要注意</p></blockquote><h2 id="7-引用-main-js"><a href="#7-引用-main-js" class="headerlink" title="7 引用 main.js"></a>7 引用 main.js</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">import</span> i18n <span class="token keyword">from</span> <span class="token string">'./i18n/i18n'</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  i18n<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//加上i18n</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;App/>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="配置页面"><a href="#配置页面" class="headerlink" title="配置页面"></a>配置页面</h1><h2 id="HTML-部分"><a href="#HTML-部分" class="headerlink" title="HTML 部分"></a>HTML 部分</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{$t('message.hello')}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>//此时应该是中文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>switchLang(<span class="token punctuation">'</span>en<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>英语<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>switchLang(<span class="token punctuation">'</span>cn<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>switchLang(<span class="token punctuation">'</span>ja<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>日语<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Js-部分"><a href="#Js-部分" class="headerlink" title="Js 部分"></a>Js 部分</h2><pre class="line-numbers language-javascript"><code class="language-javascript">methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">switchLang</span><span class="token punctuation">(</span>lang<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$i18n<span class="token punctuation">.</span>locale <span class="token operator">=</span> lang        <span class="token comment" spellcheck="true">//把语言保存在localStorage中</span>        localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'lang'</span><span class="token punctuation">,</span>lang<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这样可以正常使用了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue技巧和插件合集</title>
      <link href="/2019/11/11/vuehigh/"/>
      <url>/2019/11/11/vuehigh/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-中使用双语"><a href="#Vue-中使用双语" class="headerlink" title="Vue 中使用双语"></a>Vue 中使用双语</h1><p><a href="https://jsopy.gitee.io/2019/11/12/vuecha1/">点此跳转</a></p><h1 id="vue-中使用-vue-lottie-动画"><a href="#vue-中使用-vue-lottie-动画" class="headerlink" title="vue 中使用 vue-lottie 动画"></a>vue 中使用 vue-lottie 动画</h1><p><a href="https://jsopy.gitee.io/2019/11/13/vuecha2/">点此跳转</a></p><h1 id="vue-中使用-swiper-图片轮播"><a href="#vue-中使用-swiper-图片轮播" class="headerlink" title="vue 中使用 swiper 图片轮播"></a>vue 中使用 swiper 图片轮播</h1><p><a href="https://jsopy.gitee.io/2019/11/14/vuecha3/">点此跳转</a></p><h1 id="vue-中使用无缝滚动"><a href="#vue-中使用无缝滚动" class="headerlink" title="vue 中使用无缝滚动"></a>vue 中使用无缝滚动</h1><p><a href="https://jsopy.gitee.io/2019/11/15/vuecha4/">点此跳转</a></p><h1 id="vue-中使用-Ueedit-富文本"><a href="#vue-中使用-Ueedit-富文本" class="headerlink" title="vue 中使用 Ueedit 富文本"></a>vue 中使用 Ueedit 富文本</h1><p><a href="https://jsopy.gitee.io/2019/11/16/vuecha5/">点此跳转</a></p><h1 id="vue-中使用-Stripe-验证美国信用卡"><a href="#vue-中使用-Stripe-验证美国信用卡" class="headerlink" title="vue 中使用 Stripe 验证美国信用卡"></a>vue 中使用 Stripe 验证美国信用卡</h1><p><a href="https://jsopy.gitee.io/2019/11/18/vuecha6/">点此跳转</a></p><h1 id="vue-中使用数学计算-Math-和金融验证"><a href="#vue-中使用数学计算-Math-和金融验证" class="headerlink" title="vue 中使用数学计算(Math 和金融验证)"></a>vue 中使用数学计算(Math 和金融验证)</h1><p><a href="https://jsopy.gitee.io/2019/11/20/vuecha7/">点此跳转</a></p><h1 id="vue-中动画使用-Velocity"><a href="#vue-中动画使用-Velocity" class="headerlink" title="vue 中动画使用 Velocity"></a>vue 中动画使用 Velocity</h1><p><a href="https://jsopy.gitee.io/2019/12/26/vuecha8/">点此跳转</a></p><h1 id="vue-中使用-iframe"><a href="#vue-中使用-iframe" class="headerlink" title="vue 中使用 iframe"></a>vue 中使用 iframe</h1><p><a href="https://jsopy.gitee.io/2020/01/12/vuecha9/">点此跳转</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios</title>
      <link href="/2019/11/10/axios/"/>
      <url>/2019/11/10/axios/</url>
      
        <content type="html"><![CDATA[<h1 id="axios-全攻略"><a href="#axios-全攻略" class="headerlink" title="axios 全攻略"></a>axios 全攻略</h1><ul><li>最早的异步请求用的是源生的，然后进化到 jquery, 接着逐渐演变到现在的 axios</li></ul><h2 id="axios-简介"><a href="#axios-简介" class="headerlink" title="axios 简介"></a>axios 简介</h2><blockquote><p>axios 是一个基于 Promise 用于浏览器和 nodejs 的 HTTP 客户端,它具有以下特征</p></blockquote><ul><li><p>从浏览器中创建 XMLHttpRequest</p></li><li><p>从 node.js 发出请求</p></li><li><p>支持 Promise API</p></li><li><p>拦截请求和响应</p></li><li><p>转换请求和响应数据</p></li><li><p>取消请求</p></li><li><p>自动转换 json 数据</p></li><li><p>客户端支持防止 CSRF/XSRF</p></li></ul><h2 id="axios-引入方式"><a href="#axios-引入方式" class="headerlink" title="axios 引入方式"></a>axios 引入方式</h2><pre class="line-numbers language-javascript"><code class="language-javascript">npm i axios<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者使用 cdn</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/axios/dist/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="简易的-get-请求-POST-请求-执行多个并发请求"><a href="#简易的-get-请求-POST-请求-执行多个并发请求" class="headerlink" title="简易的 get 请求,POST 请求,执行多个并发请求"></a>简易的 get 请求,POST 请求,执行多个并发请求</h2><h3 id="执行-GET-请求"><a href="#执行-GET-请求" class="headerlink" title="执行 GET 请求"></a>执行 GET 请求</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 向具有指定ID的用户发出请求</span>axios  <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user?ID=12345'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 也可以通过 params 对象传递参数,要是get需要里面写params</span>axios  <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    params<span class="token punctuation">:</span> <span class="token punctuation">{</span>      ID<span class="token punctuation">:</span> <span class="token number">12345</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="执行-POST-请求"><a href="#执行-POST-请求" class="headerlink" title="执行 POST 请求"></a>执行 POST 请求</h3><pre class="line-numbers language-javascript"><code class="language-javascript">axios  <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span> <span class="token string">'Fred'</span><span class="token punctuation">,</span>    lastName<span class="token punctuation">:</span> <span class="token string">'Flintstone'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="执行多个并发请求"><a href="#执行多个并发请求" class="headerlink" title="执行多个并发请求"></a>执行多个并发请求</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getUserAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getUserPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345/permissions'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">getUserAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getUserPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  axios<span class="token punctuation">.</span><span class="token function">spread</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>acct<span class="token punctuation">,</span> perms<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//两个请求现已完成</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="传入相关配置-个人用的最多"><a href="#传入相关配置-个人用的最多" class="headerlink" title="传入相关配置(个人用的最多)"></a>传入相关配置(个人用的最多)</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  method<span class="token punctuation">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//或者get</span>  url<span class="token punctuation">:</span> <span class="token string">'/user/12345'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span> <span class="token string">'Fred'</span><span class="token punctuation">,</span>    lastName<span class="token punctuation">:</span> <span class="token string">'Flintstone'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义配置-axios"><a href="#自定义配置-axios" class="headerlink" title="自定义配置 axios"></a>自定义配置 axios</h2><h3 id="请求方法别名"><a href="#请求方法别名" class="headerlink" title="请求方法别名"></a>请求方法别名</h3><ul><li><p>axios.request(config)</p></li><li><p>axios.get(url,[config])</p></li><li><p>axios.delete(url,[config])</p></li><li><p>axios.head(url,[config])</p></li><li><p>axios.post(url,data,[config])</p></li><li><p>axios.put(url,data,[config])</p></li><li><p>axios.patch(url,data,[config])</p></li></ul><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><ul><li><p>axios.all(iterable)</p></li><li><p>axios.spread(callback)</p></li></ul><h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><h4 id="您可以使用自定义配置来创建-axios-的新实例"><a href="#您可以使用自定义配置来创建-axios-的新实例" class="headerlink" title="您可以使用自定义配置来创建 axios 的新实例"></a>您可以使用自定义配置来创建 axios 的新实例</h4><ul><li>axios.create([config])</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> axiosobj <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  baseURL<span class="token punctuation">:</span> <span class="token string">'https://some-domain.com/api/'</span><span class="token punctuation">,</span>  timeout<span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>  headers<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">'X-Custom-Header'</span><span class="token punctuation">:</span> <span class="token string">'foobar'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><blockquote><p>可用的实例方法如下，指定的配置与实例结合</p></blockquote><ul><li><p>axios.request(config)</p></li><li><p>axios.get(url,[config])</p></li><li><p>axios.delete(url,[config])</p></li><li><p>axios.head(url,[config])</p></li><li><p>axios.post(url,data,[config])</p></li><li><p>axios.put(url,data,[config])</p></li><li><p>axios.patch(url,data,[config])</p></li></ul><h4 id="请求配置"><a href="#请求配置" class="headerlink" title="请求配置"></a>请求配置</h4><blockquote><p>下面这些用于发出请求的可用配置选项，只有 URL 是必须的。如果未指定方法，请求默认就是 GET</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// `url`是将用于请求的服务器URL</span>  url<span class="token punctuation">:</span> <span class="token string">'/user'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `method`是发出请求时使用的请求方法</span>  method<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 默认</span>  <span class="token comment" spellcheck="true">// `baseURL`将被添加到`url`前面，除非`url`是绝对的。</span>  <span class="token comment" spellcheck="true">// 可以方便地为 axios 的实例设置`baseURL`，以便将相对 URL 传递给该实例的方法。</span>  baseURL<span class="token punctuation">:</span> <span class="token string">'https://some-domain.com/api/'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `transformRequest`允许在请求数据发送到服务器之前对其进行更改</span>  <span class="token comment" spellcheck="true">// 这只适用于请求方法'PUT'，'POST'和'PATCH'</span>  <span class="token comment" spellcheck="true">// 数组中的最后一个函数必须返回一个字符串，一个 ArrayBuffer或一个 Stream</span>  transformRequest<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 做任何你想要的数据转换</span>    <span class="token keyword">return</span> data<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `transformResponse`允许在 then / catch之前对响应数据进行更改</span>  transformResponse<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Do whatever you want to transform the data</span>    <span class="token keyword">return</span> data<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `headers`是要发送的自定义 headers</span>  headers<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'X-Requested-With'</span><span class="token punctuation">:</span> <span class="token string">'XMLHttpRequest'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `params`是要与请求一起发送的URL参数</span>  <span class="token comment" spellcheck="true">// 必须是纯对象或URLSearchParams对象</span>  params<span class="token punctuation">:</span> <span class="token punctuation">{</span>    ID<span class="token punctuation">:</span> <span class="token number">12345</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `paramsSerializer`是一个可选的函数，负责序列化`params`</span>  <span class="token comment" spellcheck="true">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span>  paramsSerializer<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token punctuation">{</span>arrayFormat<span class="token punctuation">:</span> <span class="token string">'brackets'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `data`是要作为请求主体发送的数据</span>  <span class="token comment" spellcheck="true">// 仅适用于请求方法“PUT”，“POST”和“PATCH”</span>  <span class="token comment" spellcheck="true">// 当没有设置`transformRequest`时，必须是以下类型之一：</span>  <span class="token comment" spellcheck="true">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span>  <span class="token comment" spellcheck="true">// - Browser only: FormData, File, Blob</span>  <span class="token comment" spellcheck="true">// - Node only: Stream</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span> <span class="token string">'Fred'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `timeout`指定请求超时之前的毫秒数。</span>  <span class="token comment" spellcheck="true">// 如果请求的时间超过'timeout'，请求将被中止。</span>  timeout<span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `withCredentials`指示是否跨站点访问控制请求</span>  <span class="token comment" spellcheck="true">// should be made using credentials</span>  withCredentials<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// default</span>  <span class="token comment" spellcheck="true">// `adapter'允许自定义处理请求，这使得测试更容易。</span>  <span class="token comment" spellcheck="true">// 返回一个promise并提供一个有效的响应（参见[response docs]（＃response-api））</span>  adapter<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* ... */</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `auth'表示应该使用 HTTP 基本认证，并提供凭据。</span>  <span class="token comment" spellcheck="true">// 这将设置一个`Authorization'头，覆盖任何现有的`Authorization'自定义头，使用`headers`设置。</span>  auth<span class="token punctuation">:</span> <span class="token punctuation">{</span>    username<span class="token punctuation">:</span> <span class="token string">'janedoe'</span><span class="token punctuation">,</span>    password<span class="token punctuation">:</span> <span class="token string">'s00pers3cret'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// “responseType”表示服务器将响应的数据类型</span>  <span class="token comment" spellcheck="true">// 包括 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'</span>  responseType<span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// default</span>  <span class="token comment" spellcheck="true">//`xsrfCookieName`是要用作 xsrf 令牌的值的cookie的名称</span>  xsrfCookieName<span class="token punctuation">:</span> <span class="token string">'XSRF-TOKEN'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// default</span>  <span class="token comment" spellcheck="true">// `xsrfHeaderName`是携带xsrf令牌值的http头的名称</span>  xsrfHeaderName<span class="token punctuation">:</span> <span class="token string">'X-XSRF-TOKEN'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// default</span>  <span class="token comment" spellcheck="true">// `onUploadProgress`允许处理上传的进度事件</span>  onUploadProgress<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>progressEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用本地 progress 事件做任何你想要做的</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `onDownloadProgress`允许处理下载的进度事件</span>  onDownloadProgress<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>progressEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Do whatever you want with the native progress event</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `maxContentLength`定义允许的http响应内容的最大大小</span>  maxContentLength<span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `validateStatus`定义是否解析或拒绝给定的promise</span>  <span class="token comment" spellcheck="true">// HTTP响应状态码。如果`validateStatus`返回`true`（或被设置为`null` promise将被解析;否则，promise将被</span>  <span class="token comment" spellcheck="true">// 拒绝。</span>  validateStatus<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// default</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `maxRedirects`定义在node.js中要遵循的重定向的最大数量。</span>  <span class="token comment" spellcheck="true">// 如果设置为0，则不会遵循重定向。</span>  maxRedirects<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 默认</span>  <span class="token comment" spellcheck="true">// `httpAgent`和`httpsAgent`用于定义在node.js中分别执行http和https请求时使用的自定义代理。</span>  <span class="token comment" spellcheck="true">// 允许配置类似`keepAlive`的选项，</span>  <span class="token comment" spellcheck="true">// 默认情况下不启用。</span>  httpAgent<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">http<span class="token punctuation">.</span>Agent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> keepAlive<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  httpsAgent<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">https<span class="token punctuation">.</span>Agent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> keepAlive<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 'proxy'定义代理服务器的主机名和端口</span>  <span class="token comment" spellcheck="true">// `auth`表示HTTP Basic auth应该用于连接到代理，并提供credentials。</span>  <span class="token comment" spellcheck="true">// 这将设置一个`Proxy-Authorization` header，覆盖任何使用`headers`设置的现有的`Proxy-Authorization` 自定义 headers。</span>  proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>    host<span class="token punctuation">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token number">9000</span><span class="token punctuation">,</span>    auth<span class="token punctuation">:</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>      username<span class="token punctuation">:</span> <span class="token string">'mikeymike'</span><span class="token punctuation">,</span>      password<span class="token punctuation">:</span> <span class="token string">'rapunz3l'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// “cancelToken”指定可用于取消请求的取消令牌</span>  <span class="token comment" spellcheck="true">// (see Cancellation section below for details)</span>  cancelToken<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">CancelToken</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>cancel<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用 then 时,您将收到如下响应</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置默认值"><a href="#配置默认值" class="headerlink" title="配置默认值"></a>配置默认值</h2><blockquote><p>您可以指定将应用于每个请求的配置默认值</p></blockquote><h3 id="全局-axios-默认值"><a href="#全局-axios-默认值" class="headerlink" title="全局 axios 默认值"></a>全局 axios 默认值</h3><pre class="line-numbers language-javascript"><code class="language-javascript">axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'https://api.example.com'</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>common<span class="token punctuation">[</span><span class="token string">'Authorization'</span><span class="token punctuation">]</span> <span class="token operator">=</span> AUTH_TOKENaxios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>post<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token string">'application/x-www-form-urlencoded'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义实例默认值"><a href="#自定义实例默认值" class="headerlink" title="自定义实例默认值"></a>自定义实例默认值</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//在创建实例时设置配置默认值</span><span class="token keyword">var</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span>create（<span class="token punctuation">{</span>   baseURL：<span class="token string">'https://api.example.com'</span><span class="token punctuation">}</span>）<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在实例创建后改变默认值</span>instance<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>common <span class="token punctuation">[</span><span class="token string">'Authorization'</span><span class="token punctuation">]</span> <span class="token operator">=</span> AUTH_TOKEN<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置优先级顺序"><a href="#配置优先级顺序" class="headerlink" title="配置优先级顺序"></a>配置优先级顺序</h3><blockquote><p>配置将与优先顺序合并。顺序是 lib/defaults.js 库中的默认值。然后是实例的 defaults 属性,最后是请求的 config 参数,后者优先于前者。</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//使用库提供的配置默认值创建实例</span><span class="token comment" spellcheck="true">//此时，超时配置值为`0`，这是库的默认值</span><span class="token comment" spellcheck="true">//优先级最低</span><span class="token keyword">var</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span>create（）<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//覆盖库的超时默认值</span><span class="token comment" spellcheck="true">//现在所有请求将在超时前等待2.5秒</span>instance<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">2500</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//覆盖此请求的超时，因为它知道需要很长时间</span><span class="token comment" spellcheck="true">//优先级最高</span>instance<span class="token punctuation">.</span><span class="token keyword">get</span>（<span class="token string">'/ longRequest'</span>，<span class="token punctuation">{</span>   timeout：<span class="token number">5000</span><span class="token punctuation">}</span>）<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><blockquote><p>你可以截取请求或者响应在被 then 或者 catch 之前处理</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//添加请求拦截器</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span>use（<span class="token keyword">function</span>（config）<span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//在发送请求之前做某事</span>     <span class="token keyword">return</span> config<span class="token punctuation">;</span>   <span class="token punctuation">}</span>，<span class="token keyword">function</span>（error）<span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//请求错误时做些事</span>     <span class="token keyword">return</span> Promise<span class="token punctuation">.</span>reject（error）<span class="token punctuation">;</span>   <span class="token punctuation">}</span>）<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加响应拦截器</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span>use（<span class="token keyword">function</span>（response）<span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//对响应数据做些事</span>     <span class="token keyword">return</span> response<span class="token punctuation">;</span>   <span class="token punctuation">}</span>，<span class="token keyword">function</span>（error）<span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//请求错误时做些事</span>     <span class="token keyword">return</span> Promise<span class="token punctuation">.</span>reject（error）<span class="token punctuation">;</span>   <span class="token punctuation">}</span>）<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果你以后可能需要删除拦截器</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> myInterceptor <span class="token operator">=</span> axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*...*/</span><span class="token punctuation">}</span><span class="token punctuation">)</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">eject</span><span class="token punctuation">(</span>myInterceptor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>你可以将拦截器添加到 axios 的自定义实例</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*...*/</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>完整版本的拦截器。目前我用的</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Vue版本的拦截器request.js</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'@/router'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'@/store'</span><span class="token comment" spellcheck="true">/** **** request拦截器==>对请求参数做处理 ******/</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 加载</span>    store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>loadingflag <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//加载等待动画loading,改变store值</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>      config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>authorization <span class="token operator">=</span>        result<span class="token punctuation">.</span>token_type <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> result<span class="token punctuation">.</span>access_token    <span class="token punctuation">}</span>    <span class="token keyword">return</span> config  <span class="token punctuation">}</span><span class="token punctuation">,</span>  error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/** **** respone拦截器==>对响应做处理 ******/</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>loadingflag <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">//加载等待动画loading不需要可以删除</span>    <span class="token keyword">return</span> response  <span class="token punctuation">}</span><span class="token punctuation">,</span>  error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 错误提醒</span>    store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>loadingflag <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> status <span class="token punctuation">}</span> <span class="token operator">=</span> error<span class="token punctuation">.</span>response    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 页面跳转</span>    router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> axios<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="处理错误"><a href="#处理错误" class="headerlink" title="处理错误"></a>处理错误</h3><pre class="line-numbers language-javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token keyword">get</span>（<span class="token string">'/ user / 12345'</span>）   <span class="token punctuation">.</span><span class="token keyword">catch</span>（<span class="token keyword">function</span>（error）<span class="token punctuation">{</span>     <span class="token keyword">if</span>（error<span class="token punctuation">.</span>response）<span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//请求已发出，但服务器使用状态代码进行响应</span>       <span class="token comment" spellcheck="true">//落在2xx的范围之外</span>       console<span class="token punctuation">.</span>log（error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data）<span class="token punctuation">;</span>       console<span class="token punctuation">.</span>log（error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status）<span class="token punctuation">;</span>       console<span class="token punctuation">.</span>log（error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>headers）<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//在设置触发错误的请求时发生了错误</span>       console<span class="token punctuation">.</span>log（<span class="token string">'Error'</span>，error<span class="token punctuation">.</span>message）<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span>     console<span class="token punctuation">.</span>log（error<span class="token punctuation">.</span>config）<span class="token punctuation">;</span>   <span class="token punctuation">}</span>）<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>您可以用 validateStatus 配置选项定义 http 状态码的错误范围</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token keyword">get</span>（<span class="token string">'/ user / 12345'</span>，<span class="token punctuation">{</span>   validateStatus：<span class="token keyword">function</span>（status）<span class="token punctuation">{</span>     <span class="token keyword">return</span> status <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//仅当状态代码大于或等于500时拒绝</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-application-x-www-form-urlencoded-格式"><a href="#使用-application-x-www-form-urlencoded-格式" class="headerlink" title="使用 application / x-www-form-urlencoded 格式"></a>使用 application / x-www-form-urlencoded 格式</h3><blockquote><p>默认情况下,axios 将 Javascript 对象序列化 JSON，要以应用程序/ x-www-form-urlencoded 格式发送数据，您可以使用以下选项之一。</p></blockquote><h4 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h4><blockquote><p>在浏览器中，您可以使用 URLSearchParams API，如下所示：</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span>params<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'param1'</span><span class="token punctuation">,</span> <span class="token string">'value1'</span><span class="token punctuation">)</span>params<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'param2'</span><span class="token punctuation">,</span> <span class="token string">'value2'</span><span class="token punctuation">)</span>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/foo'</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>请注意所有浏览器都不支持 URLSearchParams，但是有一个 polyfill 可用（确保 polyfill 全局环境）。</p></blockquote><ul><li>或者您可以使用 qs 库对数据进行编码</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'qs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/foo'</span><span class="token punctuation">,</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">'bar'</span><span class="token punctuation">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Node-js-中"><a href="#Node-js-中" class="headerlink" title="Node.js 中"></a>Node.js 中</h4><ul><li>在 node.js 中 可以使用 querystring 模块,如下所示</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://something.com/'</span><span class="token punctuation">,</span> querystring<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">'bar'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><ul><li>axios 依赖本机要支持 ES6 Promise 实现。 如果您的环境不支持 ES6 Promises，您可以使用 polyfill。</li></ul><h3 id="还有一种可能性换-token"><a href="#还有一种可能性换-token" class="headerlink" title="还有一种可能性换 token"></a>还有一种可能性换 token</h3><blockquote><p>当 token 过期了,我们需要重新发送 token，然后重新发送请求.</p></blockquote><blockquote><p>两个难点 1.当一个 token 刷新的时候其他接口怎么办?(这里用到了锁和队列) 2.刷新 token 和获取 token 接口不一致</p></blockquote><blockquote><p>下面放上完整版代码</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// request.js</span><span class="token comment" spellcheck="true">/*思路 1.创建了两个实例 一个暴露以后使用,一个就为了重新刷新token   之所以创立两个是因为headers里面放的内容不一样 2.千万不能在暴露的实例里写headers这样他里面的值不会改变 3.多个请求利用了锁的概念,上锁了则必须要把其他的请求存到数组里。解锁后在执行*/</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'@/router'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'@/store'</span><span class="token keyword">import</span> url <span class="token keyword">from</span> <span class="token string">'@/config.js'</span><span class="token comment" spellcheck="true">// 是否正在刷新的标记</span><span class="token keyword">let</span> isRefreshing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">// 重试队列，每一项将是一个待执行的函数形式</span><span class="token keyword">let</span> requests <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//获取token</span><span class="token keyword">function</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> token <span class="token operator">=</span> window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>    <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      token_type<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>      access_token<span class="token punctuation">:</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*自定义实例开始*/</span><span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//这里千万不能写headers否则会造成数据缓存</span>  timeout<span class="token punctuation">:</span> <span class="token number">300000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*获取refreshtoken开始*/</span><span class="token keyword">const</span> Base64 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'js-base64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Base64<span class="token keyword">let</span> headers <span class="token operator">=</span> <span class="token string">'Basic '</span> <span class="token operator">+</span> Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>username <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> url<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token keyword">const</span> refreshinstance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  timeout<span class="token punctuation">:</span> <span class="token number">300000</span><span class="token punctuation">,</span>  headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>    authorization<span class="token punctuation">:</span> headers  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">refreshToken</span><span class="token punctuation">(</span>lastrequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> data <span class="token operator">=</span> window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'grant_type'</span><span class="token punctuation">,</span> <span class="token string">'refresh_token'</span><span class="token punctuation">)</span>  formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'refresh_token'</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>refresh_token<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">refreshinstance</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> url<span class="token punctuation">.</span>token<span class="token punctuation">,</span>    data<span class="token punctuation">:</span> formData<span class="token punctuation">,</span>    method<span class="token punctuation">:</span> <span class="token string">'POST'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//console.log(res.data);</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> res<span class="token punctuation">.</span>data    <span class="token keyword">let</span> tokenresult <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">,</span> tokenresult<span class="token punctuation">)</span>    lastrequest<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>      authorization<span class="token punctuation">:</span> result<span class="token punctuation">.</span>token_type <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> result<span class="token punctuation">.</span>access_token    <span class="token punctuation">}</span>    requests<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cb <span class="token operator">=</span><span class="token operator">></span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//请求完成将所有队列的请求重新来一次</span>    requests <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//清空它</span>    isRefreshing <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">//解开锁</span>    <span class="token comment" spellcheck="true">//window.location.reload(); //在考虑一下</span>    <span class="token keyword">return</span> <span class="token function">instance</span><span class="token punctuation">(</span>lastrequest<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*获取refreshtoken结束*/</span><span class="token comment" spellcheck="true">/** **** request拦截器==>对请求参数做处理 ******/</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 加载</span>    store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>loadingflag <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>authorization <span class="token operator">=</span> value<span class="token punctuation">.</span>token_type <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> value<span class="token punctuation">.</span>access_token    <span class="token keyword">return</span> config  <span class="token punctuation">}</span><span class="token punctuation">,</span>  error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/** **** respone拦截器==>对响应做处理 ******/</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>loadingflag <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">return</span> response  <span class="token punctuation">}</span><span class="token punctuation">,</span>  error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 错误提醒</span>    <span class="token comment" spellcheck="true">//console.log(error.config);</span>    <span class="token keyword">let</span> lastrequest <span class="token operator">=</span> error<span class="token punctuation">.</span>config    store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>loadingflag <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> status <span class="token punctuation">}</span> <span class="token operator">=</span> error<span class="token punctuation">.</span>response    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRefreshing<span class="token punctuation">)</span> <span class="token punctuation">{</span>        isRefreshing <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">return</span> <span class="token function">refreshToken</span><span class="token punctuation">(</span>lastrequest<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          requests<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            lastrequest<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>              authorization<span class="token punctuation">:</span>                <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>token_type <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>access_token            <span class="token punctuation">}</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">instance</span><span class="token punctuation">(</span>lastrequest<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//return Promise.reject(error);</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 页面跳转</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*刷新token对响应的处理*/</span>refreshinstance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>loadingflag <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">return</span> response  <span class="token punctuation">}</span><span class="token punctuation">,</span>  error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 错误提醒</span>    store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>loadingflag <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> status <span class="token punctuation">}</span> <span class="token operator">=</span> error<span class="token punctuation">.</span>response    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// // // 清除token</span>      window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// // 页面跳转</span>      router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//刷新页面</span>      window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// // 页面跳转</span>    router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//刷新页面</span>    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*刷新token对响应的处理结束*/</span><span class="token keyword">export</span> <span class="token keyword">default</span> instance<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> axios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue学记笔记(八) Vue路由传参数，动画和钩子函数</title>
      <link href="/2019/11/09/vueba/"/>
      <url>/2019/11/09/vueba/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-路由传参"><a href="#Vue-路由传参" class="headerlink" title="Vue 路由传参"></a>Vue 路由传参</h1><h2 id="动态路径传参数"><a href="#动态路径传参数" class="headerlink" title="动态路径传参数"></a>动态路径传参数</h2><blockquote><p>比如我们要传递的路径 /hi/hahah/123 第一个是组件名 第二个，第三个是参数</p></blockquote><h3 id="1-路由里面配置参数"><a href="#1-路由里面配置参数" class="headerlink" title="(1) 路由里面配置参数"></a>(1) 路由里面配置参数</h3><blockquote><p>看路径 利用冒号绑定好参数</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>      path<span class="token punctuation">:</span><span class="token string">'/Hi/:username/:id'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span><span class="token string">"Hi"</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span>Hi<span class="token punctuation">,</span>      children<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>path<span class="token punctuation">:</span><span class="token string">"hi1"</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">"Hi1"</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>Hi1<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>path<span class="token punctuation">:</span><span class="token string">"hi2"</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">"Hi2"</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>Hi2<span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-组件里面输出"><a href="#2-组件里面输出" class="headerlink" title="(2) 组件里面输出"></a>(2) 组件里面输出</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token punctuation">{</span>    $route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>username  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  <span class="token punctuation">{</span>    $route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="路由跳转参数的两种方法"><a href="#路由跳转参数的两种方法" class="headerlink" title="路由跳转参数的两种方法"></a>路由跳转参数的两种方法</h2><ul><li><p>是利用 query 方式传递参数</p></li><li><p>是利用 params 方式传递参数</p></li></ul><h3 id="利用-query-方式传递参数"><a href="#利用-query-方式传递参数" class="headerlink" title="利用 query 方式传递参数"></a>利用 query 方式传递参数</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  传参<span class="token punctuation">:</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          path<span class="token punctuation">:</span><span class="token string">'/xxx'</span>          query<span class="token punctuation">:</span><span class="token punctuation">{</span>            id<span class="token punctuation">:</span>id          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>  接收参数<span class="token punctuation">:</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="利用-params-方式传递参数"><a href="#利用-params-方式传递参数" class="headerlink" title="利用 params 方式传递参数"></a>利用 params 方式传递参数</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  传参<span class="token punctuation">:</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          name<span class="token punctuation">:</span><span class="token string">'xxx'</span>          params<span class="token punctuation">:</span><span class="token punctuation">{</span>            id<span class="token punctuation">:</span>id          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>  接收参数<span class="token punctuation">:</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意:params 传参，push 里面只能是 name:’xxxx’,不能是 path:’/xxx’,因为 params 只能用 name 来引入路由，如果这里写成了 path，接收参数页面会是 undefined！！！另外，二者还有点区别，直白的来说 query 相当于 get 请求，页面跳转的时候，可以在地址栏看到请求参数，而 params 相当于 post 请求，参数不会再地址栏中显示.另外要是通过 query 传值，页面刷新的话参数不丢失</p></blockquote><h1 id="Vue-动画"><a href="#Vue-动画" class="headerlink" title="Vue 动画"></a>Vue 动画</h1><ul><li>想要路由有过度动画效果只需要在 router-view 外部加载一个 transition 标签即可</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gotop<span class="token punctuation">"</span></span> <span class="token attr-name">model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>out-in<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allcontent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>name 就是 css 类前面开头制定的名称，model 就是执行的顺序，他有两个。第一个是 out-in 第二个是 in-out</p></blockquote><ul><li>然后在 css 里面写</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.gotop-enter-active</span>,  <span class="token class">.gotop-leave-active</span> </span><span class="token punctuation">{</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">0.4</span>s linear<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.gotop-enter</span>,  <span class="token class">.gotop-leave-to</span> </span><span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.gotop-leave</span>,  <span class="token class">.gotop-enter-to</span> </span><span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Vue-导航里面的钩子函数"><a href="#Vue-导航里面的钩子函数" class="headerlink" title="Vue 导航里面的钩子函数"></a>Vue 导航里面的钩子函数</h1><ul><li><p>第一种就是全局匹配 beforeeach</p></li><li><p>第二种就是单个路由下面写配置,beforeEnter</p></li><li><p>第三种就是组件里面写钩子函数 beforeRouterEnter</p></li></ul><h2 id="1-全局匹配"><a href="#1-全局匹配" class="headerlink" title="(1) 全局匹配"></a>(1) 全局匹配</h2><blockquote><p>一般情况我们管这个叫路由守卫，简称全拦，他一般有 3 个参数 to from next 表示通过才跳转,一般写在 main.js 里面</p></blockquote><blockquote><p>to 表示要跳转的路径信息,from 表示从哪里来的,next 表示路由控制的参数,通过与否</p></blockquote><blockquote><p>代码如下</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 设置延时器让created先执行在进行路由跳转</span>  <span class="token comment" spellcheck="true">// 取出token值</span>  <span class="token keyword">let</span> value <span class="token operator">=</span> storgeMemery<span class="token punctuation">.</span><span class="token function">getvalue</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 取出来token</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断该路由是否需要登录权限</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'Login'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          path<span class="token punctuation">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>          query<span class="token punctuation">:</span> <span class="token punctuation">{</span>            redirect<span class="token punctuation">:</span> to<span class="token punctuation">.</span>fullPath          <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 将跳转的路由path作为参数，登录成功后跳转到该路由</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-单个路由下配置"><a href="#2-单个路由下配置" class="headerlink" title="(2) 单个路由下配置"></a>(2) 单个路由下配置</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>      components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> HelloWorld<span class="token punctuation">,</span>        left<span class="token punctuation">:</span> Hi1<span class="token punctuation">,</span>        right<span class="token punctuation">:</span> Hi2<span class="token punctuation">,</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>beforeEnter<span class="token punctuation">:</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我进来了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">from</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-组件里面写钩子函数-beforeRouterEnter-beforeRouterLeave"><a href="#3-组件里面写钩子函数-beforeRouterEnter-beforeRouterLeave" class="headerlink" title="(3)组件里面写钩子函数 beforeRouterEnter,beforeRouterLeave"></a>(3)组件里面写钩子函数 beforeRouterEnter,beforeRouterLeave</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span><span class="token string">"Hi2"</span><span class="token punctuation">,</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token punctuation">{</span>           message2<span class="token punctuation">:</span><span class="token string">"这个就是Hi2页面"</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>beforeRouterEnter<span class="token punctuation">:</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我进来了"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span>beforeRouterLeave<span class="token punctuation">:</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span>form<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我离开了"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue学记笔记(七) Vue路由</title>
      <link href="/2019/11/08/vueqi/"/>
      <url>/2019/11/08/vueqi/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-router"><a href="#Vue-router" class="headerlink" title="Vue-router"></a>Vue-router</h1><p>Vue 通过管理 URL 来实现 url 和组件的对应。通过 url 来进行组件之间的切换</p><h2 id="Vue-router-路由有两种模式"><a href="#Vue-router-路由有两种模式" class="headerlink" title="Vue-router 路由有两种模式"></a>Vue-router 路由有两种模式</h2><h3 id="1-第一种-hash-模式-俗称哈希-即地址栏-url-中的-符号-一般默认就是-hash"><a href="#1-第一种-hash-模式-俗称哈希-即地址栏-url-中的-符号-一般默认就是-hash" class="headerlink" title="(1) 第一种 hash 模式,俗称哈希 即地址栏 url 中的#符号.一般默认就是 hash"></a>(1) 第一种 hash 模式,俗称哈希 即地址栏 url 中的#符号.一般默认就是 hash</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>例如这个URL http://www.abc.com/#/home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>那么他的hash值就是为/#/home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>hash值好处就是对后端完全没有影响,改变hash值不会重新加载页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-history-就是平常的-url"><a href="#2-history-就是平常的-url" class="headerlink" title="(2) history(就是平常的 url)"></a>(2) history(就是平常的 url)</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>但是在2.x版本中打包后会出现一片空白<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Vue-router-的使用"><a href="#Vue-router-的使用" class="headerlink" title="Vue-router 的使用"></a>Vue-router 的使用</h2><h3 id="1-纯静态加载组件"><a href="#1-纯静态加载组件" class="headerlink" title="(1)纯静态加载组件"></a>(1)纯静态加载组件</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span> <span class="token comment" spellcheck="true">//引入vue</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span> <span class="token comment" spellcheck="true">//引入router</span><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">'@/components/HelloWorld'</span> <span class="token comment" spellcheck="true">//加载组件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//使用组件</span><span class="token comment" spellcheck="true">//路由的核心文件</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> HelloWorld    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-动态引入，按需加载-常用"><a href="#2-动态引入，按需加载-常用" class="headerlink" title="(2)动态引入，按需加载(常用)"></a>(2)动态引入，按需加载(常用)</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">const</span> Index <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/Index.vue'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//首页</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>  base<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>BASE_URL<span class="token punctuation">,</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'Index'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Index    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-html-要是想跳转的话，通过链接"><a href="#3-html-要是想跳转的话，通过链接" class="headerlink" title="(3)html 要是想跳转的话，通过链接"></a>(3)html 要是想跳转的话，通过链接</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/xxx<span class="token punctuation">"</span></span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>li<span class="token punctuation">"</span></span> <span class="token attr-name">event</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mouseover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>选中了以后他会自动给当前路由加载一个类名，表示选中的状态</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>router-link-active 全局匹配 即path名包含在所有路由都会匹配<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>router-link-exact-active 精确匹配 即点击哪个路由，哪个被匹配。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>如果希望改变这个类名可以在下面改变</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>  base<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>BASE_URL<span class="token punctuation">,</span>  linkActiveClass<span class="token punctuation">:</span> <span class="token string">'is-active'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//这样选中的类名就改变了就变成router-link-active</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'Index'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Index    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-404-页面，必须把匹配-放在最后，否则他会直接-404"><a href="#4-404-页面，必须把匹配-放在最后，否则他会直接-404" class="headerlink" title="(4) 404 页面，必须把匹配*放在最后，否则他会直接 404"></a>(4) 404 页面，必须把匹配*放在最后，否则他会直接 404</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Index <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/Index.vue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//首页</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">"history"</span><span class="token punctuation">,</span>  base<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>BASE_URL<span class="token punctuation">,</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">"Index"</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Index    <span class="token punctuation">}</span>，   <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">"Index"</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Index    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-重定向-redirect-就是用户访问的是-A-网址-实际跳转到-B-网址"><a href="#5-重定向-redirect-就是用户访问的是-A-网址-实际跳转到-B-网址" class="headerlink" title="(5) 重定向 redirect 就是用户访问的是 A 网址 实际跳转到 B 网址"></a>(5) 重定向 redirect 就是用户访问的是 A 网址 实际跳转到 B 网址</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span> path<span class="token punctuation">:</span><span class="token string">'/goback/:username/:id'</span><span class="token punctuation">,</span> redireact<span class="token punctuation">:</span> <span class="token string">'/Hi/:username/:id'</span> <span class="token comment" spellcheck="true">//也可以跳转到name</span> <span class="token comment" spellcheck="true">// redireact: {name:'home'} 前提是必须有name属性</span> <span class="token comment" spellcheck="true">//也可以使用函数比如</span> <span class="token comment" spellcheck="true">/* redirect:(to)=>{   if(to.path==="123")   {     return {name:'home'} // 或者path之类的或者路径   } } */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-别名"><a href="#6-别名" class="headerlink" title="(6) 别名"></a>(6) 别名</h3><ul><li>它不同于重定向，它相当于换了个名字</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>     path<span class="token punctuation">:</span><span class="token string">'/Hi/:username/:id'</span><span class="token punctuation">,</span>     component<span class="token punctuation">:</span>Hi<span class="token punctuation">,</span>     alias<span class="token punctuation">:</span><span class="token string">"gofor"</span>  <span class="token comment" spellcheck="true">//前面不要加/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>前端访问 gofor 实际访问的还是那个 hi 路由</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/gofor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>gofor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-子路由"><a href="#7-子路由" class="headerlink" title="(7)子路由"></a>(7)子路由</h3><blockquote><p>比如我们想/hi/hi1 这样的，我们管这个叫子路由</p></blockquote><h4 id="i-必须要在路由是-hi-里面放一个-routerview"><a href="#i-必须要在路由是-hi-里面放一个-routerview" class="headerlink" title="(i) 必须要在路由是 hi 里面放一个 routerview"></a>(i) 必须要在路由是 hi 里面放一个 routerview</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      {{msg}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ii-然后在路由里面写-children-属性，千万记住了子路由不能加"><a href="#ii-然后在路由里面写-children-属性，千万记住了子路由不能加" class="headerlink" title="(ii) 然后在路由里面写 children 属性，千万记住了子路由不能加/"></a>(ii) 然后在路由里面写 children 属性，千万记住了子路由不能加/</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>      path<span class="token punctuation">:</span><span class="token string">'/hi'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span><span class="token string">"Hi"</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span>Hi<span class="token punctuation">,</span>      children<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>path<span class="token punctuation">:</span><span class="token string">" "</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>Hi<span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">"Hi"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>path<span class="token punctuation">:</span><span class="token string">"hi1"</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>Hi1<span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">"Hi1"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>path<span class="token punctuation">:</span><span class="token string">"hi2"</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>Hi2<span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">"Hi2"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单页面多路由多个-routerview"><a href="#单页面多路由多个-routerview" class="headerlink" title="单页面多路由多个 routerview"></a>单页面多路由多个 routerview</h3><h4 id="1-写好位置"><a href="#1-写好位置" class="headerlink" title="(1) 写好位置"></a>(1) 写好位置</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name">  <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">50%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">400</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token property">float</span><span class="token punctuation">:</span>left</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name">  <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">50%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">400</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-在路由里面设置，记住一定是-components"><a href="#2-在路由里面设置，记住一定是-components" class="headerlink" title="(2)在路由里面设置，记住一定是 components"></a>(2)在路由里面设置，记住一定是 components</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">'@/components/HelloWorld'</span><span class="token keyword">import</span> Hi <span class="token keyword">from</span> <span class="token string">'@/components/Hi'</span><span class="token keyword">import</span> Hi1 <span class="token keyword">from</span> <span class="token string">'@/components/Hi1'</span><span class="token keyword">import</span> Hi2 <span class="token keyword">from</span> <span class="token string">'@/components/Hi2'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//这里就是要加载你要显示的组件 对应name</span>      components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> HelloWorld<span class="token punctuation">,</span>        left<span class="token punctuation">:</span> Hi1<span class="token punctuation">,</span>        right<span class="token punctuation">:</span> Hi2      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重点开始滚动行为，当用户滚动后加载路由"><a href="#重点开始滚动行为，当用户滚动后加载路由" class="headerlink" title="重点开始滚动行为，当用户滚动后加载路由"></a>重点开始滚动行为，当用户滚动后加载路由</h3><blockquote><p>要是有记录滚动条从记录开始，要是没记录从 0 开始，要是想从 0 开始 直接 return {x:0,y:0}</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>  base<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>BASE_URL<span class="token punctuation">,</span>  <span class="token function">scrollBehavior</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> savePosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">from</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>savePosition<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//如果滚动条有位置就记住，没有就是从0开始</span>    <span class="token comment" spellcheck="true">// if (savePosition) {</span>    <span class="token comment" spellcheck="true">//   return savePosition;</span>    <span class="token comment" spellcheck="true">// } else {</span>    <span class="token comment" spellcheck="true">//   return { x: 0, y: 0 };</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      y<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Home    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'about'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// route level code-splitting</span>      <span class="token comment" spellcheck="true">// this generates a separate chunk (about.[hash].js) for this route</span>      <span class="token comment" spellcheck="true">// which is lazy-loaded when the route is visited.</span>      component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> About    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/index'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'Index'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// route level code-splitting</span>      <span class="token comment" spellcheck="true">// this generates a separate chunk (about.[hash].js) for this route</span>      <span class="token comment" spellcheck="true">// which is lazy-loaded when the route is visited.</span>      component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Index    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果希望刷新后滚动条从 0 开始直接</p></blockquote><pre class="line-numbers language-html"><code class="language-html">只有在最外层export default 的最外面 写代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'beforeunload'</span><span class="token punctuation">,</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    xxxxxxxxxxxx  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue学记笔记(六) Vuex</title>
      <link href="/2019/11/07/vueliu/"/>
      <url>/2019/11/07/vueliu/</url>
      
        <content type="html"><![CDATA[<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><ul><li>可以理解为公共仓库，它只要一刷新数据就清空。负责组件之间传值。父子，兄弟都可以</li></ul><h2 id="Vuex-分成几个部分"><a href="#Vuex-分成几个部分" class="headerlink" title="Vuex 分成几个部分"></a>Vuex 分成几个部分</h2><ul><li><p>state (存放公共数据)</p></li><li><p>getters (对 state 数据二次封装，防止污染 state)</p></li><li><p>mutations (里面都是方法，它的作用就是修改 state 里面的数据)</p></li><li><p>actions (可以理解为 mutations 里面的一个合集,它能执行很多个 mutations)</p></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//要设置的全局访问的state对象</span>  showFooter<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  changableNum<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true">//要设置的初始属性值</span><span class="token punctuation">}</span><span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//实时监听state值的变化(最新状态)</span>  <span class="token function">isShow</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//承载变化的showFooter的值</span>    <span class="token keyword">return</span> state<span class="token punctuation">.</span>showFooter  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">getChangedNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//承载变化的changebleNum的值</span>    <span class="token keyword">return</span> state<span class="token punctuation">.</span>changableNum  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">show</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//自定义改变state初始值的方法，这里面的参数除了state之外还可以再传额外的参数(变量或对象);</span>    state<span class="token punctuation">.</span>showFooter <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">hide</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//同上</span>    state<span class="token punctuation">.</span>showFooter <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">newNum</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//同上，这里面的参数除了state之外还传了需要增加的值sum</span>    state<span class="token punctuation">.</span>changableNum <span class="token operator">+</span><span class="token operator">=</span> sum  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">hideFooter</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//自定义触发mutations里函数的方法，context与store 实例具有相同方法和属性</span>    context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'hide'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">showFooter</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//同上注释</span>    context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'show'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">getNewNum</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//同上注释，num为要变化的形参</span>    context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'newNum'</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token punctuation">,</span>  getters<span class="token punctuation">,</span>  mutations<span class="token punctuation">,</span>  actions<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>使用的时候 actions 第一个参数和 mutations 的第一个参数都可以不传</p></li><li><p>mapState,mapMutations 是 Vue 提供的语法糖可以直接使用</p></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span> mapState<span class="token punctuation">,</span> mapMutations <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        singerId<span class="token punctuation">:</span> <span class="token string">'singer'</span> <span class="token comment" spellcheck="true">//改名</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'汇总'</span><span class="token punctuation">,</span>        showflag2<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        setsinger<span class="token punctuation">:</span> <span class="token string">'setsinger'</span> <span class="token comment" spellcheck="true">//改名</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 点击方法</span>      <span class="token function">gotourl</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setsinger</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vuex-也可以分着写，然后在汇总"><a href="#Vuex-也可以分着写，然后在汇总" class="headerlink" title="Vuex 也可以分着写，然后在汇总"></a>Vuex 也可以分着写，然后在汇总</h2><ul><li>单独的第一个 store 文件</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>    orderData<span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">updateOrder</span><span class="token punctuation">(</span>state<span class="token punctuation">:</span> any<span class="token punctuation">,</span> orderData<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>orderData <span class="token operator">=</span> orderData    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>单独的第二个 store 文件</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>    modalHow<span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">updateModalClose</span><span class="token punctuation">(</span>state<span class="token punctuation">:</span> any<span class="token punctuation">,</span> modalClose<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>modalClose <span class="token operator">=</span> modalClose    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>汇总</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">import</span> footer <span class="token keyword">from</span> <span class="token string">'./modules/kiosk_footer'</span> <span class="token comment" spellcheck="true">// 引入第一个store对象</span><span class="token keyword">import</span> cart <span class="token keyword">from</span> <span class="token string">'./modules/kiosk_cart'</span> <span class="token comment" spellcheck="true">//引入第二个store对象</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>    footer<span class="token punctuation">,</span>    cart  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue学记笔记(五) 组件</title>
      <link href="/2019/11/06/vuewu/"/>
      <url>/2019/11/06/vuewu/</url>
      
        <content type="html"><![CDATA[<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>Vue 的核心就在于组件。组件的作用就是:复用。</p><p>小到一个按钮，大到一个页面都可以是组件</p><h2 id="组件的三元素"><a href="#组件的三元素" class="headerlink" title="组件的三元素"></a>组件的三元素</h2><p>每一个组件都必须包括三元素</p><ul><li><p>template (用来存放 html)</p></li><li><p>script (用来写 js)</p></li><li><p>style (用来写 css)</p></li><li><p>这里千万注意的是组件必须要大写，我这里是因为格式化所以变小写。实际要大写</p></li></ul><blockquote><p>特别注意的就是组件外面必须有一个包裹层，否则直接报错误</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loginbox_wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> Header <span class="token keyword">from</span> <span class="token string">'@/pages/common/Header'</span>  <span class="token keyword">import</span> Footer <span class="token keyword">from</span> <span class="token string">'@/pages/common/Footer'</span>  <span class="token keyword">import</span> Main <span class="token keyword">from</span> <span class="token string">'@/pages/Login/components/Main'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'登陆'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      Header<span class="token punctuation">,</span>      Footer<span class="token punctuation">,</span>      Main    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token comment" spellcheck="true">/*mobile*/</span>  <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 767px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>    <span class="token selector"><span class="token class">.loginbox_wrap</span> </span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token property">min-height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100</span>vh - <span class="token number">200</span>px - <span class="token number">73</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*pad*/</span>  <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 1024px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>    <span class="token selector"><span class="token class">.loginbox_wrap</span> </span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token property">min-height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100</span>vh - <span class="token number">108</span>px - <span class="token number">150</span>px - <span class="token number">50</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#f3f3f3</span><span class="token punctuation">;</span>      <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*desktop*/</span>  <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1025px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>    <span class="token selector"><span class="token class">.loginbox_wrap</span> </span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token property">min-height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100</span>vh - <span class="token number">108</span>px - <span class="token number">150</span>px - <span class="token number">50</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#f3f3f3</span><span class="token punctuation">;</span>      <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组件的引入必须有三点"><a href="#组件的引入必须有三点" class="headerlink" title="组件的引入必须有三点"></a>组件的引入必须有三点</h2><ul><li><p>第一步：引入组件(import)</p></li><li><p>第二步: 注册组件(components)</p></li><li><p>第三步: 使用组件(自定义标签)</p></li><li><p>这里千万注意的是组件必须要大写，我这里是因为格式化所以变小写。实际要大写</p></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> Header <span class="token keyword">from</span> <span class="token string">'@/pages/common/Header'</span>  <span class="token keyword">import</span> Footer <span class="token keyword">from</span> <span class="token string">'@/pages/common/Footer'</span>  <span class="token keyword">import</span> Main <span class="token keyword">from</span> <span class="token string">'@/pages/Login/components/Main'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'登陆'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      Header<span class="token punctuation">,</span>      Footer<span class="token punctuation">,</span>      Main    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组件之间的数据传递"><a href="#组件之间的数据传递" class="headerlink" title="组件之间的数据传递"></a>组件之间的数据传递</h2><p>组件之间的数据传递有两种</p><ul><li><p>父子组件</p></li><li><p>Vuex</p></li><li><p>总线机制</p></li><li><p>卡槽</p></li></ul><h3 id="父子组件"><a href="#父子组件" class="headerlink" title="父子组件"></a>父子组件</h3><p>父子组件传值就两点</p><ul><li><p>传递数据 props</p></li><li><p>子组件改变数据</p></li></ul><h4 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h4><ul><li>通过绑定:来传递数据,这样就把数据传递过去了,监听子组件传过来的事件，来调用父组件的方法改变值</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loginbox_wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">:info</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token attr-name">:infoflag</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span> <span class="token attr-name">@changeflag</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>switchflag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> Header <span class="token keyword">from</span> <span class="token string">'@/pages/common/Header'</span>  <span class="token keyword">import</span> Footer <span class="token keyword">from</span> <span class="token string">'@/pages/common/Footer'</span>  <span class="token keyword">import</span> Main <span class="token keyword">from</span> <span class="token string">'@/pages/Login/components/Main'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'登陆'</span><span class="token punctuation">,</span>        flag<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      Header<span class="token punctuation">,</span>      Footer<span class="token punctuation">,</span>      Main    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">switchflag</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> content      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h4><ul><li><p>通过 props 接受数据</p></li><li><p>发射出一个自定义事件来改变父元素的值，然后传递新的值,子组件永远不能直接改变父元素的值</p></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{info}} ----{{infoflag}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changedata<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'info'</span><span class="token punctuation">,</span> <span class="token string">'infoflag'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'子组件'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">changedata</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'changeflag'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>也可以有第二种父元素传递过来的值验证</p></li><li><p>下面的例子说明 两个值必须要传递进来，一个是数字 一个是布尔</p></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{info}} ----{{infoflag}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changedata<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    props<span class="token punctuation">:</span> <span class="token punctuation">{</span>      info<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>        required<span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      infoflag<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> Boolean<span class="token punctuation">,</span>        required<span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'子组件'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">changedata</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'changeflag'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Vue-总线机制"><a href="#Vue-总线机制" class="headerlink" title="Vue 总线机制"></a>Vue 总线机制</h3><ul><li>总线机制主要是用在爷孙组件或者爷穷孙组件，这样省的一层层发射</li></ul><h4 id="第一步创建总线-挂载到-bus-属性上"><a href="#第一步创建总线-挂载到-bus-属性上" class="headerlink" title="第一步创建总线 挂载到 bus 属性上"></a>第一步创建总线 挂载到 bus 属性上</h4><pre class="line-numbers language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>bus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="第二步-孙子组件发射出去自定义事件"><a href="#第二步-孙子组件发射出去自定义事件" class="headerlink" title="第二步 孙子组件发射出去自定义事件"></a>第二步 孙子组件发射出去自定义事件</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token string">'想改变的值'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="第三步-爷爷组件监听此事件"><a href="#第三步-爷爷组件监听此事件" class="headerlink" title="第三步 爷爷组件监听此事件"></a>第三步 爷爷组件监听此事件</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token keyword">this</span><span class="token punctuation">.</span>bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>  _this<span class="token punctuation">.</span>xxx <span class="token operator">=</span> content<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="卡槽"><a href="#卡槽" class="headerlink" title="卡槽"></a>卡槽</h3><ul><li>卡槽的作用就是有的时候我们不想只传递数据，还想传递 html 代码</li></ul><h4 id="匿名卡槽-只有一个卡槽，直接找默认"><a href="#匿名卡槽-只有一个卡槽，直接找默认" class="headerlink" title="匿名卡槽(只有一个卡槽，直接找默认)"></a>匿名卡槽(只有一个卡槽，直接找默认)</h4><ul><li>父组件 我想把 div 里面的 html 代码传递给子组件</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>    {{ message }}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Chacaoa</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sloata<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>A里面的数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Chacaoa</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> Header <span class="token keyword">from</span> <span class="token string">'@/components/common/Header'</span>  <span class="token keyword">import</span> Chacaoa <span class="token keyword">from</span> <span class="token string">'@/components/common/Sloata'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'首页'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      Header<span class="token punctuation">,</span>      Chacaoa    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.sloata</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>子组件</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'子组件'</span><span class="token punctuation">,</span>        dataA<span class="token punctuation">:</span> <span class="token string">'dataA里面的数据'</span><span class="token punctuation">,</span>        dataB<span class="token punctuation">:</span> <span class="token string">'dataB里面的数据'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="具名卡槽"><a href="#具名卡槽" class="headerlink" title="具名卡槽"></a>具名卡槽</h4><ul><li><p>卡槽不止一个，需要传递多个 html 代码(署名)</p></li><li><p>父组件</p></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>    {{ message }}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Chacaoa</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sloata<span class="token punctuation">"</span></span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>kaocaoa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>A里面的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sloatb<span class="token punctuation">"</span></span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>kaocaob<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>B里面的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Chacaoa</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> Header <span class="token keyword">from</span> <span class="token string">'@/components/common/Header'</span>  <span class="token keyword">import</span> Chacaoa <span class="token keyword">from</span> <span class="token string">'@/components/common/Sloata'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'首页'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      Header<span class="token punctuation">,</span>      Chacaoa    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.sloata</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.sloatb</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>子组件</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>kaocaoa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>kaocaob<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'子组件'</span><span class="token punctuation">,</span>        dataA<span class="token punctuation">:</span> <span class="token string">'dataA里面的数据'</span><span class="token punctuation">,</span>        dataB<span class="token punctuation">:</span> <span class="token string">'dataB里面的数据'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="卡槽里面子组件想给父组件传值"><a href="#卡槽里面子组件想给父组件传值" class="headerlink" title="卡槽里面子组件想给父组件传值"></a>卡槽里面子组件想给父组件传值</h4><ul><li><p>只有利用 slot-scope</p></li><li><p>父组件</p></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>    {{ message }}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Chacaoa</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sloata<span class="token punctuation">"</span></span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>kaocaoa<span class="token punctuation">"</span></span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shuju1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{ shuju1.data }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sloatb<span class="token punctuation">"</span></span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>kaocaob<span class="token punctuation">"</span></span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shuju2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{ shuju2.data }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Chacaoa</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> Header <span class="token keyword">from</span> <span class="token string">'@/components/common/Header'</span>  <span class="token keyword">import</span> Chacaoa <span class="token keyword">from</span> <span class="token string">'@/components/common/Sloata'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'首页'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      Header<span class="token punctuation">,</span>      Chacaoa    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.sloata</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.sloatb</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>子组件</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>kaocaoa<span class="token punctuation">"</span></span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataA<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>kaocaob<span class="token punctuation">"</span></span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataB<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'子组件'</span><span class="token punctuation">,</span>        dataA<span class="token punctuation">:</span> <span class="token string">'dataA里面的数据'</span><span class="token punctuation">,</span>        dataB<span class="token punctuation">:</span> <span class="token string">'dataB里面的数据'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Vuex-下章在重点介绍"><a href="#Vuex-下章在重点介绍" class="headerlink" title="Vuex 下章在重点介绍"></a>Vuex 下章在重点介绍</h3>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue学记笔记(四) computed与watch</title>
      <link href="/2019/11/05/vuesi/"/>
      <url>/2019/11/05/vuesi/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-中-Computed-与-Watch-区别"><a href="#Vue-中-Computed-与-Watch-区别" class="headerlink" title="Vue 中 Computed 与 Watch 区别"></a>Vue 中 Computed 与 Watch 区别</h1><h2 id="Computed"><a href="#Computed" class="headerlink" title="Computed"></a>Computed</h2><ul><li><p>computed 是一个计算属性，类似过滤器，对绑定的 view 的数据进行处理</p></li><li><p>computed get 里面必有 return 如果没有直接报错</p></li></ul><h3 id="get-用法"><a href="#get-用法" class="headerlink" title="get 用法"></a>get 用法</h3><pre class="line-numbers language-javascript"><code class="language-javascript">data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span> <span class="token string">'Foo'</span><span class="token punctuation">,</span>    lastName<span class="token punctuation">:</span> <span class="token string">'Bar'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    fullName<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>fullName 不能在 data 里面定义,因为 computed 作为计算属性定义的 fullName 并返回对应的结果给这个变量,变量不可以重复定义和赋值</li></ul><h3 id="get-和-set-用法"><a href="#get-和-set-用法" class="headerlink" title="get 和 set 用法"></a>get 和 set 用法</h3><pre class="line-numbers language-javascript"><code class="language-javascript">data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span> <span class="token string">'Foo'</span><span class="token punctuation">,</span>    lastName<span class="token punctuation">:</span> <span class="token string">'Bar'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>  fullName：<span class="token punctuation">{</span>   <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//回调函数 当需要读取当前属性值是执行，根据相关数据计算并返回当前属性的值</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName    <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token keyword">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//监视当前属性值的变化，当属性值发生变化时执行，更新相关的属性数据</span>       <span class="token comment" spellcheck="true">//val就是fullName的最新属性值</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>        <span class="token keyword">const</span> names <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Watch"><a href="#Watch" class="headerlink" title="Watch"></a>Watch</h2><ul><li>watch 就是一个观察动作</li></ul><h3 id="监听简单类型"><a href="#监听简单类型" class="headerlink" title="监听简单类型"></a>监听简单类型</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">{</span>        <span class="token string">'first'</span><span class="token punctuation">:</span><span class="token number">2</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    watch<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token function">first</span><span class="token punctuation">(</span>newvalue<span class="token punctuation">,</span>oldvalue<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newvalue<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oldvalue<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="监听复杂类型"><a href="#监听复杂类型" class="headerlink" title="监听复杂类型"></a>监听复杂类型</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">{</span>        <span class="token string">'first'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>          second<span class="token punctuation">:</span><span class="token number">0</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    watch<span class="token punctuation">:</span><span class="token punctuation">{</span>      first<span class="token punctuation">.</span>second<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="computed-与-watch-区别"><a href="#computed-与-watch-区别" class="headerlink" title="computed 与 watch 区别"></a>computed 与 watch 区别</h2><h3 id="computed-特性"><a href="#computed-特性" class="headerlink" title="computed 特性"></a>computed 特性</h3><ul><li><p>计算值</p></li><li><p>应用:就是相当于对 data 数据里面的二次封装</p></li><li><p>具有缓存性质。页面重新渲染值不变化。计算属性会立即返回之间的计算结果,而不必在执行函数</p></li></ul><h3 id="watch-特性"><a href="#watch-特性" class="headerlink" title="watch 特性"></a>watch 特性</h3><ul><li>观察</li><li>应用: 监听 props $emit 或本组件的值执行异步操作</li><li>无缓存性 : 页面重新渲染时值不变化也会执行</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue学记笔记(三) 生命周期</title>
      <link href="/2019/11/05/vuesan/"/>
      <url>/2019/11/05/vuesan/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-生命周期"><a href="#Vue-生命周期" class="headerlink" title="Vue 生命周期"></a>Vue 生命周期</h1><h2 id="什么是生命周期函数"><a href="#什么是生命周期函数" class="headerlink" title="什么是生命周期函数"></a>什么是生命周期函数</h2><p>生命周期函数俗称钩子函数，它只的是只有在特定的时候才执行的函数，这个时候以前或者以后都不执行</p><h2 id="Vue-里面有八大钩子函数"><a href="#Vue-里面有八大钩子函数" class="headerlink" title="Vue 里面有八大钩子函数"></a>Vue 里面有八大钩子函数</h2><h3 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h3><ul><li>它只得是在组件创建前执行,这个时候它只是个对象</li></ul><h3 id="created-创建后"><a href="#created-创建后" class="headerlink" title="created 创建后"></a>created 创建后</h3><ul><li>这个时候对象及其事件完全初始化了</li></ul><h3 id="beforeMounted"><a href="#beforeMounted" class="headerlink" title="beforeMounted"></a>beforeMounted</h3><ul><li>加载组件之前。这个时候表示还没有加载组件</li></ul><h3 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h3><ul><li>加载组件之后，这个时候表示已经加载完毕了。一般在这个钩子函数里面写获取数据，一些异步操作赋值等等</li></ul><h3 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h3><ul><li>更新组件，表示的是组件里面的数据有变化的时候，它在组件变化之前执行</li></ul><h3 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h3><ul><li>更新组件之后，表示的是组件里面的数据更新完毕才执行</li></ul><h3 id="beforeDestroy"><a href="#beforeDestroy" class="headerlink" title="beforeDestroy"></a>beforeDestroy</h3><ul><li>销毁前 表示组件在销毁前执行的函数</li></ul><h3 id="destroyed"><a href="#destroyed" class="headerlink" title="destroyed"></a>destroyed</h3><ul><li>销毁后表示的是组件销毁后执行的函数</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeMsg()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>change<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#container'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">'TigerChain'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:red'</span><span class="token punctuation">,</span> <span class="token string">'beforeCreate--实例创建前状态'</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'el  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'data  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'message  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:red'</span><span class="token punctuation">,</span> <span class="token string">'created--实例创建完成状态'</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'el  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'data  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'message  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:red'</span><span class="token punctuation">,</span> <span class="token string">'beforeMount--挂载之前的状态'</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'el  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'data  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'message  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:red'</span><span class="token punctuation">,</span> <span class="token string">'mounted--已经挂载的状态'</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'el  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'data  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'message  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:red'</span><span class="token punctuation">,</span> <span class="token string">'beforeUpdate--数据更新前的状态'</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'el  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'data  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'message  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>        <span class="token string">'%c%s'</span><span class="token punctuation">,</span>        <span class="token string">'color:green'</span><span class="token punctuation">,</span>        <span class="token string">'真实的 DOM 结构:'</span> <span class="token operator">+</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML      <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:red'</span><span class="token punctuation">,</span> <span class="token string">'updated--数据更新完成时状态'</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'el  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'data  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'message  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>        <span class="token string">'%c%s'</span><span class="token punctuation">,</span>        <span class="token string">'color:green'</span><span class="token punctuation">,</span>        <span class="token string">'真实的 DOM 结构:'</span> <span class="token operator">+</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML      <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">activated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>        <span class="token string">'%c%s'</span><span class="token punctuation">,</span>        <span class="token string">'color:red'</span><span class="token punctuation">,</span>        <span class="token string">'activated-- keep-alive 组件激活时调用'</span>      <span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'el  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'data  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'message  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">deactivated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:red'</span><span class="token punctuation">,</span> <span class="token string">'deactivated-- keep-alive 停用时调用'</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'el  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'data  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'message  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:red'</span><span class="token punctuation">,</span> <span class="token string">'beforeDestroy-- vue实例销毁前的状态'</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'el  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'data  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'message  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:red'</span><span class="token punctuation">,</span> <span class="token string">'destroyed-- vue实例销毁完成时调用'</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'el  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'data  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%c%s'</span><span class="token punctuation">,</span> <span class="token string">'color:blue'</span><span class="token punctuation">,</span> <span class="token string">'message  :'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">changeMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">'TigerChain111'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue学记笔记(二) 基本指令</title>
      <link href="/2019/11/04/vue-er-ji-ben-zhi-ling/"/>
      <url>/2019/11/04/vue-er-ji-ben-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-基本指令"><a href="#Vue-基本指令" class="headerlink" title="Vue 基本指令"></a>Vue 基本指令</h1><h3 id="1-v-text"><a href="#1-v-text" class="headerlink" title="(1) v-text"></a>(1) v-text</h3><ul><li>它的作用就是里面有 HTML 代码的话也不转义直接显示</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//element</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>          msg<span class="token punctuation">:</span> <span class="token string">'&lt;strong>Hello&lt;/strong> Vue!'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>渲染的结果就是&lt;strong&gt;Hello&lt;/strong&gt; Vue! 一个字符串</li></ul><h3 id="2-v-html"><a href="#2-v-html" class="headerlink" title="(2) v-html"></a>(2) v-html</h3><ul><li>它的作用就是绑定 html 属性把里面的 html 代码渲染出来</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//element</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>          msg<span class="token punctuation">:</span> <span class="token string">'&lt;strong>Hello&lt;/strong> Vue!'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>渲染结果就是 <strong>Hello</strong> Vue!</li></ul><h3 id="3-v-if-判断"><a href="#3-v-if-判断" class="headerlink" title="(3) v-if 判断"></a>(3) v-if 判断</h3><ul><li>(i) 真就渲染 假就不渲染,假的话就是根本没有这个 dom</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>不渲染<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//element</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>          flag<span class="token punctuation">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>这样结果就是不渲染，移除了 DOM</p></li><li><p>(ii) 有 if 就会有 v-else</p></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>不渲染<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>最后的结果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//element</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>          flag<span class="token punctuation">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>这里 v-if,v-else 要紧贴着使用,不然会报错误,v-if 显示 v-else 隐藏。v-if 隐藏 v-else 就显示</p></li><li><p>(3) v-else-if</p></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">'</span>a<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>渲染A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">'</span>b<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>渲染B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>渲染C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//element</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>          show<span class="token punctuation">:</span> <span class="token string">'a'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>依据 show 值不同渲染不同的数据</li></ul><h3 id="4-v-show"><a href="#4-v-show" class="headerlink" title="(4) v-show"></a>(4) v-show</h3><ul><li><p>它不用于 v-if ,它的作用是渲染了但是依据变量的真假来隐藏,等价于 display:none</p></li><li><p>而 v-if 则是 DOM 根本不会加载</p></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>渲染了,有DOM但是隐藏了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//element</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>          flag<span class="token punctuation">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-v-for"><a href="#5-v-for" class="headerlink" title="(5) v-for"></a>(5) v-for</h3><ul><li>列表循环</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(content,index) in listdata<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        这是第{{index}}数据,数据内容是{{content}}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//element</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>          listdata<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'第一条数据'</span><span class="token punctuation">,</span> <span class="token string">'第二条数据'</span><span class="token punctuation">,</span> <span class="token string">'第三条数据'</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>必须要有:key</li></ul><h3 id="6-v-once"><a href="#6-v-once" class="headerlink" title="(6) v-once"></a>(6) v-once</h3><ul><li>只会渲染一次，即使数据改变了他也不会改变</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-once</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//element</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>          msg<span class="token punctuation">:</span> <span class="token string">'只渲染一次，即使改变了也不会再次渲染'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-v-bind"><a href="#7-v-bind" class="headerlink" title="(7) v-bind"></a>(7) v-bind</h3><ul><li>v-bind 绑定数据 在 Vue 中可以简写成: 可以绑定数据,也可以当作给子组件传递数据</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[flag?<span class="token punctuation">'</span>active<span class="token punctuation">'</span>:<span class="token punctuation">'</span><span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//element</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>          flag<span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>flag 要是真就加载 active 的类名 flag 要是假就加载空</p></li><li><p>动态 class 几种方式</p></li><li><p>(1)最简单的 flag 为真就加载 active 为假就不渲染</p></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{<span class="token punctuation">'</span>active<span class="token punctuation">'</span>:flag}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//element</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>          flag<span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>(2)依据条件来加载,flag 要是-1 就加载,要不是就不加载</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{<span class="token punctuation">'</span>active<span class="token punctuation">'</span>:flag<span class="token punctuation">=</span><span class="token punctuation">=</span>-1}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//element</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>          flag<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>(3) 绑定并判断多个,属性名就是类名，值就是判断条件</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{<span class="token punctuation">'</span>active<span class="token punctuation">'</span>:flag,<span class="token punctuation">'</span>sort<span class="token punctuation">'</span>:flagsort}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//element</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>          flag<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span>          flagsort<span class="token punctuation">:</span><span class="token boolean">true</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-v-on"><a href="#8-v-on" class="headerlink" title="(8) v-on"></a>(8) v-on</h3><ul><li><p>监听事件 可以简写成@</p></li><li><p>v-on:click 可以简写成@click</p></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>change<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击我弹出来<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//element</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'弹出来'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-v-model"><a href="#9-v-model" class="headerlink" title="(9) v-model"></a>(9) v-model</h3><ul><li>数据的双向绑定 一般结合 input textarea 使用的修饰符可以有.lazy , .number, .trim</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputdata<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//element</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>          inputdata<span class="token punctuation">:</span> <span class="token string">'获取到数据'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue学记笔记(一) 安装</title>
      <link href="/2019/11/02/vue-yi-an-zhuang/"/>
      <url>/2019/11/02/vue-yi-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-介绍"><a href="#Vue-介绍" class="headerlink" title="Vue 介绍"></a>Vue 介绍</h1><h2 id="Vue-概述"><a href="#Vue-概述" class="headerlink" title="Vue 概述"></a>Vue 概述</h2><h3 id="1-什么是-Vue"><a href="#1-什么是-Vue" class="headerlink" title="(1) 什么是 Vue"></a>(1) 什么是 Vue</h3><p>Vue.js 是一套构建用户界面的渐进式框架，Vue 采用自下向上增量开发的设计，其核心库只关注视图层，易于上手，同时 vue 完全有能力驱动采用单文件组件和 Vue 生态系统支持的库开发的复杂单页应用。其实抛开官方的一些不知所云的说法，简单来说，在传统 web 开发中，我们搭建项目都以 html 结构为基础，然后通过 jquery 或者 js 来添加各种特效功能，需要去选中每一个元素进行命令，这些内容在简单的项目中或者不变的项目中还能应付得来，一旦项目改动或者项目工程较大，代码的修改将是复杂繁琐的，而这时候用了 vue，这些问题都不复存在。在比如一些单网页制作成的应用程序，一般涉及到数据交互的内容都很多，而应用了 vue 之后将大大缩减工作量。</p><h3 id="2-Vue-的好处"><a href="#2-Vue-的好处" class="headerlink" title="(2) Vue 的好处"></a>(2) Vue 的好处</h3><h4 id="i-数据绑定："><a href="#i-数据绑定：" class="headerlink" title="(i) 数据绑定："></a>(i) 数据绑定：</h4><p>vue 会根据对应的元素，进行设置元素数据，通过输入框，以及 get 获取数据等多种方式进行数据的实时绑定，进行网页及应用的数据渲染 。</p><h4 id="ii-组件式开发："><a href="#ii-组件式开发：" class="headerlink" title="(ii) 组件式开发："></a>(ii) 组件式开发：</h4><p>通过 vue 的模块封装，它可以将一个 web 开发中设计的各种模块进行拆分，变成单独的组件，然后通过数据绑定，调用对应模版组件，同时传入参数，即可完成对整个项目的开发。</p><h2 id="Vue-安装"><a href="#Vue-安装" class="headerlink" title="Vue 安装"></a>Vue 安装</h2><h3 id="1-Vuecli2-0-版本下的安装"><a href="#1-Vuecli2-0-版本下的安装" class="headerlink" title="(1) Vuecli2.0 版本下的安装"></a>(1) Vuecli2.0 版本下的安装</h3><h4 id="i-安装-vue-cli"><a href="#i-安装-vue-cli" class="headerlink" title="(i) 安装 vue-cli"></a>(i) 安装 vue-cli</h4><pre class="line-numbers language-javascript"><code class="language-javascript">npm i vue<span class="token operator">-</span>cli <span class="token operator">-</span> g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="ii-初始化项目"><a href="#ii-初始化项目" class="headerlink" title="(ii)初始化项目"></a>(ii)初始化项目</h4><pre class="line-numbers language-javascript"><code class="language-javascript">vue init webpack <span class="token function">text2</span><span class="token punctuation">(</span>项目名称随意填写不要有大写<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="iii-按照提示"><a href="#iii-按照提示" class="headerlink" title="(iii)按照提示"></a>(iii)按照提示</h4><pre class="line-numbers language-javascript"><code class="language-javascript">cd  text2npm run dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="iv-这样就完成了安装下面再说下配置"><a href="#iv-这样就完成了安装下面再说下配置" class="headerlink" title="(iv)这样就完成了安装下面再说下配置"></a>(iv)这样就完成了安装下面再说下配置</h4><pre class="line-numbers language-javascript"><code class="language-javascript">一般情况我们在build文件下找到webpack<span class="token punctuation">.</span>base<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>js 在里面修改别名比如proxyconfig 文件夹下面就是项目配置文件，我们要的变量配置都在这里src 重点我们平时写的文件都在这里components 文件夹就是组件assets 文件夹就是静态文件router 文件就是路由文件里面都是js文件main<span class="token punctuation">.</span>js 就是入口文件。引入全部来自这里<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="v-设置别名"><a href="#v-设置别名" class="headerlink" title="(v)设置别名"></a>(v)设置别名</h4><ul><li><p>在 webpack.base.conf.js 文件中可以找到这样一段代码</p></li><li><p>@components 是我们自己自定义的，可以随意替换</p></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'vue$'</span><span class="token punctuation">:</span> <span class="token string">'vue/dist/vue.esm.js'</span><span class="token punctuation">,</span>      <span class="token string">'@'</span><span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">'@components'</span><span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/components'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vi-设置代理"><a href="#vi-设置代理" class="headerlink" title="(vi)设置代理"></a>(vi)设置代理</h4><ul><li>找到 config 文件夹下面的 index.js 文件</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">proxyTable<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"/api"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// api相当于一个别名，代指 http://192.168.0.14:8081</span><span class="token string">'target'</span><span class="token punctuation">:</span><span class="token string">'http://192.168.0.14:8081'</span><span class="token punctuation">,</span><span class="token string">'changeOrigin'</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">'pathRewrite'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'^/api'</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Vuecli3-0-版本的安装"><a href="#2-Vuecli3-0-版本的安装" class="headerlink" title="(2)Vuecli3.0 版本的安装"></a>(2)Vuecli3.0 版本的安装</h3><ul><li>设置淘宝镜像</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">npm install <span class="token operator">-</span>g cnpm <span class="token operator">--</span>registry<span class="token operator">=</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>registry<span class="token punctuation">.</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="i-利用-cnpm-来安装"><a href="#i-利用-cnpm-来安装" class="headerlink" title="(i) 利用 cnpm 来安装"></a>(i) 利用 cnpm 来安装</h4><pre class="line-numbers language-javascript"><code class="language-javascript">npm i @vue<span class="token operator">/</span>cli <span class="token operator">-</span>goryarn global add @vue<span class="token operator">/</span>cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="ii-创建项目"><a href="#ii-创建项目" class="headerlink" title="(ii)创建项目"></a>(ii)创建项目</h4><pre class="line-numbers language-javascript"><code class="language-javascript">vue create <span class="token function">项目名称</span><span class="token punctuation">(</span>必须小写<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="iii-正式进去安装步骤"><a href="#iii-正式进去安装步骤" class="headerlink" title="(iii) 正式进去安装步骤"></a>(iii) 正式进去安装步骤</h4><pre class="line-numbers language-javascript"><code class="language-javascript">Vue CLI v3<span class="token number">.3</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">?</span> Please pick a preset<span class="token punctuation">:</span> <span class="token punctuation">(</span>Use arrow keys<span class="token punctuation">)</span><span class="token operator">></span> <span class="token keyword">default</span> <span class="token punctuation">(</span>babel<span class="token punctuation">,</span> eslint<span class="token punctuation">)</span>  Manually select features它的意思是选择默认还是手动选择<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="iv-下一步空格表示选择-回车表示进入下一步"><a href="#iv-下一步空格表示选择-回车表示进入下一步" class="headerlink" title="(iv)下一步空格表示选择 回车表示进入下一步"></a>(iv)下一步空格表示选择 回车表示进入下一步</h4><pre class="line-numbers language-javascript"><code class="language-javascript">Vue CLI v3<span class="token number">.3</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">?</span> Please pick a preset<span class="token punctuation">:</span> Manually select features<span class="token operator">?</span> Check the features needed <span class="token keyword">for</span> your project<span class="token punctuation">:</span> <span class="token punctuation">(</span>Press <span class="token operator">&lt;</span>space<span class="token operator">></span> to select<span class="token punctuation">,</span> <span class="token operator">&lt;</span>a<span class="token operator">></span> to toggle all<span class="token punctuation">,</span> <span class="token operator">&lt;</span>i<span class="token operator">></span> to invert selection<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> Babel <span class="token punctuation">(</span> <span class="token punctuation">)</span> TypeScript <span class="token punctuation">(</span> <span class="token punctuation">)</span> Progressive Web App <span class="token punctuation">(</span>PWA<span class="token punctuation">)</span> Support <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> Router <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> Vuex <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> CSS Pre<span class="token operator">-</span>processors <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> Linter <span class="token operator">/</span> Formatter <span class="token punctuation">(</span> <span class="token punctuation">)</span> Unit Testing <span class="token punctuation">(</span> <span class="token punctuation">)</span> E2E Testing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="v-模块安装询问我因为安装了-router-所以会弹出来-Y"><a href="#v-模块安装询问我因为安装了-router-所以会弹出来-Y" class="headerlink" title="(v) 模块安装询问我因为安装了 router 所以会弹出来 Y"></a>(v) 模块安装询问我因为安装了 router 所以会弹出来 Y</h4><pre class="line-numbers language-javascript"><code class="language-javascript">Vue CLI v3<span class="token number">.3</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">?</span> Please pick a preset<span class="token punctuation">:</span> Manually select features<span class="token operator">?</span> Check the features needed <span class="token keyword">for</span> your project<span class="token punctuation">:</span> Babel<span class="token punctuation">,</span> Router<span class="token punctuation">,</span> Vuex<span class="token punctuation">,</span> CSS Pre<span class="token operator">-</span>processors<span class="token punctuation">,</span> Linter<span class="token operator">?</span> Use history mode <span class="token keyword">for</span> router<span class="token operator">?</span> <span class="token punctuation">(</span>Requires proper server setup <span class="token keyword">for</span> index fallback <span class="token keyword">in</span> production<span class="token punctuation">)</span> <span class="token punctuation">(</span>Y<span class="token operator">/</span>n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vi-后面还有几步我就不列举了，发一个汇总版本的"><a href="#vi-后面还有几步我就不列举了，发一个汇总版本的" class="headerlink" title="(vi) 后面还有几步我就不列举了，发一个汇总版本的"></a>(vi) 后面还有几步我就不列举了，发一个汇总版本的</h4><pre class="line-numbers language-javascript"><code class="language-javascript">Vue CLI v3<span class="token number">.3</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">?</span> Please pick a preset<span class="token punctuation">:</span> Manually select features<span class="token operator">?</span> Check the features needed <span class="token keyword">for</span> your project<span class="token punctuation">:</span> Babel<span class="token punctuation">,</span> Router<span class="token punctuation">,</span> Vuex<span class="token punctuation">,</span> CSS Pre<span class="token operator">-</span>processors<span class="token punctuation">,</span> Linter<span class="token operator">?</span> Use history mode <span class="token keyword">for</span> router<span class="token operator">?</span> <span class="token punctuation">(</span>Requires proper server setup <span class="token keyword">for</span> index fallback <span class="token keyword">in</span> production<span class="token punctuation">)</span> Yes<span class="token operator">?</span> Pick a CSS pre<span class="token operator">-</span>processor <span class="token punctuation">(</span>PostCSS<span class="token punctuation">,</span> Autoprefixer and CSS Modules are supported by <span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Less<span class="token operator">?</span> Pick a linter <span class="token operator">/</span> formatter config<span class="token punctuation">:</span> Prettier<span class="token operator">?</span> Pick additional lint features<span class="token punctuation">:</span> <span class="token punctuation">(</span>Press <span class="token operator">&lt;</span>space<span class="token operator">></span> to select<span class="token punctuation">,</span> <span class="token operator">&lt;</span>a<span class="token operator">></span> to toggle all<span class="token punctuation">,</span> <span class="token operator">&lt;</span>i<span class="token operator">></span> to invert selection<span class="token punctuation">)</span>Lint on save<span class="token operator">?</span> Where <span class="token keyword">do</span> you prefer placing config <span class="token keyword">for</span> Babel<span class="token punctuation">,</span> PostCSS<span class="token punctuation">,</span> ESLint<span class="token punctuation">,</span> etc<span class="token punctuation">.</span><span class="token operator">?</span> In <span class="token keyword">package</span><span class="token punctuation">.</span>json<span class="token operator">?</span> Save <span class="token keyword">this</span> <span class="token keyword">as</span> a preset <span class="token keyword">for</span> future projects<span class="token operator">?</span> <span class="token punctuation">(</span>y<span class="token operator">/</span>N<span class="token punctuation">)</span> N <span class="token comment" spellcheck="true">//是否记录下，以便下次继续使用这套配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vii-安装最后一步"><a href="#vii-安装最后一步" class="headerlink" title="(vii)安装最后一步"></a>(vii)安装最后一步</h4><pre class="line-numbers language-javascript"><code class="language-javascript">cd demo1  <span class="token comment" spellcheck="true">// 进入项目目录 这里demo1就是你一上来create 那个名称</span>npm run serve  <span class="token comment" spellcheck="true">// 这里和2不一样了。2是run dev 而 3 是run serve</span>DONE  Compiled successfully <span class="token keyword">in</span> 2232ms                                                                                                                                                                        App running at<span class="token punctuation">:</span>  <span class="token operator">-</span> Local<span class="token punctuation">:</span>   http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8080</span><span class="token operator">/</span>  <span class="token operator">-</span> Network<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.8</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token operator">/</span>  Note that the development build is not optimized<span class="token punctuation">.</span>  To create a production build<span class="token punctuation">,</span> run npm run build<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="viii-根目录新建-vue-config-js-里面的配置"><a href="#viii-根目录新建-vue-config-js-里面的配置" class="headerlink" title="(viii)根目录新建 vue.config.js 里面的配置"></a>(viii)根目录新建 vue.config.js 里面的配置</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// vue.config.js 配置说明</span><span class="token comment" spellcheck="true">//官方vue.config.js 参考文档 https://cli.vuejs.org/zh/config/#css-loaderoptions</span><span class="token comment" spellcheck="true">// 这里只列一部分，具体配置参考文档</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//别名设置</span>  configureWebpack<span class="token punctuation">:</span> <span class="token punctuation">{</span>    resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>      alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>        assets<span class="token punctuation">:</span> <span class="token string">'@/assets'</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token string">'@/components'</span><span class="token punctuation">,</span>        views<span class="token punctuation">:</span> <span class="token string">'@/views'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 部署生产环境和开发环境下的URL。</span>  <span class="token comment" spellcheck="true">// 默认情况下，Vue CLI 会假设你的应用是被部署在一个域名的根路径上</span>  <span class="token comment" spellcheck="true">//例如 https://www.my-app.com/。如果应用被部署在一个子路径上，你就需要用这个选项指定这个子路径。例如，如果你的应用被部署在 https://www.my-app.com/my-app/，则设置 baseUrl 为 /my-app/。</span>  baseUrl<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token string">'./'</span> <span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// outputDir: 在npm run build 或 yarn build 时 ，生成文件的目录名称（要和baseUrl的生产环境路径一致）</span>  outputDir<span class="token punctuation">:</span> <span class="token string">'dist'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//用于放置生成的静态资源 (js、css、img、fonts) 的；（项目打包之后，静态资源会放在这个文件夹下）</span>  assetsDir<span class="token punctuation">:</span> <span class="token string">'assets'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//指定生成的 index.html 的输出路径  (打包之后，改变系统默认的index.html的文件名)</span>  <span class="token comment" spellcheck="true">// indexPath: "myIndex.html",</span>  <span class="token comment" spellcheck="true">//默认情况下，生成的静态资源在它们的文件名中包含了 hash 以便更好的控制缓存。你可以通过将这个选项设为 false 来关闭文件名哈希。(false的时候就是让原来的文件名不改变)</span>  filenameHashing<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//   lintOnSave：{ type:Boolean default:true } 问你是否使用eslint</span>  lintOnSave<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//如果你想要在生产构建时禁用 eslint-loader，你可以用如下配置</span>  <span class="token comment" spellcheck="true">// lintOnSave: process.env.NODE_ENV !== 'production',</span>  <span class="token comment" spellcheck="true">//是否使用包含运行时编译器的 Vue 构建版本。设置为 true 后你就可以在 Vue 组件中使用 template 选项了，但是这会让你的应用额外增加 10kb 左右。(默认false)</span>  <span class="token comment" spellcheck="true">// runtimeCompiler: false,</span>  <span class="token comment" spellcheck="true">/**   * 如果你不需要生产环境的 source map，可以将其设置为 false 以加速生产环境构建。   *  打包之后发现map文件过大，项目文件体积很大，设置为false就可以不输出map文件   *  map文件的作用在于：项目打包后，代码都是经过压缩加密的，如果运行时报错，输出的错误信息无法准确得知是哪里的代码报错。   *  有了map就可以像未加密的代码一样，准确的输出是哪一行哪一列有错。   * */</span>  productionSourceMap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 它支持webPack-dev-server的所有选项</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 这里有个前提必须引入文件     const appData = require("./data.json");     const seller = appData.seller;     const goods = appData.goods;     const ratings = appData.ratings;    */</span>    <span class="token function">before</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span> <span class="token punctuation">{</span>      app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/api/seller'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          errno<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          data<span class="token punctuation">:</span> seller        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/api/goods'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          errno<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          data<span class="token punctuation">:</span> goods        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/api/ratings'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          errno<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          data<span class="token punctuation">:</span> ratings        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//也可以直接写IP地址这样方便真机测试</span>    port<span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 端口号</span>    https<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// https:{type:Boolean}</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//配置自动启动浏览器</span>    <span class="token comment" spellcheck="true">// proxy: 'http://localhost:4000' // 配置跨域处理,只有一个代理</span>    <span class="token comment" spellcheck="true">// 配置多个代理</span>    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'/api'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        target<span class="token punctuation">:</span> <span class="token string">'&lt;url>'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//写地址</span>        ws<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 允许跨域</span>        changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//允许跨域</span>        pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">'^/api'</span><span class="token punctuation">:</span> <span class="token string">''</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token string">'/foo'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        target<span class="token punctuation">:</span> <span class="token string">'&lt;other_url>'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="viv-修改-配置可以在-package-json-里面"><a href="#viv-修改-配置可以在-package-json-里面" class="headerlink" title="(viv)修改 配置可以在 package.json 里面"></a>(viv)修改 配置可以在 package.json 里面</h4><ul><li>增加了 rules 选项</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">"eslintConfig"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"root"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">"env"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"node"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"extends"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">"plugin:vue/essential"</span><span class="token punctuation">,</span>      <span class="token string">"@vue/prettier"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"rules"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"no-console"</span><span class="token punctuation">:</span> <span class="token string">"off"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"parserOptions"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"parser"</span><span class="token punctuation">:</span> <span class="token string">"babel-eslint"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础语法学记笔记</title>
      <link href="/2019/11/01/vueall/"/>
      <url>/2019/11/01/vueall/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Vue-安装"><a href="#1-Vue-安装" class="headerlink" title="(1) Vue 安装"></a>(1) Vue 安装</h1><p><a href="https://jsopy.gitee.io/2019/11/02/vue-yi-an-zhuang/">点击跳转</a></p><h1 id="2-Vue-基本指令"><a href="#2-Vue-基本指令" class="headerlink" title="(2) Vue 基本指令"></a>(2) Vue 基本指令</h1><p><a href="https://jsopy.gitee.io/2019/11/04/vue-er-ji-ben-zhi-ling/">点击跳转</a></p><h1 id="3-Vue-生命周期"><a href="#3-Vue-生命周期" class="headerlink" title="(3) Vue 生命周期"></a>(3) Vue 生命周期</h1><p><a href="https://jsopy.gitee.io/2019/11/05/vuesan/">点击跳转</a></p><h1 id="4-Vue-computed-与-watch-区别"><a href="#4-Vue-computed-与-watch-区别" class="headerlink" title="(4) Vue computed 与 watch 区别"></a>(4) Vue computed 与 watch 区别</h1><p><a href="https://jsopy.gitee.io/2019/11/05/vuesi/">点击跳转</a></p><h1 id="5-Vue-组件"><a href="#5-Vue-组件" class="headerlink" title="(5) Vue 组件"></a>(5) Vue 组件</h1><p><a href="https://jsopy.gitee.io/2019/11/06/vuewu/">点击跳转</a></p><h1 id="6-Vue-Vuex"><a href="#6-Vue-Vuex" class="headerlink" title="(6) Vue Vuex"></a>(6) Vue Vuex</h1><p><a href="https://jsopy.gitee.io/2019/11/07/vueliu/">点击跳转</a></p><h1 id="7-Vue-路由"><a href="#7-Vue-路由" class="headerlink" title="(7) Vue 路由"></a>(7) Vue 路由</h1><p><a href="https://jsopy.gitee.io/2019/11/08/vueqi/">点击跳转</a></p><h1 id="8-Vue-路由参数，动画和钩子函数"><a href="#8-Vue-路由参数，动画和钩子函数" class="headerlink" title="(8) Vue 路由参数，动画和钩子函数"></a>(8) Vue 路由参数，动画和钩子函数</h1><p><a href="https://jsopy.gitee.io/2019/11/09/vueba/">点击跳转</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
